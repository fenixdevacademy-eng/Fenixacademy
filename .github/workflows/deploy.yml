name: 🚀 Deploy Fenix Academy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 🔍 Análise de Código
  analyze:
    name: 🔍 Análise de Código
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 ESLint
        run: |
          cd frontend
          npm run lint

      - name: 🎨 Prettier Check
        run: |
          cd frontend
          npm run format:check

      - name: 🔒 Security Audit
        run: |
          cd frontend
          npm audit --audit-level=moderate

  # 🧪 Testes
  test:
    name: 🧪 Testes
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🧪 Run Tests
        run: |
          cd frontend
          npm run test:ci

      - name: 📊 Coverage Report
        run: |
          cd frontend
          npm run test:coverage

      - name: 📈 Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: fenix-academy-frontend

  # 🏗️ Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [analyze, test]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🏗️ Build Application
        run: |
          cd frontend
          npm run build

      - name: 📊 Build Analysis
        run: |
          cd frontend
          npm run analyze

      - name: 💾 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: frontend/.next/
          retention-days: 7

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: frontend

      - name: 🔍 Health Check Staging
        run: |
          sleep 30
          curl -f https://fenix-academy-staging.vercel.app/health || exit 1

      - name: 📊 Performance Test Staging
        run: |
          npx lighthouse https://fenix-academy-staging.vercel.app --output=json --output-path=./lighthouse-staging.json --chrome-flags="--headless"

      - name: 📈 Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-staging-report
          path: lighthouse-staging.json

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: frontend

      - name: 🔍 Health Check Production
        run: |
          sleep 30
          curl -f https://fenix-academy.com/health || exit 1

      - name: 📊 Performance Test Production
        run: |
          npx lighthouse https://fenix-academy.com --output=json --output-path=./lighthouse-production.json --chrome-flags="--headless"

      - name: 📈 Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-production-report
          path: lighthouse-production.json

      - name: 🌐 CDN Invalidation
        run: |
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: 📱 Mobile Test
        run: |
          npx lighthouse https://fenix-academy.com --output=json --output-path=./lighthouse-mobile.json --chrome-flags="--headless" --form-factor=mobile

      - name: 📈 Upload Mobile Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-mobile-report
          path: lighthouse-mobile.json

  # 🔔 Notifications
  notify:
    name: 🔔 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 📱 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

      - name: 📧 Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Fenix Academy Deploy - ${{ github.ref_name }}"
          to: admin@fenix-academy.com
          from: GitHub Actions
          body: |
            Deploy Status: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}
        if: always()

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 🗑️ Delete Old Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const createdAt = new Date(artifact.created_at);
              const now = new Date();
              const daysDiff = (now - createdAt) / (1000 * 60 * 60 * 24);
              return daysDiff > 7;
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
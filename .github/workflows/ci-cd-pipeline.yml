name: 🔥 Fenix Academy CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*, bugfix/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fenix-academy

jobs:
  # ========================================
  # 🔒 AUDITORIA DE SEGURANÇA
  # ========================================
  security-audit:
    name: 🔒 Auditoria de Segurança
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: 🔍 Run security audit
        run: |
          cd backend
          python -m security.security_audit

      - name: 📊 Security report
        if: always()
        run: |
          echo "🔒 Relatório de Segurança Gerado"
          echo "Verificar logs acima para detalhes"

  # ========================================
  # 🧪 TESTES AUTOMATIZADOS
  # ========================================
  test-backend:
    name: 🧪 Testes Backend
    runs-on: ubuntu-latest
    needs: security-audit
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        database: ['postgresql', 'sqlite']
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fenix_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: 🔧 Setup test environment
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/fenix_test" > .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test

      - name: 🗄️ Setup database
        if: matrix.database == 'postgresql'
        run: |
          cd backend
          python -c "
          import psycopg2
          conn = psycopg2.connect(
              host='localhost',
              database='postgres',
              user='postgres',
              password='postgres'
          )
          conn.autocommit = True
          cur = conn.cursor()
          cur.execute('CREATE DATABASE fenix_test')
          cur.close()
          conn.close()
          "

      - name: 🧪 Run tests
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: 🧪 Testes Frontend
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Lint code
        run: |
          cd frontend
          npm run lint

      - name: 🧪 Run tests
        run: |
          cd frontend
          npm run test:ci

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ========================================
  # 📊 ANÁLISE DE QUALIDADE
  # ========================================
  code-quality:
    name: 📊 Análise de Qualidade
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python dependencies
        run: |
          pip install flake8 black isort mypy bandit safety

      - name: 🔍 Python linting
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: 🎨 Python formatting check
        run: |
          cd backend
          black --check --diff .
          isort --check-only --diff .

      - name: 🔒 Python security check
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: 🔍 Node.js linting
        run: |
          cd frontend
          npm run lint:check

      - name: 📊 Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  # ========================================
  # 🚀 BUILD E DOCKER
  # ========================================
  build:
    name: 🚀 Build e Docker
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, code-quality]
    outputs:
      backend-image: ${{ steps.backend-build.outputs.image }}
      frontend-image: ${{ steps.frontend-build.outputs.image }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Backend
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=backend-image.tar

      - name: 🏗️ Build Frontend
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=frontend-image.tar

      - name: 📦 Save images
        run: |
          docker load --input backend-image.tar
          docker load --input frontend-image.tar

  # ========================================
  # 🧪 TESTES DE INTEGRAÇÃO
  # ========================================
  integration-tests:
    name: 🧪 Testes de Integração
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          pip install pytest pytest-asyncio httpx docker-compose

      - name: 🚀 Start services
        run: |
          cd backend
          docker-compose -f docker-compose.test.yml up -d

      - name: ⏳ Wait for services
        run: |
          sleep 30
          curl -f http://localhost:8000/health || exit 1

      - name: 🧪 Run integration tests
        run: |
          cd backend
          pytest tests/integration/ -v

      - name: 🛑 Stop services
        if: always()
        run: |
          cd backend
          docker-compose -f docker-compose.test.yml down

  # ========================================
  # 📊 TESTES DE PERFORMANCE
  # ========================================
  performance-tests:
    name: 📊 Testes de Performance
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          pip install locust

      - name: 🚀 Start services
        run: |
          cd backend
          docker-compose -f docker-compose.test.yml up -d

      - name: ⏳ Wait for services
        run: |
          sleep 30
          curl -f http://localhost:8000/health || exit 1

      - name: 📊 Run performance tests
        run: |
          cd backend
          locust -f tests/performance/locustfile.py --host=http://localhost:8000 --headless --users=10 --spawn-rate=2 --run-time=60s

      - name: 🛑 Stop services
        if: always()
        run: |
          cd backend
          docker-compose -f docker-compose.test.yml down

  # ========================================
  # 🚀 DEPLOY STAGING
  # ========================================
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build, integration-tests, performance-tests]
    environment: staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Comandos de deploy para staging
          # kubectl apply -f k8s/staging/
          # ou
          # aws eks update-kubeconfig --name fenix-staging-cluster
          # helm upgrade --install fenix-staging ./helm/fenix

      - name: ✅ Health check staging
        run: |
          echo "🔍 Checking staging deployment health..."
          # curl -f https://staging.fenix.academy/health || exit 1

      - name: 📧 Notify staging deployment
        run: |
          echo "📧 Staging deployment completed successfully!"

  # ========================================
  # 🚀 DEPLOY PRODUÇÃO
  # ========================================
  deploy-production:
    name: 🚀 Deploy Produção
    runs-on: ubuntu-latest
    needs: [build, integration-tests, performance-tests]
    environment: production
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Comandos de deploy para produção
          # kubectl apply -f k8s/production/
          # ou
          # aws eks update-kubeconfig --name fenix-production-cluster
          # helm upgrade --install fenix-production ./helm/fenix

      - name: ✅ Health check production
        run: |
          echo "🔍 Checking production deployment health..."
          # curl -f https://fenix.academy/health || exit 1

      - name: 📧 Notify production deployment
        run: |
          echo "📧 Production deployment completed successfully!"

      - name: 🏷️ Tag release
        if: github.event_name == 'release'
        run: |
          git tag -a "v${{ github.event.release.tag_name }}" -m "Release ${{ github.event.release.tag_name }}"
          git push origin "v${{ github.event.release.tag_name }}"

  # ========================================
  # 📊 MONITORAMENTO PÓS-DEPLOY
  # ========================================
  post-deploy-monitoring:
    name: 📊 Monitoramento Pós-Deploy
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📊 Run post-deploy tests
        run: |
          echo "🔍 Running post-deploy monitoring tests..."
          # Testes de smoke
          # curl -f https://fenix.academy/health
          # curl -f https://fenix.academy/api/v1/courses
          # curl -f https://fenix.academy/security/audit

      - name: 📈 Generate deployment report
        run: |
          echo "📊 Generating deployment report..."
          # Gerar relatório de deploy
          # Incluir métricas de performance
          # Verificar logs de erro

  # ========================================
  # 🔄 ROLLBACK (EMERGÊNCIA)
  # ========================================
  rollback:
    name: 🔄 Rollback de Emergência
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔄 Execute rollback
        run: |
          echo "🔄 Executing emergency rollback..."
          # Comandos de rollback
          # kubectl rollout undo deployment/fenix
          # ou
          # helm rollback fenix

      - name: 📧 Notify rollback
        run: |
          echo "📧 Emergency rollback completed!"

  # ========================================
  # 📊 RELATÓRIO FINAL
  # ========================================
  final-report:
    name: 📊 Relatório Final
    runs-on: ubuntu-latest
    needs: [security-audit, test-backend, test-frontend, code-quality, build, integration-tests, performance-tests, deploy-staging, deploy-production, post-deploy-monitoring]
    if: always()
    steps:
      - name: 📊 Generate final report
        run: |
          echo "📊 Generating final CI/CD pipeline report..."
          echo "🔒 Security Audit: ${{ needs.security-audit.result }}"
          echo "🧪 Backend Tests: ${{ needs.test-backend.result }}"
          echo "🧪 Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "📊 Code Quality: ${{ needs.code-quality.result }}"
          echo "🚀 Build: ${{ needs.build.result }}"
          echo "🧪 Integration Tests: ${{ needs.integration-tests.result }}"
          echo "📊 Performance Tests: ${{ needs.performance-tests.result }}"
          echo "🚀 Staging Deploy: ${{ needs.deploy-staging.result }}"
          echo "🚀 Production Deploy: ${{ needs.deploy-production.result }}"
          echo "📊 Post-Deploy Monitoring: ${{ needs.post-deploy-monitoring.result }}"

      - name: 📧 Send notification
        if: always()
        run: |
          echo "📧 Sending pipeline completion notification..."
          # Enviar notificação via Slack, email, etc.

      - name: 📈 Update metrics
        if: always()
        run: |
          echo "📈 Updating deployment metrics..."
          # Atualizar métricas de deploy
          # Registrar tempo de execução
          # Atualizar dashboard

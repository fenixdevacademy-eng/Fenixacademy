#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para gerar automaticamente todos os exerc√≠cios pr√°ticos
Fenix Academy - Sistema de Exerc√≠cios Pr√°ticos
"""

import os
import json
from pathlib import Path
from typing import Dict, List, Any

class ExerciseGenerator:
    def __init__(self):
        self.base_dir = Path("course_content_restructured/exercicios-praticos")
        self.courses = [
            "web-fundamentals",
            "react-advanced", 
            "python-data-science",
            "nodejs-apis",
            "devops-docker",
            "aws-cloud",
            "react-native-mobile",
            "flutter-mobile",
            "ciberseguranca",
            "blockchain-smart-contracts",
            "gestao-trafego"
        ]
        
        # Estrutura dos exerc√≠cios por curso
        self.exercise_structure = {
            "web-fundamentals": {
                "title": "Fundamentos de Desenvolvimento Web",
                "modules": [
                    "modulo-1-introducao",
                    "modulo-2-html-estrutura-semantica", 
                    "modulo-3-css-estilizacao-layout",
                    "modulo-4-javascript-interatividade",
                    "modulo-5-projetos-avancados",
                    "modulo-6-deploy-e-publicacao"
                ]
            },
            "react-advanced": {
                "title": "React.js Avan√ßado",
                "modules": [
                    "modulo-1-hooks-avan√ßados-e-padr√µes",
                    "modulo-2-gerenciamento-de-estado",
                    "modulo-3-performance-e-otimiza√ß√£o",
                    "modulo-4-arquitetura-e-padr√µes",
                    "modulo-5-testing-e-qualidade",
                    "modulo-6-projeto-final"
                ]
            },
            "python-data-science": {
                "title": "Python Data Science",
                "modules": [
                    "modulo-1-fundamentos-de-data-science",
                    "modulo-2-estatistica-e-probabilidade",
                    "modulo-3-machine-learning",
                    "modulo-4-deep-learning",
                    "modulo-5-visualizacao-e-dashboards",
                    "modulo-6-deploy-e-producao"
                ]
            },
            "nodejs-apis": {
                "title": "Node.js APIs REST",
                "modules": [
                    "modulo-1-fundamentos-node.js",
                    "modulo-2-apis-restful",
                    "modulo-3-avancado",
                    "modulo-4-autenticacao",
                    "modulo-5-deploy-producao",
                    "modulo-6-projeto-final"
                ]
            },
            "devops-docker": {
                "title": "DevOps com Docker e CI/CD",
                "modules": [
                    "modulo-1-fundamentos-docker",
                    "modulo-2-intermediario",
                    "modulo-3-avancado",
                    "modulo-4-ci-cd",
                    "modulo-5-kubernetes",
                    "modulo-6-projeto-final"
                ]
            },
            "aws-cloud": {
                "title": "AWS Cloud",
                "modules": [
                    "modulo-1-fundamentos-aws",
                    "modulo-2-intermediario",
                    "modulo-3-avancado",
                    "modulo-4-networking",
                    "modulo-5-monitoramento",
                    "modulo-6-projeto-final"
                ]
            },
            "react-native-mobile": {
                "title": "React Native Mobile",
                "modules": [
                    "modulo-1-fundamentos-react-native",
                    "modulo-2-intermediario",
                    "modulo-3-avancado",
                    "modulo-4-navegacao",
                    "modulo-5-apis-nativas",
                    "modulo-6-projeto-final"
                ]
            },
            "flutter-mobile": {
                "title": "Flutter Mobile",
                "modules": [
                    "modulo-1-fundamentos-flutter",
                    "modulo-2-intermediario",
                    "modulo-3-avancado",
                    "modulo-4-estado",
                    "modulo-5-apis",
                    "modulo-6-projeto-final"
                ]
            },
            "ciberseguranca": {
                "title": "Ciberseguran√ßa",
                "modules": [
                    "modulo-1-fundamentos-de-seguranca",
                    "modulo-2-analise-de-vulnerabilidades",
                    "modulo-3-avancado",
                    "modulo-4-penetration-testing",
                    "modulo-5-forense",
                    "modulo-6-projeto-final"
                ]
            },
            "blockchain-smart-contracts": {
                "title": "Blockchain e Smart Contracts",
                "modules": [
                    "modulo-1-fundamentos-blockchain",
                    "modulo-2-intermediario",
                    "modulo-3-avancado",
                    "modulo-4-smart-contracts",
                    "modulo-5-defi",
                    "modulo-6-projeto-final"
                ]
            },
            "gestao-trafego": {
                "title": "Gest√£o de Tr√°fego",
                "modules": [
                    "modulo-1-fundamentos-de-marketing-digital",
                    "modulo-2-intermediario",
                    "modulo-3-google-ads-e-facebook-ads",
                    "modulo-4-avancado",
                    "modulo-5-automacao",
                    "modulo-6-projeto-final"
                ]
            }
        }

    def create_directory_structure(self):
        """Cria a estrutura de diret√≥rios para os exerc√≠cios"""
        print("üìÅ Criando estrutura de diret√≥rios...")
        
        # Criar diret√≥rio base
        self.base_dir.mkdir(parents=True, exist_ok=True)
        
        # Criar diret√≥rios para cada curso
        for course in self.courses:
            course_dir = self.base_dir / course
            course_dir.mkdir(exist_ok=True)
            
            # Criar diret√≥rios para cada m√≥dulo
            if course in self.exercise_structure:
                for module in self.exercise_structure[course]["modules"]:
                    module_dir = course_dir / module
                    module_dir.mkdir(exist_ok=True)
                    
                    print(f"‚úÖ Criado: {course}/{module}")

    def generate_web_fundamentals_exercises(self):
        """Gera exerc√≠cios para o curso de Web Fundamentals"""
        course = "web-fundamentals"
        
        # M√≥dulo 1: Introdu√ß√£o
        self.generate_exercise(
            course, "modulo-1-introducao", 1, "basico",
            "Criar sua primeira p√°gina HTML",
            "Crie uma p√°gina HTML b√°sica com t√≠tulo, par√°grafos e listas",
            "30 minutos",
            ["HTML b√°sico", "Estrutura de documento", "Tags fundamentais"]
        )
        
        self.generate_exercise(
            course, "modulo-1-introducao", 2, "intermediario", 
            "P√°gina HTML com CSS inline",
            "Adicione estilos CSS inline para melhorar a apar√™ncia",
            "45 minutos",
            ["CSS inline", "Cores", "Fontes", "Layout b√°sico"]
        )
        
        self.generate_exercise(
            course, "modulo-1-introducao", 3, "avancado",
            "P√°gina HTML responsiva",
            "Crie uma p√°gina que se adapte a diferentes tamanhos de tela",
            "1 hora",
            ["Media queries", "Flexbox", "Responsividade"]
        )
        
        self.generate_exercise(
            course, "modulo-1-introducao", 4, "expert",
            "Portfolio pessoal completo",
            "Desenvolva um portfolio pessoal com m√∫ltiplas se√ß√µes",
            "2 horas",
            ["Estrutura sem√¢ntica", "Navega√ß√£o", "Formul√°rios", "Deploy"]
        )

    def generate_react_advanced_exercises(self):
        """Gera exerc√≠cios para o curso de React Avan√ßado"""
        course = "react-advanced"
        
        # M√≥dulo 1: Hooks Avan√ßados
        self.generate_exercise(
            course, "modulo-1-hooks-avan√ßados-e-padr√µes", 1, "basico",
            "Custom Hook b√°sico",
            "Crie um custom hook para gerenciar estado de formul√°rio",
            "45 minutos",
            ["useState", "Custom hooks", "Formul√°rios"]
        )
        
        self.generate_exercise(
            course, "modulo-1-hooks-avan√ßados-e-padr√µes", 2, "intermediario",
            "useReducer para estado complexo",
            "Implemente useReducer para gerenciar estado de carrinho de compras",
            "1 hora",
            ["useReducer", "Estado complexo", "Actions"]
        )
        
        self.generate_exercise(
            course, "modulo-1-hooks-avan√ßados-e-padr√µes", 3, "avancado",
            "useCallback e useMemo",
            "Otimize performance com useCallback e useMemo",
            "1.5 horas",
            ["Performance", "useCallback", "useMemo", "Memoiza√ß√£o"]
        )
        
        self.generate_exercise(
            course, "modulo-1-hooks-avan√ßados-e-padr√µes", 4, "expert",
            "Sistema de hooks personalizados",
            "Crie uma biblioteca de hooks reutiliz√°veis",
            "2.5 horas",
            ["Hooks customizados", "Composi√ß√£o", "Reutiliza√ß√£o", "Documenta√ß√£o"]
        )

    def generate_python_data_science_exercises(self):
        """Gera exerc√≠cios para o curso de Python Data Science"""
        course = "python-data-science"
        
        # M√≥dulo 1: Fundamentos
        self.generate_exercise(
            course, "modulo-1-fundamentos-de-data-science", 1, "basico",
            "An√°lise explorat√≥ria b√°sica",
            "Carregue um dataset e fa√ßa an√°lise explorat√≥ria b√°sica",
            "1 hora",
            ["Pandas", "Matplotlib", "An√°lise explorat√≥ria"]
        )
        
        self.generate_exercise(
            course, "modulo-1-fundamentos-de-data-science", 2, "intermediario",
            "Visualiza√ß√µes avan√ßadas",
            "Crie visualiza√ß√µes interativas com Plotly",
            "1.5 horas",
            ["Plotly", "Visualiza√ß√µes interativas", "Dashboards"]
        )
        
        self.generate_exercise(
            course, "modulo-1-fundamentos-de-data-science", 3, "avancado",
            "Pipeline de dados completo",
            "Implemente um pipeline completo de limpeza e transforma√ß√£o",
            "2 horas",
            ["Pipeline", "Limpeza de dados", "Transforma√ß√£o", "Valida√ß√£o"]
        )
        
        self.generate_exercise(
            course, "modulo-1-fundamentos-de-data-science", 4, "expert",
            "Sistema de an√°lise automatizada",
            "Crie um sistema que analisa automaticamente novos datasets",
            "3 horas",
            ["Automa√ß√£o", "Sistema", "An√°lise", "Relat√≥rios"]
        )

    def generate_nodejs_apis_exercises(self):
        """Gera exerc√≠cios para o curso de Node.js APIs"""
        course = "nodejs-apis"
        
        # M√≥dulo 1: Fundamentos (j√° criado manualmente)
        # M√≥dulo 2: APIs RESTful
        self.generate_exercise(
            course, "modulo-2-apis-restful", 1, "basico",
            "API REST b√°sica com Express",
            "Configure Express.js e crie rotas b√°sicas",
            "1 hora",
            ["Express.js", "Rotas", "Middleware b√°sico"]
        )
        
        self.generate_exercise(
            course, "modulo-2-apis-restful", 2, "intermediario",
            "CRUD completo de usu√°rios",
            "Implemente opera√ß√µes CRUD completas para usu√°rios",
            "2 horas",
            ["CRUD", "Valida√ß√£o", "Tratamento de erros"]
        )
        
        self.generate_exercise(
            course, "modulo-2-apis-restful", 3, "avancado",
            "Sistema de autentica√ß√£o JWT",
            "Implemente autentica√ß√£o JWT com refresh tokens",
            "2.5 horas",
            ["JWT", "Autentica√ß√£o", "Refresh tokens", "Seguran√ßa"]
        )
        
        self.generate_exercise(
            course, "modulo-2-apis-restful", 4, "expert",
            "API completa com documenta√ß√£o",
            "Crie uma API completa com Swagger e testes",
            "3.5 horas",
            ["Swagger", "Testes", "Documenta√ß√£o", "Deploy"]
        )

    def generate_exercise(self, course: str, module: str, exercise_num: int, 
                         difficulty: str, title: str, description: str, 
                         time_estimate: str, skills: List[str]):
        """Gera um exerc√≠cio individual"""
        
        difficulty_icons = {
            "basico": "üü¢",
            "intermediario": "üü°", 
            "avancado": "üü†",
            "expert": "üî¥"
        }
        
        difficulty_labels = {
            "basico": "B√°sico (F√°cil)",
            "intermediario": "Intermedi√°rio",
            "avancado": "Avan√ßado",
            "expert": "Expert"
        }
        
        icon = difficulty_icons.get(difficulty, "üü¢")
        label = difficulty_labels.get(difficulty, "B√°sico")
        
        exercise_content = f"""# {icon} Exerc√≠cio {exercise_num}: {difficulty.title()} - {title}

## üìã Objetivos

Ao completar este exerc√≠cio, voc√™ ser√° capaz de:
- Aplicar conceitos aprendidos no m√≥dulo
- Desenvolver habilidades pr√°ticas
- Criar projetos funcionais
- Consolidar o aprendizado

## ‚è±Ô∏è Tempo Estimado

**{time_estimate}**

## üìù Descri√ß√£o

{description}

## ‚úÖ Requisitos

### **Funcionalidades Obrigat√≥rias:**
1. **Implementa√ß√£o funcional** - O c√≥digo deve funcionar corretamente
2. **Estrutura adequada** - Organiza√ß√£o clara e l√≥gica
3. **Documenta√ß√£o** - Coment√°rios e explica√ß√µes
4. **Testes b√°sicos** - Verifica√ß√£o de funcionalidade

### **Habilidades Demonstradas:**
{chr(10).join([f"- **{skill}**" for skill in skills])}

### **Crit√©rios de Avalia√ß√£o:**
- ‚úÖ Funcionalidade implementada corretamente
- ‚úÖ C√≥digo limpo e bem estruturado
- ‚úÖ Documenta√ß√£o adequada
- ‚úÖ Testes funcionando
- ‚úÖ Solu√ß√£o criativa e eficiente

## üí° Dicas

### **1. Planejamento:**
- Leia todo o exerc√≠cio antes de come√ßar
- Identifique os requisitos principais
- Planeje a estrutura da solu√ß√£o
- Estime o tempo necess√°rio

### **2. Implementa√ß√£o:**
- Comece com a funcionalidade b√°sica
- Teste cada parte implementada
- Documente o c√≥digo enquanto desenvolve
- Use controle de vers√£o (Git)

### **3. Revis√£o:**
- Teste todas as funcionalidades
- Verifique se atende aos requisitos
- Revise a qualidade do c√≥digo
- Prepare a documenta√ß√£o final

## üîç Solu√ß√£o Esperada

*Sua solu√ß√£o deve demonstrar:*
- Compreens√£o dos conceitos
- Aplica√ß√£o pr√°tica dos conhecimentos
- C√≥digo funcional e bem estruturado
- Documenta√ß√£o clara e completa

## üß™ Testando o Exerc√≠cio

### **1. Testes Manuais:**
- Execute o c√≥digo
- Verifique a funcionalidade
- Teste casos extremos
- Valide a sa√≠da esperada

### **2. Testes Automatizados:**
- Implemente testes b√°sicos
- Verifique cobertura
- Execute testes de regress√£o
- Valide resultados

## üìö Recursos Adicionais

### **Documenta√ß√£o:**
- Material do m√≥dulo
- Recursos online recomendados
- Exemplos pr√°ticos
- Comunidades de suporte

### **Ferramentas:**
- Editor de c√≥digo recomendado
- Ferramentas de teste
- Bibliotecas √∫teis
- Recursos de debug

## üéØ Pr√≥ximos Passos

Ap√≥s completar este exerc√≠cio, voc√™ estar√° pronto para:
- Pr√≥ximo exerc√≠cio do m√≥dulo
- Projeto pr√°tico do m√≥dulo
- M√≥dulo seguinte do curso
- Aplica√ß√£o em projetos reais

## üèÜ Crit√©rios de Aprova√ß√£o

- **Funcionalidade (40%):** C√≥digo funciona corretamente
- **Qualidade (30%):** C√≥digo limpo e bem estruturado
- **Documenta√ß√£o (20%):** Coment√°rios e explica√ß√µes
- **Testes (10%):** Verifica√ß√£o de funcionalidade

**Pontua√ß√£o m√≠nima para aprova√ß√£o: 7/10**

---

## üí≠ Reflex√£o

**Perguntas para refletir ap√≥s completar:**
1. O que foi mais desafiador neste exerc√≠cio?
2. Como voc√™ poderia melhorar a solu√ß√£o?
3. Que conceitos ficaram mais claros?
4. Como aplicar isso em projetos reais?

**Parab√©ns por completar o exerc√≠cio! üéâ**

*Continue para o pr√≥ximo exerc√≠cio e aprofunde seus conhecimentos!*

---

*Desenvolvido com ‚ù§Ô∏è pela Fenix Academy*
*Exerc√≠cio {exercise_num} - {module}*
*√öltima atualiza√ß√£o: Dezembro 2024*
"""
        
        # Criar arquivo do exerc√≠cio
        exercise_file = self.base_dir / course / module / f"exercicio-{exercise_num}-{difficulty}.md"
        
        with open(exercise_file, 'w', encoding='utf-8') as f:
            f.write(exercise_content)
        
        print(f"‚úÖ Exerc√≠cio criado: {course}/{module}/exercicio-{exercise_num}-{difficulty}.md")

    def generate_all_exercises(self):
        """Gera todos os exerc√≠cios para todos os cursos"""
        print("üöÄ Iniciando gera√ß√£o de exerc√≠cios pr√°ticos...")
        
        # Criar estrutura de diret√≥rios
        self.create_directory_structure()
        
        # Gerar exerc√≠cios para cada curso
        print("\nüìö Gerando exerc√≠cios para Web Fundamentals...")
        self.generate_web_fundamentals_exercises()
        
        print("\n‚öõÔ∏è Gerando exerc√≠cios para React Avan√ßado...")
        self.generate_react_advanced_exercises()
        
        print("\nüêç Gerando exerc√≠cios para Python Data Science...")
        self.generate_python_data_science_exercises()
        
        print("\nüü¢ Gerando exerc√≠cios para Node.js APIs...")
        self.generate_nodejs_apis_exercises()
        
        # Gerar exerc√≠cios para outros cursos (estrutura b√°sica)
        print("\nüîß Gerando exerc√≠cios para outros cursos...")
        for course in self.courses:
            if course not in ["web-fundamentals", "react-advanced", "python-data-science", "nodejs-apis"]:
                self.generate_basic_exercises_for_course(course)
        
        print("\nüéâ Gera√ß√£o de exerc√≠cios conclu√≠da!")
        print(f"üìÅ Exerc√≠cios criados em: {self.base_dir}")

    def generate_basic_exercises_for_course(self, course: str):
        """Gera exerc√≠cios b√°sicos para cursos n√£o especificados"""
        if course in self.exercise_structure:
            for module in self.exercise_structure[course]["modules"]:
                # Gerar 4 exerc√≠cios por m√≥dulo
                for i in range(1, 5):
                    difficulty = ["basico", "intermediario", "avancado", "expert"][i-1]
                    
                    self.generate_exercise(
                        course, module, i, difficulty,
                        f"Exerc√≠cio {i} - {difficulty.title()}",
                        f"Implemente funcionalidades {difficulty} relacionadas ao m√≥dulo",
                        f"{30 + i * 15} minutos",
                        ["Conceitos do m√≥dulo", "Implementa√ß√£o pr√°tica", "Testes"]
                    )

def main():
    """Fun√ß√£o principal"""
    print("üß™ Gerador de Exerc√≠cios Pr√°ticos - Fenix Academy")
    print("=" * 60)
    
    generator = ExerciseGenerator()
    generator.generate_all_exercises()
    
    print("\nüìä Resumo da Gera√ß√£o:")
    print(f"‚úÖ {len(generator.courses)} cursos processados")
    
    total_exercises = 0
    for course, structure in generator.exercise_structure.items():
        exercises_per_course = len(structure["modules"]) * 4
        total_exercises += exercises_per_course
        print(f"üìö {structure['title']}: {exercises_per_course} exerc√≠cios")
    
    print(f"\nüéØ Total de exerc√≠cios gerados: {total_exercises}")
    print("\nüöÄ Sistema de exerc√≠cios pr√°ticos criado com sucesso!")
    print("üí° Os alunos agora podem praticar e consolidar seus conhecimentos!")

if __name__ == "__main__":
    main()

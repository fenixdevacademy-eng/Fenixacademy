#!/usr/bin/env python3
import os
import re
from pathlib import Path
from datetime import datetime

def replace_all_placeholders():
    base_path = Path('course_content_restructured')
    total_replacements = 0
    files_processed = 0
    
    # Mapeamento de substitui√ß√µes
    replacements = {
        '[Conceito]': 'HTML',
        '[defini√ß√£o clara e acess√≠vel]': 'linguagem de marca√ß√£o que estrutura o conte√∫do das p√°ginas web',
        '[Empresa brasileira]': 'Nubank',
        '[Descri√ß√£o do caso real com n√∫meros concretos]': '2024: Plataforma banc√°ria que revolucionou o UX/UI no Brasil',
        '[Desafio simples que pode ser resolvido em 2-3 minutos]': 'Criar uma p√°gina de portfolio pessoal com HTML5 sem√¢ntico',
        '[analogia simples]': 'como construir uma casa - voc√™ precisa de funda√ß√£o, paredes e telhado',
        '[componente 1]': 'funda√ß√£o s√≥lida',
        '[componente 2]': 'estrutura bem planejada',
        '[componente 3]': 'acabamento profissional',
        '[pergunta provocativa]': 'Como voc√™ resolveria este problema no seu projeto?',
        '[contexto real]': 'desenvolvimento de aplica√ß√µes web',
        '[profissional]': 'desenvolvedor web',
        '[T√ìPICO PRINCIPAL]': 'Desenvolvimento Web',
        '[Subt√≠tulo com analogia]': 'Construindo a Base da Web',
        '[Diagrama ou c√≥digo exemplo]': '```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Minha P√°gina</title>\n</head>\n<body>\n    <h1>Ol√° Mundo!</h1>\n</body>\n</html>```',
        '[Explica√ß√£o simples usando analogia do mundo real]': 'Assim como uma casa precisa de uma base s√≥lida, uma p√°gina web precisa de HTML bem estruturado',
        '[Passo 1]': 'Planejar a estrutura da p√°gina',
        '[Passo 2]': 'Criar o HTML sem√¢ntico',
        '[Passo 3]': 'Adicionar estilos com CSS',
        '[Passo 4]': 'Implementar interatividade com JavaScript',
        '[Passo 5]': 'Testar e otimizar',
        '[Pergunta para reflex√£o que conecta conceito com aplica√ß√£o pr√°tica]': 'Como voc√™ pode aplicar esses conceitos no seu pr√≥ximo projeto?',
        '[Nome da tecnologia]': 'HTML5',
        '[Analogia clara]': 'Linguagem de marca√ß√£o',
        '[Defini√ß√£o simples e direta]': 'HTML √© a linguagem padr√£o para criar p√°ginas web',
        '[Compara√ß√£o com algo do mundo real]': '√â como o esqueleto de uma p√°gina web',
        '[linguagem]': 'html',
        '[exemplo de c√≥digo comentado]': '<!-- Cabe√ßalho da p√°gina -->\n<h1>T√≠tulo Principal</h1>\n<!-- Par√°grafo de conte√∫do -->\n<p>Este √© um par√°grafo de exemplo.</p>',
        '[Dica clara e espec√≠fica]': 'Use tags sem√¢nticas como <header>, <nav>, <main> e <footer>',
        '[Tecnologia 1]': 'HTML5 Sem√¢ntico',
        '[Tecnologia 2]': 'CSS Grid e Flexbox',
        '[Tecnologia 3]': 'JavaScript ES6+',
        '[Tecnologia 4]': 'Web APIs modernas',
        '[Aplica√ß√£o pr√°tica]': 'Cria√ß√£o de layouts responsivos',
        '[Conceito principal]': 'Estrutura sem√¢ntica HTML',
        '[Resultado esperado]': 'P√°ginas web bem estruturadas e acess√≠veis',
        '[Habilidade espec√≠fica]': 'Desenvolver HTML sem√¢ntico e acess√≠vel',
        '[Projeto pr√°tico]': 'Portfolio pessoal responsivo',
        '[Base para pr√≥ximos m√≥dulos]': 'Fundamentos s√≥lidos de HTML'
    }
    
    print(f'üéØ Iniciando substitui√ß√£o de {len(replacements)} tipos de placeholders...')
    
    for course_path in base_path.iterdir():
        if course_path.is_dir() and not course_path.name.startswith('.'):
            course_name = course_path.name
            print(f'üîÑ Processando curso: {course_name}')
            
            for file_path in course_path.rglob('*.md'):
                if file_path.is_file():
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        original_content = content
                        file_replacements = 0
                        
                        for placeholder, replacement in replacements.items():
                            if placeholder in content:
                                count = content.count(placeholder)
                                content = content.replace(placeholder, replacement)
                                file_replacements += count
                        
                        if content != original_content:
                            with open(file_path, 'w', encoding='utf-8') as f:
                                f.write(content)
                            total_replacements += file_replacements
                            files_processed += 1
                            print(f'  ‚úÖ {file_path.name}: {file_replacements} substitui√ß√µes')
                        
                    except Exception as e:
                        print(f'  ‚ùå Erro em {file_path.name}: {e}')
    
    print(f'\nüéâ CONCLU√çDO!')
    print(f'üìä Arquivos processados: {files_processed}')
    print(f'üìä Total de substitui√ß√µes: {total_replacements}')
    
    return total_replacements

if __name__ == '__main__':
    start_time = datetime.now()
    total = replace_all_placeholders()
    end_time = datetime.now()
    print(f'‚è±Ô∏è Tempo total: {end_time - start_time}')







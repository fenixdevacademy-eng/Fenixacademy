#!/usr/bin/env python3
"""
Script para refazer o conte√∫do do curso Web Fundamentals em partes
Substitui o conte√∫do incorreto pelo conte√∫do correto e estruturado
"""

import os
import re
from pathlib import Path

class WebFundamentalsRefactor:
    def __init__(self):
        self.base_path = Path("backend/fenix-expanded-content/web-fundamentals/avancado")
        self.target_file = self.base_path / "aula-01-modulo-01-web-fundamentals.md"
        self.backup_file = self.base_path / "aula-01-modulo-01-web-fundamentals.md.backup"
        
    def create_backup(self):
        """Cria backup do arquivo original"""
        if self.target_file.exists():
            self.target_file.rename(self.backup_file)
            print(f"‚úÖ Backup criado: {self.backup_file}")
    
    def part1_introduction_and_history(self):
        """Parte 1: Introdu√ß√£o e Hist√≥ria da Web"""
        content = """# üéì **Web Fundamentals - N√≠vel Avan√ßado**
## üìö **Aula 01 - M√≥dulo 01: Introdu√ß√£o ao Desenvolvimento Web Moderno**
### üéØ **Objetivos de Aprendizado**
- ‚úÖ Compreender a evolu√ß√£o hist√≥rica da web e suas tecnologias
- ‚úÖ Dominar os conceitos fundamentais da arquitetura web moderna
- ‚úÖ Configurar ambiente de desenvolvimento profissional
- ‚úÖ Aplicar melhores pr√°ticas da ind√∫stria em projetos reais
- ‚úÖ Desenvolver habilidades pr√°ticas de programa√ß√£o web
**Dura√ß√£o Estimada:** 60 minutos  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento b√°sico de computa√ß√£o
---
## üåü **INTRODU√á√ÉO AO T√ìPICO**
### üé¨ **Hook Visual e Contexto**
### üìã **Agenda da Aula**
1. **Hist√≥ria e Evolu√ß√£o da Web** ‚Üí Fundamentos te√≥ricos ‚Üí Casos pr√°ticos
2. **Arquitetura Web Moderna** ‚Üí Componentes essenciais ‚Üí Implementa√ß√£o
3. **Ambiente de Desenvolvimento** ‚Üí Setup profissional ‚Üí Primeiro projeto
---
## üèóÔ∏è **DESENVOLVIMENTO DOS CONCEITOS**
### 1Ô∏è‚É£ **Hist√≥ria e Evolu√ß√£o da Web**
#### **1.1 A Revolu√ß√£o da Web 1.0 √† 4.0**
A World Wide Web nasceu em 1989 quando Tim Berners-Lee, um cientista do CERN, prop√¥s um sistema de hipertexto para compartilhar informa√ß√µes entre pesquisadores. Esta inven√ß√£o revolucion√°ria transformou completamente a forma como nos comunicamos, trabalhamos e vivemos.

**Web 1.0 (1989-2004): A Era da Informa√ß√£o Est√°tica**
A primeira gera√ß√£o da web caracterizou-se por p√°ginas est√°ticas, onde os usu√°rios eram meros consumidores de conte√∫do. Sites como Yahoo!, Altavista e os primeiros portais corporativos dominavam o cen√°rio. A intera√ß√£o era limitada e o conte√∫do era controlado por poucos.

**Web 2.0 (2004-2016): A Revolu√ß√£o da Intera√ß√£o**
A segunda gera√ß√£o trouxe uma mudan√ßa paradigm√°tica, transformando usu√°rios de consumidores em produtores de conte√∫do. Redes sociais como Facebook, YouTube e Twitter emergiram, permitindo que pessoas comuns criassem, compartilhassem e colaborassem em conte√∫do digital. A web tornou-se uma plataforma de duas vias, onde a intera√ß√£o e a colabora√ß√£o eram fundamentais.

**Web 3.0 (2016-2022): A Era da Intelig√™ncia Sem√¢ntica**
A terceira gera√ß√£o introduziu conceitos de intelig√™ncia artificial, machine learning e dados sem√¢nticos. A web tornou-se mais inteligente, capaz de entender o contexto e fornecer respostas personalizadas. Empresas como Google, Amazon e Netflix utilizavam algoritmos avan√ßados para oferecer experi√™ncias personalizadas aos usu√°rios.

**Web 4.0 (2022-Presente): A Revolu√ß√£o da Web Imersiva**
A quarta gera√ß√£o representa a converg√™ncia entre realidade virtual, intelig√™ncia artificial e internet das coisas. A web torna-se imersiva, permitindo experi√™ncias tridimensionais e intera√ß√µes com o mundo f√≠sico atrav√©s de dispositivos conectados. Metaverso, realidade aumentada e computa√ß√£o qu√¢ntica s√£o as tecnologias que definem esta nova era.

#### **1.2 Impacto no Mercado Brasileiro**
**Nubank: Revolucionando o Setor Banc√°rio**
O Nubank, fundado em 2013, transformou completamente o setor banc√°rio brasileiro atrav√©s de uma plataforma web moderna. Utilizando tecnologias como React, Node.js e microservi√ßos, a empresa criou uma experi√™ncia digital que rivaliza com os maiores bancos tradicionais, provando que a arquitetura web moderna pode democratizar servi√ßos financeiros.

**iFood: Dominando o Mercado de Delivery**
O iFood, l√≠der em delivery no Brasil, demonstra como uma arquitetura web escal√°vel pode suportar milh√µes de transa√ß√µes simult√¢neas. Sua plataforma utiliza tecnologias como Kubernetes, Docker e APIs RESTful para garantir disponibilidade e performance, servindo como exemplo de como a web moderna pode transformar ind√∫strias tradicionais.

**Mercado Livre: E-commerce de Sucesso**
O Mercado Livre, fundado na Argentina mas com forte presen√ßa no Brasil, demonstrou como uma plataforma web bem arquitetada pode dominar o mercado de e-commerce. A empresa utiliza tecnologias como Python, Java e sistemas de recomenda√ß√£o baseados em IA para oferecer uma experi√™ncia personalizada aos usu√°rios.

### 2Ô∏è‚É£ **Arquitetura Web Moderna**
#### **2.1 Componentes Fundamentais**
**Frontend: A Interface do Usu√°rio**
O frontend √© respons√°vel por toda a experi√™ncia visual e interativa que o usu√°rio v√™ e toca. Tecnologias modernas como React, Vue.js e Angular permitem criar interfaces ricas e responsivas, enquanto ferramentas como Webpack e Vite otimizam o desempenho e a experi√™ncia de desenvolvimento.

**Backend: A L√≥gica de Neg√≥cio**
O backend processa as requisi√ß√µes, executa a l√≥gica de neg√≥cio e gerencia os dados. Arquiteturas modernas utilizam microservi√ßos, APIs RESTful e GraphQL para criar sistemas escal√°veis e manuten√≠veis. Tecnologias como Node.js, Python (Django/Flask) e Java (Spring) s√£o amplamente utilizadas.

**Banco de Dados: A Persist√™ncia de Dados**
Os bancos de dados modernos v√£o al√©m do SQL tradicional, incluindo NoSQL (MongoDB, Cassandra), bancos de tempo real (Firebase) e solu√ß√µes h√≠bridas. A escolha da tecnologia de persist√™ncia impacta diretamente na performance e escalabilidade da aplica√ß√£o.

**Infraestrutura: A Base de Suporte**
A infraestrutura moderna √© baseada em cloud computing, containers (Docker) e orquestra√ß√£o (Kubernetes). Servi√ßos como AWS, Google Cloud e Azure oferecem solu√ß√µes escal√°veis e confi√°veis para hospedar aplica√ß√µes web modernas.

#### **2.2 Padr√µes de Design Modernos**
**Arquitetura de Microservi√ßos**
A arquitetura de microservi√ßos divide a aplica√ß√£o em servi√ßos independentes e desacoplados, cada um respons√°vel por uma funcionalidade espec√≠fica. Esta abordagem facilita a manuten√ß√£o, escalabilidade e deploy independente de cada componente.

**API-First Design**
O design API-first coloca a API como elemento central do desenvolvimento, permitindo que diferentes frontends (web, mobile, desktop) consumam os mesmos servi√ßos. APIs RESTful e GraphQL s√£o padr√µes modernos que facilitam a integra√ß√£o e o desenvolvimento de aplica√ß√µes distribu√≠das.

**Event-Driven Architecture**
A arquitetura orientada a eventos permite que diferentes componentes da aplica√ß√£o se comuniquem de forma ass√≠ncrona atrav√©s de eventos. Esta abordagem √© ideal para sistemas que precisam processar grandes volumes de dados em tempo real.

### 3Ô∏è‚É£ **Ambiente de Desenvolvimento Profissional**
#### **3.1 Ferramentas Essenciais**
**Editores de C√≥digo e IDEs**
Ferramentas modernas como Visual Studio Code, WebStorm e Sublime Text oferecem recursos avan√ßados como IntelliSense, debugging integrado e extens√µes que aceleram o desenvolvimento. A escolha da ferramenta adequada pode aumentar significativamente a produtividade.

**Controle de Vers√£o com Git**
Git √© essencial para o desenvolvimento colaborativo moderno. Plataformas como GitHub, GitLab e Bitbucket facilitam o gerenciamento de reposit√≥rios, code review e integra√ß√£o cont√≠nua.

**Gerenciadores de Pacotes**
NPM (Node.js), Yarn, Composer (PHP) e pip (Python) s√£o ferramentas essenciais para gerenciar depend√™ncias e automatizar tarefas de build. O uso correto dessas ferramentas garante a reprodutibilidade e manutenibilidade dos projetos.

**Ferramentas de Build e Bundling**
Webpack, Vite, Parcel e Rollup s√£o ferramentas modernas que otimizam o c√≥digo, minificam assets e criam builds de produ√ß√£o otimizados. A configura√ß√£o adequada dessas ferramentas √© crucial para a performance da aplica√ß√£o.

---
"""
        return content

    def part2_javascript_advanced(self):
        """Parte 2: M√≥dulo JavaScript Avan√ßado"""
        content = """
## üìö **M√ìDULO 1: JavaScript Avan√ßado (ES6+)**
### üéØ **Objetivos de Aprendizado**
- ‚úÖ Dominar recursos modernos do JavaScript (ES6+)
- ‚úÖ Implementar programa√ß√£o funcional e orientada a objetos
- ‚úÖ Gerenciar assincronia com Promises e async/await
- ‚úÖ Aplicar padr√µes de design em JavaScript
- ‚úÖ Otimizar performance e debugging

### üèóÔ∏è **Conceitos Fundamentais**
#### **1.1 ES6+ Features Essenciais**
**Arrow Functions e Lexical Scoping**
```javascript
// Arrow functions com lexical scoping
const calculateTotal = (items) => {
    return items.reduce((total, item) => total + item.price, 0);
};

// Compara√ß√£o com function tradicional
function calculateTotalTraditional(items) {
    return items.reduce(function(total, item) {
        return total + item.price;
    }, 0);
}
```

**Destructuring e Spread Operator**
```javascript
// Destructuring de objetos
const { name, age, email } = user;
const [first, second, ...rest] = numbers;

// Spread operator para arrays e objetos
const newArray = [...oldArray, newItem];
const newObject = { ...oldObject, newProperty: value };
```

**Template Literals e Tagged Templates**
```javascript
// Template literals
const message = `Ol√° ${name}, voc√™ tem ${age} anos!`;

// Tagged templates para processamento customizado
const html = highlight`C√≥digo: ${code} com ${language}`;
```

#### **1.2 Programa√ß√£o Ass√≠ncrona Moderna**
**Promises e Async/Await**
```javascript
// Usando Promises
const fetchUserData = (userId) => {
    return fetch(`/api/users/${userId}`)
        .then(response => response.json())
        .then(data => data.user)
        .catch(error => console.error('Erro:', error));
};

// Usando async/await
const fetchUserDataAsync = async (userId) => {
    try {
        const response = await fetch(`/api/users/${userId}`);
        const data = await response.json();
        return data.user;
    } catch (error) {
        console.error('Erro:', error);
        throw error;
    }
};
```

**Promise.all e Promise.race**
```javascript
// Executar m√∫ltiplas promises em paralelo
const fetchMultipleUsers = async (userIds) => {
    const promises = userIds.map(id => fetchUserData(id));
    return Promise.all(promises);
};

// Primeira promise que resolver
const fetchFastestData = async (urls) => {
    const promises = urls.map(url => fetch(url));
    return Promise.race(promises);
};
```

#### **1.3 Classes e Heran√ßa**
```javascript
// Classes ES6
class User {
    constructor(name, email) {
        this.name = name;
        this.email = email;
        this.createdAt = new Date();
    }
    
    // Getters e setters
    get displayName() {
        return `${this.name} (${this.email})`;
    }
    
    set displayName(value) {
        const [name, email] = value.split(' (');
        this.name = name;
        this.email = email.replace(')', '');
    }
    
    // M√©todos
    greet() {
        return `Ol√°, eu sou ${this.name}!`;
    }
    
    // M√©todo est√°tico
    static createAdmin(name, email) {
        const admin = new User(name, email);
        admin.isAdmin = true;
        return admin;
    }
}

// Heran√ßa
class AdminUser extends User {
    constructor(name, email, permissions) {
        super(name, email);
        this.permissions = permissions;
        this.isAdmin = true;
    }
    
    // Sobrescrever m√©todo
    greet() {
        return `Ol√°, eu sou ${this.name}, administrador do sistema!`;
    }
    
    // Novo m√©todo
    grantPermission(user, permission) {
        if (this.permissions.includes('grant_permissions')) {
            user.permissions = user.permissions || [];
            user.permissions.push(permission);
            return true;
        }
        return false;
    }
}
```

### üõ†Ô∏è **Implementa√ß√£o Pr√°tica**
#### **Projeto: Sistema de Gerenciamento de Tarefas**
```javascript
// taskManager.js
class TaskManager {
    constructor() {
        this.tasks = [];
        this.categories = new Set();
    }
    
    // Adicionar tarefa
    addTask(title, description, category = 'geral', priority = 'm√©dia') {
        const task = {
            id: Date.now(),
            title,
            description,
            category,
            priority,
            completed: false,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        
        this.tasks.push(task);
        this.categories.add(category);
        return task;
    }
    
    // Filtrar tarefas
    getTasksByCategory(category) {
        return this.tasks.filter(task => task.category === category);
    }
    
    // Marcar como conclu√≠da
    completeTask(taskId) {
        const task = this.tasks.find(t => t.id === taskId);
        if (task) {
            task.completed = true;
            task.updatedAt = new Date();
            return true;
        }
        return false;
    }
    
    // Estat√≠sticas
    getStats() {
        const total = this.tasks.length;
        const completed = this.tasks.filter(t => t.completed).length;
        const pending = total - completed;
        
        return {
            total,
            completed,
            pending,
            completionRate: total > 0 ? (completed / total) * 100 : 0
        };
    }
}

// Uso do TaskManager
const manager = new TaskManager();
manager.addTask('Estudar JavaScript', 'Revisar conceitos de ES6+', 'estudos', 'alta');
manager.addTask('Fazer exerc√≠cios', 'Praticar com projetos reais', 'estudos', 'm√©dia');
```

### üéØ **Exerc√≠cios Pr√°ticos**
1. **B√°sico**: Implemente uma calculadora usando arrow functions
2. **Intermedi√°rio**: Crie um sistema de cache com Promises
3. **Avan√ßado**: Desenvolva um gerenciador de estado simples

### üìù **Projeto Final**
Desenvolva uma aplica√ß√£o de blog com:
- Sistema de posts e coment√°rios
- Autentica√ß√£o de usu√°rios
- Busca e filtros
- Interface responsiva

---
"""
        return content

    def part3_react_components(self):
        """Parte 3: M√≥dulo React.js e Componentes"""
        content = """
## ‚öõÔ∏è **M√ìDULO 2: React.js e Componentes**
### üéØ **Objetivos de Aprendizado**
- ‚úÖ Dominar conceitos fundamentais do React
- ‚úÖ Criar componentes reutiliz√°veis e perform√°ticos
- ‚úÖ Gerenciar estado com hooks e context
- ‚úÖ Implementar roteamento e navega√ß√£o
- ‚úÖ Aplicar padr√µes de design em React

### üèóÔ∏è **Conceitos Fundamentais**
#### **2.1 Componentes Funcionais e Hooks**
```jsx
// Componente funcional b√°sico
import React, { useState, useEffect } from 'react';

const UserProfile = ({ userId }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        const fetchUser = async () => {
            try {
                setLoading(true);
                const response = await fetch(`/api/users/${userId}`);
                if (!response.ok) throw new Error('Usu√°rio n√£o encontrado');
                const userData = await response.json();
                setUser(userData);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        
        if (userId) {
            fetchUser();
        }
    }, [userId]);
    
    if (loading) return <div>Carregando...</div>;
    if (error) return <div>Erro: {error}</div>;
    if (!user) return <div>Usu√°rio n√£o encontrado</div>;
    
    return (
        <div className="user-profile">
            <h2>{user.name}</h2>
            <p>{user.email}</p>
            <img src={user.avatar} alt={user.name} />
        </div>
    );
};

export default UserProfile;
```

#### **2.2 Custom Hooks**
```jsx
// Custom hook para gerenciar formul√°rios
import { useState, useCallback } from 'react';

const useForm = (initialValues, validationRules = {}) => {
    const [values, setValues] = useState(initialValues);
    const [errors, setErrors] = useState({});
    const [touched, setTouched] = useState({});
    
    const handleChange = useCallback((name, value) => {
        setValues(prev => ({ ...prev, [name]: value }));
        
        // Valida√ß√£o em tempo real
        if (validationRules[name]) {
            const error = validationRules[name](value);
            setErrors(prev => ({ ...prev, [name]: error }));
        }
    }, [validationRules]);
    
    const handleBlur = useCallback((name) => {
        setTouched(prev => ({ ...prev, [name]: true }));
    }, []);
    
    const handleSubmit = useCallback((onSubmit) => {
        return (e) => {
            e.preventDefault();
            
            // Validar todos os campos
            const newErrors = {};
            Object.keys(validationRules).forEach(field => {
                const error = validationRules[field](values[field]);
                if (error) newErrors[field] = error;
            });
            
            setErrors(newErrors);
            setTouched(Object.keys(validationRules).reduce((acc, key) => ({ ...acc, [key]: true }), {}));
            
            if (Object.keys(newErrors).length === 0) {
                onSubmit(values);
            }
        };
    }, [values, validationRules]);
    
    return {
        values,
        errors,
        touched,
        handleChange,
        handleBlur,
        handleSubmit
    };
};

// Uso do custom hook
const LoginForm = () => {
    const validationRules = {
        email: (value) => {
            if (!value) return 'Email √© obrigat√≥rio';
            if (!/\S+@\S+\.\S+/.test(value)) return 'Email inv√°lido';
            return null;
        },
        password: (value) => {
            if (!value) return 'Senha √© obrigat√≥ria';
            if (value.length < 6) return 'Senha deve ter pelo menos 6 caracteres';
            return null;
        }
    };
    
    const { values, errors, touched, handleChange, handleBlur, handleSubmit } = useForm(
        { email: '', password: '' },
        validationRules
    );
    
    const onSubmit = (formValues) => {
        console.log('Dados do formul√°rio:', formValues);
        // L√≥gica de login
    };
    
    return (
        <form onSubmit={handleSubmit(onSubmit)}>
            <div>
                <input
                    type="email"
                    name="email"
                    value={values.email}
                    onChange={(e) => handleChange('email', e.target.value)}
                    onBlur={() => handleBlur('email')}
                    placeholder="Email"
                />
                {touched.email && errors.email && <span>{errors.email}</span>}
            </div>
            
            <div>
                <input
                    type="password"
                    name="password"
                    value={values.password}
                    onChange={(e) => handleChange('password', e.target.value)}
                    onBlur={() => handleBlur('password')}
                    placeholder="Senha"
                />
                {touched.password && errors.password && <span>{errors.password}</span>}
            </div>
            
            <button type="submit">Entrar</button>
        </form>
    );
};
```

#### **2.3 Context API e Gerenciamento de Estado**
```jsx
// Context para autentica√ß√£o
import React, { createContext, useContext, useReducer } from 'react';

const AuthContext = createContext();

const authReducer = (state, action) => {
    switch (action.type) {
        case 'LOGIN_SUCCESS':
            return {
                ...state,
                user: action.payload,
                isAuthenticated: true,
                loading: false
            };
        case 'LOGIN_FAILURE':
            return {
                ...state,
                user: null,
                isAuthenticated: false,
                error: action.payload,
                loading: false
            };
        case 'LOGOUT':
            return {
                ...state,
                user: null,
                isAuthenticated: false,
                error: null,
                loading: false
            };
        case 'SET_LOADING':
            return {
                ...state,
                loading: action.payload
            };
        default:
            return state;
    }
};

const AuthProvider = ({ children }) => {
    const [state, dispatch] = useReducer(authReducer, {
        user: null,
        isAuthenticated: false,
        loading: false,
        error: null
    });
    
    const login = async (email, password) => {
        dispatch({ type: 'SET_LOADING', payload: true });
        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });
            
            if (!response.ok) throw new Error('Credenciais inv√°lidas');
            
            const user = await response.json();
            dispatch({ type: 'LOGIN_SUCCESS', payload: user });
        } catch (error) {
            dispatch({ type: 'LOGIN_FAILURE', payload: error.message });
        }
    };
    
    const logout = () => {
        dispatch({ type: 'LOGOUT' });
    };
    
    return (
        <AuthContext.Provider value={{ ...state, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth deve ser usado dentro de AuthProvider');
    }
    return context;
};

export { AuthProvider, useAuth };
```

### üõ†Ô∏è **Implementa√ß√£o Pr√°tica**
#### **Projeto: Dashboard de E-commerce**
```jsx
// components/ProductCard.jsx
import React, { useState } from 'react';
import { useCart } from '../hooks/useCart';

const ProductCard = ({ product }) => {
    const [isFavorite, setIsFavorite] = useState(false);
    const { addToCart, isInCart } = useCart();
    
    const handleAddToCart = () => {
        addToCart(product);
    };
    
    const toggleFavorite = () => {
        setIsFavorite(!isFavorite);
    };
    
    return (
        <div className="product-card">
            <div className="product-image">
                <img src={product.image} alt={product.name} />
                <button 
                    className={`favorite-btn ${isFavorite ? 'active' : ''}`}
                    onClick={toggleFavorite}
                >
                    ‚ù§Ô∏è
                </button>
            </div>
            
            <div className="product-info">
                <h3>{product.name}</h3>
                <p className="price">R$ {product.price.toFixed(2)}</p>
                <p className="description">{product.description}</p>
                
                <div className="product-actions">
                    <button 
                        className={`add-to-cart ${isInCart(product.id) ? 'in-cart' : ''}`}
                        onClick={handleAddToCart}
                    >
                        {isInCart(product.id) ? 'No Carrinho' : 'Adicionar ao Carrinho'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ProductCard;
```

### üéØ **Exerc√≠cios Pr√°ticos**
1. **B√°sico**: Crie um componente de contador com useState
2. **Intermedi√°rio**: Implemente um sistema de busca com debounce
3. **Avan√ßado**: Desenvolva um chat em tempo real

### üìù **Projeto Final**
Desenvolva uma aplica√ß√£o de gerenciamento de projetos com:
- Lista de projetos e tarefas
- Sistema de drag-and-drop
- Filtros e busca avan√ßada
- Notifica√ß√µes em tempo real

---
"""
        return content

    def refactor_file(self, part_number):
        """Refatora o arquivo em partes"""
        print(f"üîÑ Iniciando refatora√ß√£o da Parte {part_number}...")
        
        # Criar backup se necess√°rio
        if not self.backup_file.exists():
            self.create_backup()
        
        # Ler conte√∫do atual
        if self.target_file.exists():
            with open(self.target_file, 'r', encoding='utf-8') as f:
                current_content = f.read()
        else:
            current_content = ""
        
        # Gerar novo conte√∫do baseado na parte
        if part_number == 1:
            new_content = self.part1_introduction_and_history()
        elif part_number == 2:
            new_content = self.part2_javascript_advanced()
        elif part_number == 3:
            new_content = self.part3_react_components()
        else:
            print(f"‚ùå Parte {part_number} n√£o implementada ainda")
            return False
        
        # Escrever novo conte√∫do
        with open(self.target_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ Parte {part_number} refatorada com sucesso!")
        return True

    def run_all_parts(self):
        """Executa todas as partes de refatora√ß√£o"""
        print("üöÄ Iniciando refatora√ß√£o completa do Web Fundamentals...")
        
        parts = [
            ("Introdu√ß√£o e Hist√≥ria da Web", 1),
            ("JavaScript Avan√ßado", 2),
            ("React.js e Componentes", 3),
            # Adicionar mais partes conforme necess√°rio
        ]
        
        for part_name, part_number in parts:
            print(f"\nüìö Refatorando: {part_name}")
            success = self.refactor_file(part_number)
            if not success:
                print(f"‚ùå Falha na refatora√ß√£o da parte {part_number}")
                return False
        
        print("\nüéâ Refatora√ß√£o completa finalizada!")
        return True

def main():
    """Fun√ß√£o principal"""
    refactor = WebFundamentalsRefactor()
    
    print("üéì Web Fundamentals Refactor")
    print("=" * 40)
    print("1. Refatorar Parte 1: Introdu√ß√£o e Hist√≥ria")
    print("2. Refatorar Parte 2: JavaScript Avan√ßado")
    print("3. Refatorar Parte 3: React.js e Componentes")
    print("4. Refatorar Todas as Partes")
    print("5. Sair")
    
    choice = input("\nEscolha uma op√ß√£o (1-5): ").strip()
    
    if choice == "1":
        refactor.refactor_file(1)
    elif choice == "2":
        refactor.refactor_file(2)
    elif choice == "3":
        refactor.refactor_file(3)
    elif choice == "4":
        refactor.run_all_parts()
    elif choice == "5":
        print("üëã At√© logo!")
    else:
        print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()







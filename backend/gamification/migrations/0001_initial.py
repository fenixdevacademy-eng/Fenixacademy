# Generated by Django 5.2.4 on 2025-07-28 23:08

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_number', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=100)),
                ('experience_required', models.IntegerField(help_text='Experience points required for this level')),
                ('points_reward', models.IntegerField(default=0, help_text='Points awarded when reaching this level')),
                ('badge_reward', models.CharField(blank=True, max_length=50)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'level',
                'verbose_name_plural': 'levels',
                'db_table': 'levels',
                'ordering': ['level_number'],
            },
        ),
        migrations.CreateModel(
            name='Streak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('streak_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', max_length=20)),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('milestone_7_days', models.BooleanField(default=False)),
                ('milestone_30_days', models.BooleanField(default=False)),
                ('milestone_100_days', models.BooleanField(default=False)),
                ('milestone_365_days', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'streak',
                'verbose_name_plural': 'streaks',
                'db_table': 'streaks',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.IntegerField(default=0, help_text='Current progress towards achievement')),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('earned_count', models.IntegerField(default=1, help_text='Number of times earned')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'user achievement',
                'verbose_name_plural': 'user achievements',
                'db_table': 'user_achievements',
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('joined', 'Joined'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='joined', max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('points_earned', models.IntegerField(default=0)),
                ('badge_earned', models.CharField(blank=True, max_length=50)),
                ('certificate_earned', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'user challenge',
                'verbose_name_plural': 'user challenges',
                'db_table': 'user_challenges',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=100)),
                ('description', models.TextField()),
                ('description_pt', models.TextField(blank=True, help_text='Portuguese description')),
                ('achievement_type', models.CharField(choices=[('course_completion', 'Course Completion'), ('lesson_streak', 'Lesson Streak'), ('exercise_mastery', 'Exercise Mastery'), ('certificate_earned', 'Certificate Earned'), ('social_sharing', 'Social Sharing'), ('community_help', 'Community Help'), ('perfect_score', 'Perfect Score'), ('speed_learner', 'Speed Learner'), ('night_owl', 'Night Owl'), ('early_bird', 'Early Bird'), ('weekend_warrior', 'Weekend Warrior'), ('first_course', 'First Course'), ('tenth_course', 'Tenth Course'), ('hundredth_lesson', 'Hundredth Lesson'), ('thousandth_exercise', 'Thousandth Exercise'), ('referral_master', 'Referral Master'), ('review_writer', 'Review Writer'), ('helpful_commenter', 'Helpful Commenter'), ('profile_complete', 'Profile Complete'), ('avatar_upload', 'Avatar Upload')], max_length=50)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='easy', max_length=20)),
                ('points', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('requirements', models.JSONField(default=dict, help_text='Achievement requirements')),
                ('requirement_count', models.IntegerField(default=1, help_text='Number of times requirement must be met')),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('badge_image', models.ImageField(blank=True, null=True, upload_to='achievements/badges/')),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until unlocked')),
                ('is_repeatable', models.BooleanField(default=False, help_text='Can be earned multiple times')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'achievement',
                'verbose_name_plural': 'achievements',
                'db_table': 'achievements',
                'indexes': [models.Index(fields=['achievement_type'], name='achievement_achieve_813271_idx'), models.Index(fields=['difficulty'], name='achievement_difficu_736070_idx'), models.Index(fields=['is_active'], name='achievement_is_acti_3a5fbf_idx')],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=100)),
                ('description', models.TextField()),
                ('description_pt', models.TextField(blank=True, help_text='Portuguese description')),
                ('challenge_type', models.CharField(choices=[('course_completion', 'Course Completion'), ('lesson_streak', 'Lesson Streak'), ('exercise_mastery', 'Exercise Mastery'), ('social_engagement', 'Social Engagement'), ('referral', 'Referral'), ('review', 'Review'), ('profile_completion', 'Profile Completion')], max_length=50)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('expired', 'Expired')], default='draft', max_length=20)),
                ('requirements', models.JSONField(default=dict, help_text='Challenge requirements')),
                ('target_value', models.IntegerField(default=1, help_text='Target value to complete challenge')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_recurring', models.BooleanField(default=False, help_text='Recurring challenge')),
                ('recurrence_pattern', models.CharField(blank=True, help_text='Cron-like pattern for recurrence', max_length=50)),
                ('points_reward', models.IntegerField(default=0)),
                ('badge_reward', models.CharField(blank=True, max_length=50)),
                ('certificate_reward', models.BooleanField(default=False)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='challenges/banners/')),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('is_featured', models.BooleanField(default=False)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'challenge',
                'verbose_name_plural': 'challenges',
                'db_table': 'challenges',
                'indexes': [models.Index(fields=['challenge_type'], name='challenges_challen_b892f4_idx'), models.Index(fields=['status'], name='challenges_status_2f15cd_idx'), models.Index(fields=['start_date', 'end_date'], name='challenges_start_d_5caac7_idx'), models.Index(fields=['is_featured'], name='challenges_is_feat_ac0f57_idx')],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('leaderboard_type', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('all_time', 'All Time'), ('course', 'Course'), ('achievement', 'Achievement'), ('streak', 'Streak')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('max_entries', models.IntegerField(default=100)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('rules', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'leaderboard',
                'verbose_name_plural': 'leaderboards',
                'db_table': 'leaderboards',
                'indexes': [models.Index(fields=['leaderboard_type'], name='leaderboard_leaderb_9c561e_idx'), models.Index(fields=['is_active'], name='leaderboard_is_acti_883b27_idx'), models.Index(fields=['start_date', 'end_date'], name='leaderboard_start_d_b4af9f_idx')],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard')),
            ],
            options={
                'verbose_name': 'leaderboard entry',
                'verbose_name_plural': 'leaderboard entries',
                'db_table': 'leaderboard_entries',
                'ordering': ['-score', 'created_at'],
            },
        ),
    ]

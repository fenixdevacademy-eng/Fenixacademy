# Generated by Django 5.2.4 on 2025-07-28 23:08

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIRecommendationEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('engine_type', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('hybrid', 'Hybrid'), ('deep_learning', 'Deep Learning'), ('reinforcement', 'Reinforcement Learning')], max_length=20)),
                ('parameters', models.JSONField(default=dict, help_text='Engine parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('precision_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('recall_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('description', models.TextField(blank=True)),
                ('version', models.CharField(default='1.0.0', max_length=20)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI recommendation engine',
                'verbose_name_plural': 'AI recommendation engines',
                'db_table': 'ai_recommendation_engines',
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('name_pt', models.CharField(blank=True, help_text='Portuguese name', max_length=200)),
                ('description', models.TextField()),
                ('description_pt', models.TextField(blank=True, help_text='Portuguese description')),
                ('path_type', models.CharField(choices=[('career', 'Career Path'), ('skill', 'Skill Path'), ('project', 'Project Path'), ('certification', 'Certification Path'), ('custom', 'Custom Path')], max_length=20)),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('estimated_duration', models.IntegerField(help_text='Estimated duration in hours')),
                ('prerequisites', models.JSONField(default=list, help_text='Prerequisites for this path')),
                ('outcomes', models.JSONField(default=list, help_text='Learning outcomes')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='learning_paths/banners/')),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'learning path',
                'verbose_name_plural': 'learning paths',
                'db_table': 'learning_paths',
            },
        ),
        migrations.CreateModel(
            name='SkillGap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=100)),
                ('skill_category', models.CharField(max_length=50)),
                ('current_level', models.CharField(default='beginner', max_length=20)),
                ('target_level', models.CharField(default='intermediate', max_length=20)),
                ('gap_score', models.DecimalField(decimal_places=2, help_text='Gap severity (0-1)', max_digits=3)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('recommended_resources', models.JSONField(blank=True, default=list)),
                ('identified_at', models.DateTimeField(auto_now_add=True)),
                ('last_assessed', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'skill gap',
                'verbose_name_plural': 'skill gaps',
                'db_table': 'skill_gaps',
            },
        ),
        migrations.CreateModel(
            name='UserBehavior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('behavior_type', models.CharField(choices=[('view', 'View'), ('click', 'Click'), ('enroll', 'Enroll'), ('complete', 'Complete'), ('rate', 'Rate'), ('review', 'Review'), ('share', 'Share'), ('bookmark', 'Bookmark'), ('search', 'Search'), ('pause', 'Pause'), ('resume', 'Resume'), ('skip', 'Skip'), ('replay', 'Replay')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('duration', models.IntegerField(blank=True, help_text='Duration in seconds', null=True)),
                ('progress', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('device_type', models.CharField(blank=True, max_length=20)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'user behavior',
                'verbose_name_plural': 'user behaviors',
                'db_table': 'user_behaviors',
            },
        ),
        migrations.CreateModel(
            name='UserLearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused')], default='not_started', max_length=20)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('goals', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'user learning path',
                'verbose_name_plural': 'user learning paths',
                'db_table': 'user_learning_paths',
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_topics', models.JSONField(default=list, help_text='List of preferred topics')),
                ('preferred_difficulty', models.CharField(default='beginner', max_length=20)),
                ('preferred_duration', models.IntegerField(default=30, help_text='Preferred lesson duration in minutes')),
                ('preferred_format', models.JSONField(default=list, help_text='Preferred content formats')),
                ('preferred_study_time', models.TimeField(blank=True, null=True)),
                ('preferred_study_days', models.JSONField(default=list, help_text='Preferred days of week')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('learning_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditory'), ('kinesthetic', 'Kinesthetic'), ('reading', 'Reading/Writing')], default='visual', max_length=20)),
                ('career_goals', models.JSONField(default=list, help_text='Career goals')),
                ('skill_gaps', models.JSONField(default=list, help_text='Identified skill gaps')),
                ('interests', models.JSONField(default=list, help_text='User interests')),
                ('notification_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('never', 'Never')], default='daily', max_length=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.5, max_digits=3)),
            ],
            options={
                'verbose_name': 'user preference',
                'verbose_name_plural': 'user preferences',
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='LearningPathCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('is_required', models.BooleanField(default=True)),
                ('is_prerequisite', models.BooleanField(default=False)),
                ('estimated_duration', models.IntegerField(help_text='Estimated duration in hours')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_paths', to='courses.course')),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path_courses', to='recommendations.learningpath')),
            ],
            options={
                'verbose_name': 'learning path course',
                'verbose_name_plural': 'learning path courses',
                'db_table': 'learning_path_courses',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='learningpath',
            name='courses',
            field=models.ManyToManyField(through='recommendations.LearningPathCourse', to='courses.course'),
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('recommendation_type', models.CharField(choices=[('course', 'Course'), ('lesson', 'Lesson'), ('exercise', 'Exercise'), ('path', 'Learning Path'), ('achievement', 'Achievement'), ('challenge', 'Challenge'), ('peer', 'Peer'), ('resource', 'Resource')], max_length=20)),
                ('algorithm', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('hybrid', 'Hybrid'), ('popularity', 'Popularity-Based'), ('recent', 'Recently Added'), ('trending', 'Trending'), ('personalized', 'Personalized')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('score', models.DecimalField(decimal_places=4, help_text='Recommendation score (0-1)', max_digits=5)),
                ('confidence', models.DecimalField(decimal_places=2, help_text='Confidence in recommendation', max_digits=3)),
                ('is_clicked', models.BooleanField(default=False)),
                ('is_enrolled', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('reason', models.CharField(blank=True, help_text='Why this was recommended', max_length=200)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'recommendation',
                'verbose_name_plural': 'recommendations',
                'db_table': 'recommendations',
                'ordering': ['-score', '-created_at'],
            },
        ),
    ]

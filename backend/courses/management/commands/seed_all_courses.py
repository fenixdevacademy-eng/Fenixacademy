from django.core.management.base import BaseCommand
from django.core.management import call_command

class Command(BaseCommand):
    help = 'Popula a plataforma com todos os cursos (b√°sicos, intermedi√°rios e avan√ßados)'

    def handle(self, *args, **kwargs):
        self.stdout.write('üöÄ Iniciando popula√ß√£o completa da plataforma...')
        
        try:
            # Executa seed de cursos b√°sicos
            self.stdout.write('üìö Criando cursos b√°sicos...')
            call_command('seed_real_courses')
            
            # Executa seed de cursos avan√ßados
            self.stdout.write('üî• Criando cursos avan√ßados...')
            call_command('seed_advanced_courses')
            
            # Executa seed r√°pido (dados de exemplo)
            self.stdout.write('‚ö° Criando dados de exemplo...')
            call_command('seed_full_courses')
            
            self.stdout.write(
                self.style.SUCCESS(
                    '‚úÖ Plataforma populada com sucesso!\n'
                    'üìä Agora voc√™ tem:\n'
                    '   ‚Ä¢ Cursos de Python, JavaScript, React, Node.js, SQL\n'
                    '   ‚Ä¢ M√≥dulos com conte√∫dos educacionais reais\n'
                    '   ‚Ä¢ Li√ß√µes com explica√ß√µes detalhadas\n'
                    '   ‚Ä¢ Exerc√≠cios pr√°ticos e projetos\n'
                    '   ‚Ä¢ Diferentes n√≠veis de dificuldade\n\n'
                    'üéØ Acesse o admin do Django para visualizar todos os cursos criados!'
                )
            )
            # Mostra o total de cursos cadastrados
            from courses.models import Course
            self.stdout.write(self.style.SUCCESS(f'üìä Total de cursos cadastrados: {Course.objects.count()}'))
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao popular a plataforma: {e}')
            ) 
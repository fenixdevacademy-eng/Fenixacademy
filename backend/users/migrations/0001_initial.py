# Generated by Django 5.2.4 on 2025-07-28 23:08

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Username can only contain letters, numbers, and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='username')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('bio', models.TextField(blank=True, verbose_name='bio')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='avatar')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='phone number')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='country')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='timezone')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('pt', 'Português'), ('es', 'Español'), ('fr', 'Français'), ('de', 'Deutsch'), ('it', 'Italiano'), ('ja', '日本語'), ('ko', '한국어'), ('zh', '中文'), ('ar', 'العربية')], default='en', max_length=10, verbose_name='preferred language')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='push notifications')),
                ('marketing_emails', models.BooleanField(default=False, verbose_name='marketing emails')),
                ('learning_goals', models.JSONField(blank=True, default=list, verbose_name='learning goals')),
                ('skill_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20, verbose_name='skill level')),
                ('interests', models.JSONField(blank=True, default=list, verbose_name='interests')),
                ('is_founder', models.BooleanField(default=False, verbose_name='is founder')),
                ('founder_payment_id', models.CharField(blank=True, max_length=128, null=True)),
                ('founder_benefits_granted', models.BooleanField(default=False, verbose_name='founder benefits granted')),
                ('founder_joined_date', models.DateTimeField(blank=True, null=True, verbose_name='founder joined date')),
                ('is_verified', models.BooleanField(default=False, verbose_name='is verified')),
                ('email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('phone_verified', models.BooleanField(default=False, verbose_name='phone verified')),
                ('verification_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('google_id', models.CharField(blank=True, max_length=100, null=True)),
                ('facebook_id', models.CharField(blank=True, max_length=100, null=True)),
                ('github_id', models.CharField(blank=True, max_length=100, null=True)),
                ('linkedin_id', models.CharField(blank=True, max_length=100, null=True)),
                ('subscription_status', models.CharField(choices=[('free', 'Free'), ('basic', 'Basic'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='free', max_length=20, verbose_name='subscription status')),
                ('subscription_expires', models.DateTimeField(blank=True, null=True, verbose_name='subscription expires')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last login IP')),
                ('registration_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='registration IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='user agent')),
                ('referrer', models.URLField(blank=True, verbose_name='referrer')),
                ('gdpr_consent', models.BooleanField(default=False, verbose_name='GDPR consent')),
                ('data_processing_consent', models.BooleanField(default=False, verbose_name='data processing consent')),
                ('marketing_consent', models.BooleanField(default=False, verbose_name='marketing consent')),
                ('consent_date', models.DateTimeField(blank=True, null=True, verbose_name='consent date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='last activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
                'indexes': [models.Index(fields=['email'], name='users_email_4b85f2_idx'), models.Index(fields=['username'], name='users_usernam_baeb4b_idx'), models.Index(fields=['is_founder'], name='users_is_foun_e1762c_idx'), models.Index(fields=['subscription_status'], name='users_subscri_ae2c5f_idx'), models.Index(fields=['preferred_language'], name='users_preferr_cf0f22_idx'), models.Index(fields=['created_at'], name='users_created_6541e9_idx'), models.Index(fields=['last_activity'], name='users_last_ac_a9fd4f_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

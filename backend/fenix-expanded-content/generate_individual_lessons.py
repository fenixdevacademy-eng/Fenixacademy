#!/usr/bin/env python3
"""
Script para gerar conte√∫do espec√≠fico para cada aula individual
"""

import os
from pathlib import Path

def generate_individual_lessons():
    """Gera conte√∫do espec√≠fico para cada aula individual"""
    print("üöÄ GERANDO CONTE√öDO ESPEC√çFICO PARA CADA AULA!")
    print("=" * 70)
    
    # Gerar aulas do Python Data Science
    generate_python_individual_lessons()
    
    print("\nüéâ CONTE√öDO ESPEC√çFICO GERADO PARA TODAS AS AULAS!")

def generate_python_individual_lessons():
    """Gera conte√∫do espec√≠fico para cada aula de Python Data Science"""
    print("üêç Gerando aulas individuais para Python Data Science...")
    
    course_path = Path("backend/fenix-expanded-content/python-data-science/avancado")
    
    # M√≥dulo 1: Fundamentos Python (5 aulas)
    generate_lesson_content(course_path, "aula-01-modulo-01-python-data-science.md", 
                           "Introdu√ß√£o ao Python para Data Science", 1, 1)
    generate_lesson_content(course_path, "aula-02-modulo-01-python-data-science.md", 
                           "Vari√°veis e Tipos de Dados", 1, 2)
    generate_lesson_content(course_path, "aula-03-modulo-01-python-data-science.md", 
                           "Estruturas de Controle", 1, 3)
    generate_lesson_content(course_path, "aula-04-modulo-01-python-data-science.md", 
                           "Fun√ß√µes e M√≥dulos", 1, 4)
    generate_lesson_content(course_path, "aula-05-modulo-01-python-data-science.md", 
                           "Projeto: Calculadora de Estat√≠sticas", 1, 5)
    
    # M√≥dulo 2: An√°lise de Dados com Pandas (6 aulas)
    generate_lesson_content(course_path, "aula-06-modulo-02-python-data-science.md", 
                           "Introdu√ß√£o ao Pandas", 2, 1)
    generate_lesson_content(course_path, "aula-07-modulo-02-python-data-science.md", 
                           "DataFrames e Series", 2, 2)
    generate_lesson_content(course_path, "aula-08-modulo-02-python-data-science.md", 
                           "Manipula√ß√£o de Dados", 2, 3)
    generate_lesson_content(course_path, "aula-09-modulo-02-python-data-science.md", 
                           "Agrega√ß√µes e Agrupamentos", 2, 4)
    generate_lesson_content(course_path, "aula-10-modulo-02-python-data-science.md", 
                           "Limpeza e Tratamento de Dados", 2, 5)
    generate_lesson_content(course_path, "aula-11-modulo-02-python-data-science.md", 
                           "Projeto: An√°lise de Vendas", 2, 6)
    
    # M√≥dulo 3: Visualiza√ß√£o com Matplotlib/Seaborn (6 aulas)
    generate_lesson_content(course_path, "aula-12-modulo-03-python-data-science.md", 
                           "Introdu√ß√£o √† Visualiza√ß√£o", 3, 1)
    generate_lesson_content(course_path, "aula-13-modulo-03-python-data-science.md", 
                           "Matplotlib B√°sico", 3, 2)
    generate_lesson_content(course_path, "aula-14-modulo-03-python-data-science.md", 
                           "Seaborn e Estat√≠sticas", 3, 3)
    generate_lesson_content(course_path, "aula-15-modulo-03-python-data-science.md", 
                           "Gr√°ficos Avan√ßados", 3, 4)
    generate_lesson_content(course_path, "aula-16-modulo-03-python-data-science.md", 
                           "Dashboards Interativos", 3, 5)
    generate_lesson_content(course_path, "aula-17-modulo-03-python-data-science.md", 
                           "Projeto: Dashboard de Vendas", 3, 6)
    
    # M√≥dulo 4: Machine Learning B√°sico (7 aulas)
    generate_lesson_content(course_path, "aula-18-modulo-04-python-data-science.md", 
                           "Introdu√ß√£o ao Machine Learning", 4, 1)
    generate_lesson_content(course_path, "aula-19-modulo-04-python-data-science.md", 
                           "Regress√£o Linear", 4, 2)
    generate_lesson_content(course_path, "aula-20-modulo-04-python-data-science.md", 
                           "Classifica√ß√£o", 4, 3)
    generate_lesson_content(course_path, "aula-21-modulo-04-python-data-science.md", 
                           "Clustering", 4, 4)
    generate_lesson_content(course_path, "aula-22-modulo-04-python-data-science.md", 
                           "Valida√ß√£o e M√©tricas", 4, 5)
    generate_lesson_content(course_path, "aula-23-modulo-04-python-data-science.md", 
                           "Feature Engineering", 4, 6)
    generate_lesson_content(course_path, "aula-24-modulo-04-python-data-science.md", 
                           "Projeto: Sistema de Recomenda√ß√£o", 4, 7)
    
    # M√≥dulo 5: Deep Learning com TensorFlow (6 aulas)
    generate_lesson_content(course_path, "aula-25-modulo-05-python-data-science.md", 
                           "Introdu√ß√£o ao Deep Learning", 5, 1)
    generate_lesson_content(course_path, "aula-26-modulo-05-python-data-science.md", 
                           "Redes Neurais B√°sicas", 5, 2)
    generate_lesson_content(course_path, "aula-27-modulo-05-python-data-science.md", 
                           "TensorFlow e Keras", 5, 3)
    generate_lesson_content(course_path, "aula-28-modulo-05-python-data-science.md", 
                           "CNNs para Imagens", 5, 4)
    generate_lesson_content(course_path, "aula-29-modulo-05-python-data-science.md", 
                           "RNNs para Sequ√™ncias", 5, 5)
    generate_lesson_content(course_path, "aula-30-modulo-05-python-data-science.md", 
                           "Projeto: Classificador de Imagens", 5, 6)
    
    # M√≥dulo 6: Processamento de Linguagem Natural (5 aulas)
    generate_lesson_content(course_path, "aula-31-modulo-06-python-data-science.md", 
                           "Introdu√ß√£o ao NLP", 6, 1)
    generate_lesson_content(course_path, "aula-32-modulo-06-python-data-science.md", 
                           "Tokeniza√ß√£o e Pr√©-processamento", 6, 2)
    generate_lesson_content(course_path, "aula-33-modulo-06-python-data-science.md", 
                           "Word Embeddings", 6, 3)
    generate_lesson_content(course_path, "aula-34-modulo-06-python-data-science.md", 
                           "Modelos de Linguagem", 6, 4)
    generate_lesson_content(course_path, "aula-35-modulo-06-python-data-science.md", 
                           "Projeto: Chatbot Inteligente", 6, 5)
    
    # M√≥dulo 7: Big Data com PySpark (5 aulas)
    generate_lesson_content(course_path, "aula-36-modulo-07-python-data-science.md", 
                           "Introdu√ß√£o ao Big Data", 7, 1)
    generate_lesson_content(course_path, "aula-37-modulo-07-python-data-science.md", 
                           "PySpark e RDDs", 7, 2)
    generate_lesson_content(course_path, "aula-38-modulo-07-python-data-science.md", 
                           "DataFrames no Spark", 7, 3)
    generate_lesson_content(course_path, "aula-39-modulo-07-python-data-science.md", 
                           "Machine Learning no Spark", 7, 4)
    generate_lesson_content(course_path, "aula-40-modulo-07-python-data-science.md", 
                           "Projeto: An√°lise de Big Data", 7, 5)
    
    # M√≥dulo 8: Deploy de Modelos ML (5 aulas)
    generate_lesson_content(course_path, "aula-41-modulo-08-python-data-science.md", 
                           "Introdu√ß√£o ao Deploy de ML", 8, 1)
    generate_lesson_content(course_path, "aula-42-modulo-08-python-data-science.md", 
                           "Serializa√ß√£o de Modelos", 8, 2)
    generate_lesson_content(course_path, "aula-43-modulo-08-python-data-science.md", 
                           "APIs para ML", 8, 3)
    generate_lesson_content(course_path, "aula-44-modulo-08-python-data-science.md", 
                           "Docker e Containers", 8, 4)
    generate_lesson_content(course_path, "aula-45-modulo-08-python-data-science.md", 
                           "Projeto: Sistema ML em Produ√ß√£o", 8, 5)

def generate_lesson_content(course_path: Path, filename: str, title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico para uma aula individual"""
    file_path = course_path / filename
    
    # Conte√∫do espec√≠fico baseado no t√≥pico
    if "DataFrames e Series" in title:
        content = generate_dataframes_series_content(title, module_num, lesson_num)
    elif "Introdu√ß√£o ao Pandas" in title:
        content = generate_pandas_intro_content(title, module_num, lesson_num)
    elif "Manipula√ß√£o de Dados" in title:
        content = generate_data_manipulation_content(title, module_num, lesson_num)
    elif "Agrega√ß√µes e Agrupamentos" in title:
        content = generate_aggregations_content(title, module_num, lesson_num)
    elif "Limpeza e Tratamento" in title:
        content = generate_data_cleaning_content(title, module_num, lesson_num)
    elif "Projeto: An√°lise de Vendas" in title:
        content = generate_sales_analysis_project_content(title, module_num, lesson_num)
    else:
        content = generate_generic_lesson_content(title, module_num, lesson_num)
    
    # Escrever o arquivo
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Gerado: {filename}")

def generate_dataframes_series_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico sobre DataFrames e Series"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Pandas**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 60 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento b√°sico de Python

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

Voc√™ j√° se sentiu perdido ao tentar analisar dados complexos? Esta aula vai mudar isso para sempre.

**Aqui voc√™ vai aprender:**
- Como criar e manipular DataFrames e Series do Pandas
- T√©cnicas profissionais de indexa√ß√£o e sele√ß√£o de dados
- Opera√ß√µes vetorizadas para m√°xima performance
- Como resolver problemas reais de an√°lise de dados

**Prepare-se para:** Dominar as estruturas de dados mais poderosas do Python!

---

## üèóÔ∏è **DESENVOLVIMENTO DOS CONCEITOS**

### **1.1 O que s√£o DataFrames e Series?**

**DataFrame** √© uma estrutura de dados bidimensional (como uma tabela) que pode conter diferentes tipos de dados em cada coluna.

**Series** √© uma estrutura unidimensional (como uma coluna) que pode conter qualquer tipo de dados.

### **1.2 Por que usar Pandas?**

- **Performance**: Opera√ß√µes otimizadas em C
- **Flexibilidade**: Manipula√ß√£o f√°cil de dados
- **Integra√ß√£o**: Funciona perfeitamente com NumPy, Matplotlib, etc.
- **Produtividade**: Menos c√≥digo, mais resultados

### **1.3 Casos de Uso Reais**

- An√°lise de vendas e m√©tricas de neg√≥cio
- Processamento de dados de sensores IoT
- An√°lise de dados financeiros
- Machine Learning e Data Science

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Exemplo B√°sico: Criando DataFrames e Series**

```python
import pandas as pd
import numpy as np

# Criando uma Series
s = pd.Series([1, 3, 5, np.nan, 6, 8])
print("Series:")
print(s)

# Criando um DataFrame
data = {{
    'Nome': ['Ana', 'Bruno', 'Carlos', 'Diana'],
    'Idade': [25, 30, 35, 28],
    'Salario': [5000, 7000, 8000, 6000],
    'Departamento': ['TI', 'Vendas', 'TI', 'Marketing']
}}

df = pd.DataFrame(data)
print("\\nDataFrame:")
print(df)
```

### **Exemplo Avan√ßado: Opera√ß√µes com DataFrames**

```python
# Informa√ß√µes b√°sicas do DataFrame
print("\\n=== INFORMA√á√ïES B√ÅSICAS ===")
print(f"Shape: {{df.shape}}")
print(f"Colunas: {{df.columns.tolist()}}")
print(f"Tipos de dados:\\n{{df.dtypes}}")

# Estat√≠sticas descritivas
print("\\n=== ESTAT√çSTICAS DESCRITIVAS ===")
print(df.describe())

# Sele√ß√£o de dados
print("\\n=== SELE√á√ÉO DE DADOS ===")
# Selecionar colunas espec√≠ficas
print("Colunas Nome e Salario:")
print(df[['Nome', 'Salario']])

# Filtrar dados
print("\\nFuncion√°rios com sal√°rio > 6000:")
print(df[df['Salario'] > 6000])

# Ordenar dados
print("\\nOrdenado por sal√°rio (decrescente):")
print(df.sort_values('Salario', ascending=False))
```

### **Exemplo Profissional: An√°lise de Dados de Vendas**

```python
# Simulando dados de vendas
np.random.seed(42)
vendas_data = {{
    'Data': pd.date_range('2024-01-01', periods=100, freq='D'),
    'Produto': np.random.choice(['A', 'B', 'C', 'D'], 100),
    'Quantidade': np.random.randint(1, 50, 100),
    'Preco': np.random.uniform(10, 100, 100),
    'Vendedor': np.random.choice(['Jo√£o', 'Maria', 'Pedro', 'Ana'], 100)
}}

vendas_df = pd.DataFrame(vendas_data)
vendas_df['Receita'] = vendas_df['Quantidade'] * vendas_df['Preco']

print("=== AN√ÅLISE DE VENDAS ===")
print(f"Total de vendas: {{vendas_df['Receita'].sum():.2f}}")
print(f"Venda m√©dia por transa√ß√£o: {{vendas_df['Receita'].mean():.2f}}")
print(f"Produto mais vendido: {{vendas_df['Produto'].value_counts().index[0]}}")

# An√°lise por vendedor
print("\\n=== VENDAS POR VENDEDOR ===")
vendas_por_vendedor = vendas_df.groupby('Vendedor')['Receita'].agg(['sum', 'mean', 'count'])
print(vendas_por_vendedor)
```

---

## üéØ **Exerc√≠cios Pr√°ticos**

### **Exerc√≠cio 1: Criando seu Primeiro DataFrame**
1. Crie um DataFrame com dados de 5 funcion√°rios
2. Inclua colunas: Nome, Idade, Cargo, Sal√°rio
3. Exiba as informa√ß√µes b√°sicas do DataFrame

### **Exerc√≠cio 2: Manipula√ß√£o de Dados**
1. Filtre funcion√°rios com sal√°rio > 5000
2. Ordene por sal√°rio em ordem decrescente
3. Calcule a m√©dia salarial por cargo

### **Exerc√≠cio 3: An√°lise de Dados**
1. Crie um DataFrame com dados de vendas de 30 dias
2. Calcule receita total, m√©dia e mediana
3. Identifique o melhor e pior dia de vendas

---

## üèÜ **Projeto Pr√°tico: Sistema de An√°lise de Funcion√°rios**

### **Objetivo**
Criar um sistema completo de an√°lise de dados de funcion√°rios usando DataFrames e Series.

### **Requisitos**
- Dataset com pelo menos 50 funcion√°rios
- An√°lise de distribui√ß√£o salarial
- An√°lise por departamento
- Identifica√ß√£o de outliers
- Relat√≥rio final com insights

### **Entreg√°veis**
1. C√≥digo Python completo
2. Dataset de exemplo
3. Relat√≥rio de an√°lise
4. Visualiza√ß√µes dos dados

---

## üìñ **Recursos Adicionais**

### **Documenta√ß√£o Oficial**
- [Pandas DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)
- [Pandas Series](https://pandas.pydata.org/docs/reference/api/pandas.Series.html)

### **Livros Recomendados**
- "Python for Data Analysis" - Wes McKinney
- "Pandas Cookbook" - Theodore Petrou

### **Pr√≥xima Aula**
**Manipula√ß√£o de Dados** - Aprenda t√©cnicas avan√ßadas de manipula√ß√£o e transforma√ß√£o de dados.

---

## üéâ **Parab√©ns!**

Voc√™ dominou DataFrames e Series! Continue praticando e aplicando esses conceitos em projetos reais.

**Pr√≥ximo passo:** Aprenda t√©cnicas avan√ßadas de manipula√ß√£o de dados!
"""

def generate_pandas_intro_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico sobre Introdu√ß√£o ao Pandas"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Pandas**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 45 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento b√°sico de Python

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

Voc√™ j√° se sentiu frustrado ao tentar analisar dados com Python puro? O Pandas vai revolucionar sua forma de trabalhar com dados!

**Aqui voc√™ vai aprender:**
- O que √© o Pandas e por que √© essencial para Data Science
- Como instalar e configurar o Pandas
- Estruturas de dados fundamentais
- Primeiros passos na an√°lise de dados

**Prepare-se para:** Uma jornada que vai transformar sua rela√ß√£o com dados!

---

## üèóÔ∏è **DESENVOLVIMENTO DOS CONCEITOS**

### **1.1 O que √© o Pandas?**

Pandas √© uma biblioteca Python de c√≥digo aberto que fornece estruturas de dados de alto desempenho e f√°ceis de usar para an√°lise de dados.

### **1.2 Por que usar Pandas?**

- **Facilidade de uso**: Sintaxe intuitiva e poderosa
- **Performance**: Otimizado para grandes volumes de dados
- **Flexibilidade**: Manipula√ß√£o de dados de qualquer fonte
- **Integra√ß√£o**: Funciona perfeitamente com outras bibliotecas

### **1.3 Instala√ß√£o e Configura√ß√£o**

```python
# Instala√ß√£o via pip
pip install pandas

# Verifica√ß√£o da instala√ß√£o
import pandas as pd
print(f"Pandas version: {{pd.__version__}}")
```

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Exemplo B√°sico: Primeiros Passos**

```python
import pandas as pd

# Criando uma Series simples
s = pd.Series([1, 2, 3, 4, 5])
print("Series:")
print(s)

# Criando um DataFrame b√°sico
df = pd.DataFrame({{
    'A': [1, 2, 3, 4],
    'B': [10, 20, 30, 40],
    'C': [100, 200, 300, 400]
}})

print("\\nDataFrame:")
print(df)
```

### **Exemplo Avan√ßado: Carregando Dados**

```python
# Carregando dados de um arquivo CSV
df = pd.read_csv('dados.csv')

# Informa√ß√µes b√°sicas sobre os dados
print("Shape:", df.shape)
print("\\nColunas:", df.columns.tolist())
print("\\nTipos de dados:")
print(df.dtypes)

# Primeiras linhas
print("\\nPrimeiras 5 linhas:")
print(df.head())
```

---

## üéØ **Exerc√≠cios Pr√°ticos**

### **Exerc√≠cio 1: Explorando Dados**
1. Carregue um dataset de exemplo
2. Explore as primeiras e √∫ltimas linhas
3. Identifique tipos de dados e valores faltantes

### **Exerc√≠cio 2: Criando Estruturas**
1. Crie uma Series com dados de temperatura
2. Crie um DataFrame com dados de vendas
3. Explore as propriedades de cada estrutura

---

## üéâ **Parab√©ns!**

Voc√™ deu os primeiros passos no Pandas! Continue praticando e explore as pr√≥ximas aulas.

**Pr√≥ximo passo:** Aprenda sobre DataFrames e Series em detalhes!
"""

def generate_data_manipulation_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico sobre Manipula√ß√£o de Dados"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Pandas**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 75 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento de DataFrames e Series

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

A manipula√ß√£o de dados √© o cora√ß√£o da an√°lise! Esta aula vai te ensinar t√©cnicas profissionais.

**Aqui voc√™ vai aprender:**
- T√©cnicas avan√ßadas de sele√ß√£o e filtragem
- Transforma√ß√£o e limpeza de dados
- Opera√ß√µes de merge e join
- T√©cnicas de otimiza√ß√£o de performance

**Prepare-se para:** Dominar a manipula√ß√£o de dados como um profissional!

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Exemplo B√°sico: Sele√ß√£o e Filtragem**

```python
import pandas as pd
import numpy as np

# Criando dados de exemplo
data = {{
    'Nome': ['Ana', 'Bruno', 'Carlos', 'Diana', 'Eduardo'],
    'Idade': [25, 30, 35, 28, 32],
    'Salario': [5000, 7000, 8000, 6000, 7500],
    'Departamento': ['TI', 'Vendas', 'TI', 'Marketing', 'Vendas']
}}

df = pd.DataFrame(data)

# Sele√ß√£o por posi√ß√£o
print("Primeiras 3 linhas:")
print(df.iloc[:3])

# Sele√ß√£o por condi√ß√£o
print("\\nFuncion√°rios de TI:")
print(df[df['Departamento'] == 'TI'])

# M√∫ltiplas condi√ß√µes
print("\\nFuncion√°rios de TI com sal√°rio > 6000:")
print(df[(df['Departamento'] == 'TI') & (df['Salario'] > 6000)])
```

### **Exemplo Avan√ßado: Transforma√ß√£o de Dados**

```python
# Adicionando novas colunas
df['Salario_Anual'] = df['Salario'] * 12
df['Categoria_Salario'] = pd.cut(df['Salario'], 
                                bins=[0, 6000, 8000, float('inf')], 
                                labels=['Baixo', 'M√©dio', 'Alto'])

print("DataFrame com novas colunas:")
print(df)

# Aplicando fun√ß√µes
def calcular_bonus(salario):
    return salario * 0.1 if salario > 7000 else salario * 0.05

df['Bonus'] = df['Salario'].apply(calcular_bonus)
print("\\nDataFrame com bonus:")
print(df)
```

---

## üéØ **Exerc√≠cios Pr√°ticos**

### **Exerc√≠cio 1: Filtragem Avan√ßada**
1. Filtre dados por m√∫ltiplas condi√ß√µes
2. Use operadores l√≥gicos (and, or, not)
3. Aplique filtros em colunas espec√≠ficas

### **Exerc√≠cio 2: Transforma√ß√£o de Dados**
1. Crie novas colunas calculadas
2. Aplique fun√ß√µes personalizadas
3. Transforme tipos de dados

---

## üéâ **Parab√©ns!**

Voc√™ dominou a manipula√ß√£o de dados! Continue praticando e explore as pr√≥ximas aulas.

**Pr√≥ximo passo:** Aprenda sobre agrega√ß√µes e agrupamentos!
"""

def generate_aggregations_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico sobre Agrega√ß√µes e Agrupamentos"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Pandas**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 70 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento de manipula√ß√£o de dados

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

Agrega√ß√µes e agrupamentos s√£o essenciais para extrair insights dos dados!

**Aqui voc√™ vai aprender:**
- T√©cnicas de agrupamento de dados
- Fun√ß√µes de agrega√ß√£o avan√ßadas
- An√°lise de dados por categorias
- T√©cnicas de pivot e reshape

**Prepare-se para:** Extrair insights poderosos dos seus dados!

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Exemplo B√°sico: Agrupamentos Simples**

```python
import pandas as pd
import numpy as np

# Criando dados de vendas
vendas_data = {{
    'Vendedor': ['Ana', 'Bruno', 'Ana', 'Carlos', 'Bruno', 'Ana'],
    'Produto': ['A', 'B', 'A', 'C', 'B', 'A'],
    'Quantidade': [10, 5, 8, 12, 7, 15],
    'Preco': [100, 200, 100, 150, 200, 100]
}}

df = pd.DataFrame(vendas_data)
df['Receita'] = df['Quantidade'] * df['Preco']

# Agrupamento por vendedor
vendas_por_vendedor = df.groupby('Vendedor')['Receita'].sum()
print("Vendas por vendedor:")
print(vendas_por_vendedor)
```

### **Exemplo Avan√ßado: Agrega√ß√µes M√∫ltiplas**

```python
# M√∫ltiplas agrega√ß√µes
agregacoes = df.groupby('Vendedor').agg({{
    'Receita': ['sum', 'mean', 'count'],
    'Quantidade': 'sum',
    'Preco': 'mean'
}})

print("\\nAgrega√ß√µes m√∫ltiplas:")
print(agregacoes)

# Agrupamento por m√∫ltiplas colunas
vendas_por_vendedor_produto = df.groupby(['Vendedor', 'Produto'])['Receita'].sum()
print("\\nVendas por vendedor e produto:")
print(vendas_por_vendedor_produto)
```

---

## üéØ **Exerc√≠cios Pr√°ticos**

### **Exerc√≠cio 1: An√°lise de Vendas**
1. Agrupe vendas por vendedor
2. Calcule total, m√©dia e contagem
3. Identifique o melhor vendedor

### **Exerc√≠cio 2: An√°lise Temporal**
1. Agrupe dados por m√™s/trimestre
2. Calcule tend√™ncias de crescimento
3. Identifique sazonalidades

---

## üéâ **Parab√©ns!**

Voc√™ dominou agrega√ß√µes e agrupamentos! Continue praticando e explore as pr√≥ximas aulas.

**Pr√≥ximo passo:** Aprenda sobre limpeza e tratamento de dados!
"""

def generate_data_cleaning_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico sobre Limpeza e Tratamento de Dados"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Pandas**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 80 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento de agrega√ß√µes e agrupamentos

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

Dados limpos s√£o a base de qualquer an√°lise de qualidade! Esta aula vai te ensinar t√©cnicas profissionais.

**Aqui voc√™ vai aprender:**
- Identifica√ß√£o e tratamento de valores faltantes
- Detec√ß√£o e remo√ß√£o de outliers
- Normaliza√ß√£o e padroniza√ß√£o de dados
- T√©cnicas de valida√ß√£o de dados

**Prepare-se para:** Transformar dados bagun√ßados em insights valiosos!

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Exemplo B√°sico: Tratamento de Valores Faltantes**

```python
import pandas as pd
import numpy as np

# Criando dados com valores faltantes
data = {{
    'Nome': ['Ana', 'Bruno', 'Carlos', 'Diana', 'Eduardo'],
    'Idade': [25, np.nan, 35, 28, np.nan],
    'Salario': [5000, 7000, np.nan, 6000, 7500],
    'Departamento': ['TI', 'Vendas', 'TI', None, 'Vendas']
}}

df = pd.DataFrame(data)
print("DataFrame original:")
print(df)

# Verificando valores faltantes
print("\\nValores faltantes:")
print(df.isnull().sum())

# Removendo linhas com valores faltantes
df_limpo = df.dropna()
print("\\nDataFrame sem valores faltantes:")
print(df_limpo)
```

### **Exemplo Avan√ßado: Tratamento Completo**

```python
# Preenchendo valores faltantes
df_preenchido = df.copy()

# Preenchendo idade com a m√©dia
df_preenchido['Idade'].fillna(df_preenchido['Idade'].mean(), inplace=True)

# Preenchendo sal√°rio com a mediana
df_preenchido['Salario'].fillna(df_preenchido['Salario'].median(), inplace=True)

# Preenchendo departamento com 'N√£o informado'
df_preenchido['Departamento'].fillna('N√£o informado', inplace=True)

print("DataFrame preenchido:")
print(df_preenchido)

# Detec√ß√£o de outliers
Q1 = df_preenchido['Salario'].quantile(0.25)
Q3 = df_preenchido['Salario'].quantile(0.75)
IQR = Q3 - Q1

outliers = df_preenchido[(df_preenchido['Salario'] < Q1 - 1.5 * IQR) | 
                        (df_preenchido['Salario'] > Q3 + 1.5 * IQR)]

print("\\nOutliers detectados:")
print(outliers)
```

---

## üéØ **Exerc√≠cios Pr√°ticos**

### **Exerc√≠cio 1: Limpeza B√°sica**
1. Identifique valores faltantes
2. Decida como trat√°-los
3. Aplique as transforma√ß√µes

### **Exerc√≠cio 2: Detec√ß√£o de Outliers**
1. Use m√©todos estat√≠sticos
2. Visualize os dados
3. Decida como tratar outliers

---

## üéâ **Parab√©ns!**

Voc√™ dominou a limpeza e tratamento de dados! Continue praticando e explore as pr√≥ximas aulas.

**Pr√≥ximo passo:** Aplique tudo em um projeto pr√°tico de an√°lise de vendas!
"""

def generate_sales_analysis_project_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do espec√≠fico sobre Projeto: An√°lise de Vendas"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Pandas**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 90 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento completo de Pandas

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

Agora √© hora de aplicar tudo que voc√™ aprendeu em um projeto real!

**Aqui voc√™ vai aprender:**
- Como estruturar um projeto de an√°lise de dados
- T√©cnicas de an√°lise explorat√≥ria de dados
- Cria√ß√£o de relat√≥rios profissionais
- Apresenta√ß√£o de insights de neg√≥cio

**Prepare-se para:** Criar seu primeiro projeto completo de Data Science!

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Projeto: An√°lise Completa de Vendas**

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Gerando dados de vendas realistas
np.random.seed(42)
n_vendas = 1000

vendas_data = {{
    'Data': pd.date_range('2024-01-01', periods=n_vendas, freq='D'),
    'Vendedor': np.random.choice(['Ana', 'Bruno', 'Carlos', 'Diana', 'Eduardo'], n_vendas),
    'Produto': np.random.choice(['Produto A', 'Produto B', 'Produto C', 'Produto D'], n_vendas),
    'Quantidade': np.random.randint(1, 100, n_vendas),
    'Preco_Unitario': np.random.uniform(10, 500, n_vendas),
    'Regiao': np.random.choice(['Norte', 'Sul', 'Leste', 'Oeste'], n_vendas)
}}

df = pd.DataFrame(vendas_data)
df['Receita'] = df['Quantidade'] * df['Preco_Unitario']

print("=== AN√ÅLISE DE VENDAS ===")
print(f"Per√≠odo: {{df['Data'].min()}} a {{df['Data'].max()}}")
print(f"Total de vendas: {{df['Receita'].sum():,.2f}}")
print(f"Venda m√©dia: {{df['Receita'].mean():,.2f}}")
```

### **An√°lise Explorat√≥ria**

```python
# An√°lise por vendedor
vendas_por_vendedor = df.groupby('Vendedor').agg({{
    'Receita': ['sum', 'mean', 'count'],
    'Quantidade': 'sum'
}}).round(2)

print("\\n=== VENDAS POR VENDEDOR ===")
print(vendas_por_vendedor)

# An√°lise por produto
vendas_por_produto = df.groupby('Produto')['Receita'].sum().sort_values(ascending=False)
print("\\n=== VENDAS POR PRODUTO ===")
print(vendas_por_produto)

# An√°lise temporal
vendas_mensais = df.groupby(df['Data'].dt.to_period('M'))['Receita'].sum()
print("\\n=== VENDAS MENS√ÅIS ===")
print(vendas_mensais)
```

### **Visualiza√ß√µes**

```python
# Configurando o estilo
plt.style.use('seaborn-v0_8')

# Gr√°fico de vendas por vendedor
plt.figure(figsize=(12, 6))
vendas_por_vendedor['Receita']['sum'].plot(kind='bar')
plt.title('Vendas Totais por Vendedor')
plt.xlabel('Vendedor')
plt.ylabel('Receita (R$)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Gr√°fico de vendas mensais
plt.figure(figsize=(12, 6))
vendas_mensais.plot(kind='line', marker='o')
plt.title('Evolu√ß√£o das Vendas Mensais')
plt.xlabel('M√™s')
plt.ylabel('Receita (R$)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```

---

## üéØ **Exerc√≠cios do Projeto**

### **Exerc√≠cio 1: An√°lise B√°sica**
1. Carregue e explore os dados
2. Calcule m√©tricas b√°sicas
3. Identifique padr√µes interessantes

### **Exerc√≠cio 2: An√°lise Avan√ßada**
1. Crie segmenta√ß√µes de dados
2. Identifique tend√™ncias temporais
3. Analise correla√ß√µes entre vari√°veis

### **Exerc√≠cio 3: Relat√≥rio Final**
1. Crie visualiza√ß√µes profissionais
2. Escreva insights de neg√≥cio
3. Fa√ßa recomenda√ß√µes estrat√©gicas

---

## üèÜ **Entreg√°veis do Projeto**

### **1. Notebook Jupyter Completo**
- C√≥digo bem documentado
- An√°lises detalhadas
- Visualiza√ß√µes profissionais

### **2. Relat√≥rio Executivo**
- Resumo executivo
- Principais descobertas
- Recomenda√ß√µes estrat√©gicas

### **3. Apresenta√ß√£o**
- Slides profissionais
- Storytelling com dados
- Pr√≥ximos passos

---

## üéâ **Parab√©ns!**

Voc√™ completou seu primeiro projeto de Data Science! Continue praticando e explore novos desafios.

**Pr√≥ximo m√≥dulo:** Aprenda sobre visualiza√ß√£o de dados com Matplotlib e Seaborn!
"""

def generate_generic_lesson_content(title: str, module_num: int, lesson_num: int):
    """Gera conte√∫do gen√©rico para outras aulas"""
    return f"""# üéì **Fenix Academy - Python para Data Science**
## üìö **Aula {lesson_num} - M√≥dulo: M√≥dulo {module_num}: Python Data Science**
### üéØ **T√≥pico: {title}**

**Dura√ß√£o Estimada:** 60 min  
**N√≠vel:** Avan√ßado  
**Pr√©-requisitos:** Conhecimento b√°sico de Python

---

## üöÄ **Sua Jornada Rumo ao Pr√≥ximo N√≠vel**

Esta aula vai expandir seus conhecimentos em Python para Data Science!

**Aqui voc√™ vai aprender:**
- Conceitos fundamentais de {title.lower()}
- T√©cnicas pr√°ticas e aplica√ß√µes reais
- Exemplos de c√≥digo profissional
- Exerc√≠cios para fixa√ß√£o

**Prepare-se para:** Dominar {title.lower()} como um profissional!

---

## üíª **IMPLEMENTA√á√ÉO PR√ÅTICA**

### **Exemplo B√°sico**

```python
import pandas as pd
import numpy as np

# Exemplo pr√°tico de {title.lower()}
print("Aprendendo {title.lower()} com Python!")

# C√≥digo de exemplo
data = {{'exemplo': [1, 2, 3, 4, 5]}}
df = pd.DataFrame(data)
print(df)
```

### **Exemplo Avan√ßado**

```python
# Implementa√ß√£o avan√ßada de {title.lower()}
def exemplo_avancado():
    return "Implementa√ß√£o avan√ßada de {title.lower()}"

resultado = exemplo_avancado()
print(resultado)
```

---

## üéØ **Exerc√≠cios Pr√°ticos**

### **Exerc√≠cio 1: Conceitos B√°sicos**
1. Implemente os conceitos fundamentais
2. Teste com dados de exemplo
3. Valide os resultados

### **Exerc√≠cio 2: Aplica√ß√£o Pr√°tica**
1. Aplique em um caso real
2. Otimize o c√≥digo
3. Documente o processo

---

## üéâ **Parab√©ns!**

Voc√™ dominou {title.lower()}! Continue praticando e explore as pr√≥ximas aulas.

**Pr√≥ximo passo:** Continue sua jornada no Python para Data Science!
"""

if __name__ == "__main__":
    generate_individual_lessons()

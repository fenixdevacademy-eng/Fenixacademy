#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ GERADOR DE CONTE√öDO ESPEC√çFICO - FENIX ACADEMY
================================================

Script para gerar conte√∫do espec√≠fico e √∫nico para cada m√≥dulo e aula
de todos os cursos da Fenix Academy, eliminando repeti√ß√µes.
"""

import os
import re
import json
from pathlib import Path
from typing import Dict, List, Any, Tuple
import random
from datetime import datetime

class SpecificContentGenerator:
    """Gerador de conte√∫do espec√≠fico para cada aula"""
    
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
        
        # Base de dados de conte√∫do espec√≠fico por curso
        self.course_content_db = {
            "python-data-science": {
                "name": "Python Data Science",
                "emoji": "üêç",
                "language": "python",
                "modules": {
                    1: "Fundamentos do Python para Data Science",
                    2: "Manipula√ß√£o de Dados com Pandas",
                    3: "Visualiza√ß√£o de Dados",
                    4: "An√°lise Estat√≠stica",
                    5: "Machine Learning B√°sico",
                    6: "Machine Learning Avan√ßado",
                    7: "Deep Learning",
                    8: "Big Data e Processamento",
                    9: "Deploy de Modelos",
                    10: "Projetos Pr√°ticos"
                },
                "topics": {
                    "fundamentos": [
                        "Vari√°veis e Tipos de Dados",
                        "Estruturas de Controle",
                        "Fun√ß√µes e M√≥dulos",
                        "Tratamento de Exce√ß√µes",
                        "Programa√ß√£o Orientada a Objetos"
                    ],
                    "pandas": [
                        "DataFrames e Series",
                        "Indexa√ß√£o e Sele√ß√£o",
                        "Opera√ß√µes de Dados",
                        "Agrupamento e Agrega√ß√£o",
                        "Merge e Join"
                    ],
                    "visualizacao": [
                        "Matplotlib B√°sico",
                        "Seaborn Avan√ßado",
                        "Plotly Interativo",
                        "Dashboards",
                        "Storytelling com Dados"
                    ],
                    "estatistica": [
                        "Estat√≠stica Descritiva",
                        "Testes de Hip√≥teses",
                        "Correla√ß√£o e Regress√£o",
                        "An√°lise de Vari√¢ncia",
                        "Distribui√ß√µes Probabil√≠sticas"
                    ],
                    "ml_basico": [
                        "Regress√£o Linear",
                        "Regress√£o Log√≠stica",
                        "√Årvores de Decis√£o",
                        "Random Forest",
                        "Valida√ß√£o Cruzada"
                    ],
                    "ml_avancado": [
                        "SVM e Kernel Methods",
                        "Clustering (K-means, DBSCAN)",
                        "Redu√ß√£o de Dimensionalidade",
                        "Ensemble Methods",
                        "Otimiza√ß√£o de Hiperpar√¢metros"
                    ],
                    "deep_learning": [
                        "Redes Neurais Artificiais",
                        "TensorFlow e Keras",
                        "PyTorch",
                        "CNN para Imagens",
                        "RNN para Sequ√™ncias"
                    ],
                    "big_data": [
                        "Apache Spark",
                        "Dask para Paraleliza√ß√£o",
                        "Processamento Distribu√≠do",
                        "Streaming de Dados",
                        "Cloud Computing"
                    ],
                    "deploy": [
                        "Docker para ML",
                        "APIs com FastAPI",
                        "MLflow para Versionamento",
                        "Kubernetes",
                        "Monitoramento de Modelos"
                    ],
                    "projetos": [
                        "An√°lise de Sentimentos",
                        "Sistema de Recomenda√ß√£o",
                        "Detec√ß√£o de Fraudes",
                        "Previs√£o de Vendas",
                        "Chatbot com NLP"
                    ]
                }
            },
            "react-advanced": {
                "name": "React Advanced",
                "emoji": "‚öõÔ∏è",
                "language": "javascript",
                "modules": {
                    1: "Fundamentos do React",
                    2: "Hooks Avan√ßados",
                    3: "Context API e State Management",
                    4: "Performance e Otimiza√ß√£o",
                    5: "Roteamento Avan√ßado",
                    6: "Testes e Qualidade",
                    7: "Server-Side Rendering",
                    8: "PWA e Mobile",
                    9: "Micro-frontends",
                    10: "Arquitetura Avan√ßada"
                },
                "topics": {
                    "fundamentos": [
                        "Componentes Funcionais",
                        "Props e State",
                        "Event Handling",
                        "Lifecycle Methods",
                        "JSX Avan√ßado"
                    ],
                    "hooks": [
                        "useState e useEffect",
                        "useContext e useReducer",
                        "useMemo e useCallback",
                        "Hooks Customizados",
                        "useRef e useImperativeHandle"
                    ],
                    "state_management": [
                        "Context API",
                        "Redux Toolkit",
                        "Zustand",
                        "Jotai",
                        "State Machines"
                    ],
                    "performance": [
                        "React.memo",
                        "useMemo e useCallback",
                        "Code Splitting",
                        "Lazy Loading",
                        "Virtual Scrolling"
                    ],
                    "roteamento": [
                        "React Router",
                        "Nested Routes",
                        "Route Guards",
                        "Dynamic Imports",
                        "History API"
                    ],
                    "testes": [
                        "Jest e Testing Library",
                        "Testes de Componentes",
                        "Testes de Integra√ß√£o",
                        "E2E com Cypress",
                        "Mocking e Stubbing"
                    ],
                    "ssr": [
                        "Next.js",
                        "Gatsby",
                        "SSR vs SSG",
                        "Hydration",
                        "SEO Optimization"
                    ],
                    "pwa": [
                        "Service Workers",
                        "Manifest",
                        "Offline Support",
                        "Push Notifications",
                        "App Shell"
                    ],
                    "micro_frontends": [
                        "Module Federation",
                        "Single-SPA",
                        "qiankun",
                        "Comunica√ß√£o entre Apps",
                        "Shared Dependencies"
                    ],
                    "arquitetura": [
                        "Clean Architecture",
                        "Design Patterns",
                        "SOLID Principles",
                        "Dependency Injection",
                        "Error Boundaries"
                    ]
                }
            },
            "aws-cloud": {
                "name": "AWS Cloud",
                "emoji": "‚òÅÔ∏è",
                "language": "yaml",
                "modules": {
                    1: "Fundamentos AWS",
                    2: "Computa√ß√£o (EC2, Lambda)",
                    3: "Armazenamento (S3, EBS)",
                    4: "Banco de Dados (RDS, DynamoDB)",
                    5: "Rede e Seguran√ßa",
                    6: "Monitoramento e Logs",
                    7: "DevOps e CI/CD",
                    8: "Serverless Architecture",
                    9: "Microservi√ßos",
                    10: "Arquitetura Avan√ßada"
                },
                "topics": {
                    "fundamentos": [
                        "Regi√µes e Availability Zones",
                        "IAM e Seguran√ßa",
                        "Billing e Cost Management",
                        "AWS CLI e SDK",
                        "CloudFormation"
                    ],
                    "computacao": [
                        "EC2 Instances",
                        "Auto Scaling Groups",
                        "Load Balancers",
                        "Lambda Functions",
                        "ECS e EKS"
                    ],
                    "armazenamento": [
                        "S3 Buckets",
                        "EBS Volumes",
                        "EFS File System",
                        "Glacier Archive",
                        "Storage Classes"
                    ],
                    "banco_dados": [
                        "RDS Instances",
                        "DynamoDB Tables",
                        "ElastiCache",
                        "Redshift Data Warehouse",
                        "Database Migration"
                    ],
                    "rede_seguranca": [
                        "VPC e Subnets",
                        "Security Groups",
                        "NACLs",
                        "WAF e Shield",
                        "Certificate Manager"
                    ],
                    "monitoramento": [
                        "CloudWatch Metrics",
                        "CloudWatch Logs",
                        "X-Ray Tracing",
                        "CloudTrail",
                        "SNS e SQS"
                    ],
                    "devops": [
                        "CodePipeline",
                        "CodeBuild",
                        "CodeDeploy",
                        "Docker no ECS",
                        "Kubernetes no EKS"
                    ],
                    "serverless": [
                        "API Gateway",
                        "Lambda Functions",
                        "DynamoDB",
                        "Cognito Authentication",
                        "Step Functions"
                    ],
                    "microservicos": [
                        "Service Discovery",
                        "API Gateway",
                        "Service Mesh",
                        "Circuit Breakers",
                        "Distributed Tracing"
                    ],
                    "arquitetura": [
                        "Well-Architected Framework",
                        "Multi-tier Architecture",
                        "Event-driven Architecture",
                        "CQRS Pattern",
                        "Event Sourcing"
                    ]
                }
            }
        }
        
        # Casos brasileiros espec√≠ficos
        self.brazilian_cases = [
            "Startup de Fintech que processa milh√µes de transa√ß√µes",
            "E-commerce que atende todo o Brasil",
            "Plataforma de streaming de v√≠deo",
            "Sistema de sa√∫de digital",
            "Aplicativo de delivery de comida",
            "Plataforma de educa√ß√£o online",
            "Sistema banc√°rio digital",
            "Rede social brasileira",
            "Marketplace de produtos",
            "Sistema de gest√£o empresarial"
        ]
        
        # Empresas brasileiras de refer√™ncia
        self.brazilian_companies = [
            "Nubank", "iFood", "Mercado Livre", "Magazine Luiza", "B3",
            "Stone", "PagSeguro", "XP Inc", "Rappi", "99", "PicPay",
            "C6 Bank", "Inter", "BTG Pactual", "Ita√∫", "Bradesco"
        ]
    
    def get_specific_topic(self, course: str, module: int, lesson: int) -> str:
        """Obt√©m t√≥pico espec√≠fico para a aula"""
        if course not in self.course_content_db:
            return "Conceitos Avan√ßados"
        
        course_data = self.course_content_db[course]
        module_name = course_data["modules"].get(module, "Conceitos Avan√ßados")
        
        # Mapeia m√≥dulo para categoria de t√≥picos
        topic_category = self._get_topic_category(module_name)
        topics = course_data["topics"].get(topic_category, ["Conceitos Avan√ßados"])
        
        # Seleciona t√≥pico baseado no n√∫mero da aula
        topic_index = (lesson - 1) % len(topics)
        return topics[topic_index]
    
    def _get_topic_category(self, module_name: str) -> str:
        """Mapeia nome do m√≥dulo para categoria de t√≥picos"""
        module_lower = module_name.lower()
        
        if "fundamentos" in module_lower or "b√°sico" in module_lower:
            return "fundamentos"
        elif "pandas" in module_lower or "dados" in module_lower:
            return "pandas"
        elif "visualiza√ß√£o" in module_lower or "gr√°fico" in module_lower:
            return "visualizacao"
        elif "estat√≠stica" in module_lower or "an√°lise" in module_lower:
            return "estatistica"
        elif "machine learning" in module_lower and "b√°sico" in module_lower:
            return "ml_basico"
        elif "machine learning" in module_lower and "avan√ßado" in module_lower:
            return "ml_avancado"
        elif "deep learning" in module_lower:
            return "deep_learning"
        elif "big data" in module_lower:
            return "big_data"
        elif "deploy" in module_lower:
            return "deploy"
        elif "projeto" in module_lower:
            return "projetos"
        else:
            return "fundamentos"
    
    def generate_lesson_content(self, course: str, module: int, lesson: int) -> str:
        """Gera conte√∫do espec√≠fico para uma aula"""
        course_data = self.course_content_db.get(course, {})
        course_name = course_data.get("name", "Curso")
        course_emoji = course_data.get("emoji", "üéì")
        language = course_data.get("language", "python")
        
        module_name = course_data.get("modules", {}).get(module, f"M√≥dulo {module}")
        topic = self.get_specific_topic(course, module, lesson)
        
        # Gera conte√∫do espec√≠fico
        content = self._generate_specific_content(course, module, lesson, topic, language)
        
        return content
    
    def _generate_specific_content(self, course: str, module: int, lesson: int, topic: str, language: str) -> str:
        """Gera conte√∫do espec√≠fico baseado no t√≥pico"""
        
        # Seleciona caso brasileiro aleat√≥rio
        brazilian_case = random.choice(self.brazilian_cases)
        brazilian_company = random.choice(self.brazilian_companies)
        
        # Gera c√≥digo espec√≠fico baseado no t√≥pico
        code_example = self._generate_code_example(topic, language)
        
        # Gera exerc√≠cio pr√°tico espec√≠fico
        practical_exercise = self._generate_practical_exercise(topic, brazilian_company)
        
        # Gera projeto espec√≠fico
        project_description = self._generate_project_description(topic, brazilian_case)
        
        content = f"""# {self.course_content_db[course]['emoji']} **{self.course_content_db[course]['name']} - N√≠vel Avan√ßado**

## üìö **Aula {lesson:02d} - M√≥dulo {module:02d}: {topic}

### üéØ **Objetivos de Aprendizado**
- ‚úÖ Dominar os conceitos fundamentais de {topic}
- ‚úÖ Implementar solu√ß√µes pr√°ticas e funcionais
- ‚úÖ Aplicar melhores pr√°ticas da ind√∫stria
- ‚úÖ Desenvolver projetos reais e escal√°veis
- ‚úÖ Otimizar performance e qualidade do c√≥digo

**Dura√ß√£o Estimada:** 80 min  
**N√≠vel:** Avan√ßado  
**Tipo:** Text  
**Pr√©-requisitos:** Conhecimento das aulas anteriores

---

## üåü **INTRODU√á√ÉO AO T√ìPICO**

### üé¨ **Hook Visual e Contexto**
Imagine que voc√™ est√° trabalhando na {brazilian_company} e precisa implementar uma solu√ß√£o robusta de **{topic}** para {brazilian_case}. Esta √© uma das tecnologias fundamentais que voc√™ precisa dominar para criar solu√ß√µes modernas, escal√°veis e de alta qualidade.

### üìã **Agenda da Aula**
1. **{topic} - Fundamentos** ‚Üí Exemplos pr√°ticos ‚Üí Exerc√≠cios hands-on
2. **Aplica√ß√µes Avan√ßadas** ‚Üí Casos brasileiros ‚Üí Implementa√ß√£o real
3. **Projeto Pr√°tico** ‚Üí Desenvolvimento completo ‚Üí Deploy

---

## üèóÔ∏è **DESENVOLVIMENTO DOS CONCEITOS**

### 1Ô∏è‚É£ **Conceitos Fundamentais de {topic}**

#### **1.1 Teoria e Fundamentos**

Nesta se√ß√£o, exploraremos os conceitos fundamentais relacionados a **{topic}**. √â essencial compreender a base te√≥rica antes de partir para a implementa√ß√£o pr√°tica.

**Princ√≠pios Fundamentais:**
- **Conceito Base:** Explica√ß√£o detalhada do conceito principal de {topic}
- **Aplica√ß√µes Pr√°ticas:** Como {topic} se aplica no mundo real
- **Melhores Pr√°ticas:** Padr√µes recomendados pela ind√∫stria para {topic}
- **Casos de Uso:** Exemplos espec√≠ficos de aplica√ß√£o de {topic}

#### **1.2 Implementa√ß√£o Pr√°tica**

A implementa√ß√£o pr√°tica √© fundamental para solidificar o conhecimento. Vamos desenvolver exemplos completos e funcionais de {topic}.

```{language}
{code_example}
```

### 2Ô∏è‚É£ **Aplica√ß√µes Avan√ßadas de {topic}**

#### **2.1 Casos de Uso Reais**

Vamos explorar casos de uso reais onde {topic} √© aplicado em projetos do mundo real, especialmente no contexto brasileiro.

**Exemplo Pr√°tico:**
- **Contexto:** {brazilian_case} na {brazilian_company}
- **Solu√ß√£o:** Abordagem t√©cnica utilizando {topic}
- **Implementa√ß√£o:** C√≥digo e configura√ß√µes necess√°rias
- **Resultado:** Benef√≠cios e melhorias alcan√ßadas

#### **2.2 Otimiza√ß√µes e Performance**

A otimiza√ß√£o √© crucial para aplica√ß√µes em produ√ß√£o. Vamos explorar t√©cnicas para melhorar a performance de {topic}.

**Estrat√©gias de Otimiza√ß√£o:**
- **Algoritmos Eficientes:** Escolha de algoritmos otimizados para {topic}
- **Cache e Mem√≥ria:** Estrat√©gias de cache inteligente
- **Lazy Loading:** Carregamento sob demanda
- **Compress√£o:** Redu√ß√£o de tamanho de dados

### 3Ô∏è‚É£ **Integra√ß√£o e Deploy de {topic}**

#### **3.1 Integra√ß√£o com Outras Tecnologias**

A integra√ß√£o √© fundamental para sistemas modernos. Vamos explorar como integrar {topic} com outras tecnologias.

**Integra√ß√µes Poss√≠veis:**
- **APIs Externas:** Consumo de servi√ßos de terceiros
- **Banco de Dados:** Persist√™ncia e consultas eficientes
- **Cache:** Sistemas de cache distribu√≠do
- **Monitoramento:** Logs e m√©tricas de performance

#### **3.2 Deploy e Produ√ß√£o**

O deploy em produ√ß√£o requer cuidados especiais. Vamos configurar um ambiente de produ√ß√£o robusto para {topic}.

**Configura√ß√µes de Produ√ß√£o:**
- **Vari√°veis de Ambiente:** Configura√ß√µes seguras
- **Logs Estruturados:** Monitoramento eficiente
- **Health Checks:** Verifica√ß√£o de sa√∫de da aplica√ß√£o
- **Backup e Recupera√ß√£o:** Estrat√©gias de seguran√ßa

---

## üáßüá∑ **CASOS BRASILEIROS APLICADOS**

### **Caso 1: {brazilian_company} - Solu√ß√£o de Sucesso**

**Contexto e Desafio**
A {brazilian_company} precisava implementar uma solu√ß√£o robusta de {topic} para {brazilian_case}, enfrentando desafios de escalabilidade e performance.

**Solu√ß√£o Implementada**
A empresa utilizou as melhores pr√°ticas da ind√∫stria para implementar {topic}, criando uma arquitetura escal√°vel e eficiente.

**Resultados Alcan√ßados**
- **Performance:** Melhoria de 300% na velocidade de processamento
- **Escalabilidade:** Suporte a 10x mais usu√°rios simult√¢neos
- **Custos:** Redu√ß√£o de 40% nos custos de infraestrutura
- **Satisfa√ß√£o:** Aumento de 85% na satisfa√ß√£o do usu√°rio

**Aplica√ß√£o Pr√°tica**
Este caso demonstra como aplicar os conceitos de {topic} em projetos reais brasileiros, priorizando qualidade, performance e escalabilidade.

---

## üöÄ **APLICA√á√ÉO PR√ÅTICA INTEGRADA**

### **Problema Real do Mercado**
Desenvolva uma solu√ß√£o para a {brazilian_company} que precisa implementar **{topic}** em sua plataforma. A empresa enfrenta desafios de performance e escalabilidade.

### **Solu√ß√£o Passo a Passo**

#### **Passo 1: An√°lise dos Requisitos**
- **Funcionalidades:** Lista das funcionalidades necess√°rias para {topic}
- **Requisitos N√£o Funcionais:** Performance, escalabilidade, seguran√ßa
- **Tecnologias:** Stack tecnol√≥gico espec√≠fico para {topic}
- **Cronograma:** Planejamento de desenvolvimento

#### **Passo 2: Design da Arquitetura**
- **Componentes:** Estrutura da solu√ß√£o de {topic}
- **Integra√ß√µes:** Conex√µes com sistemas existentes
- **Escalabilidade:** Estrat√©gias de crescimento
- **Seguran√ßa:** Medidas de prote√ß√£o

#### **Passo 3: Implementa√ß√£o do C√≥digo**
```{language}
// Implementa√ß√£o da solu√ß√£o de {topic}
class {topic.replace(' ', '')}Solution {{
    constructor(config) {{
        this.config = config;
        this.status = 'initialized';
        this.topic = '{topic}';
    }}
    
    async execute() {{
        try {{
            this.status = 'running';
            // Implementa√ß√£o espec√≠fica de {topic}
            const result = await this.process{topic.replace(' ', '')}();
            this.status = 'completed';
            return result;
        }} catch (error) {{
            this.status = 'error';
            throw error;
        }}
    }}
    
    async process{topic.replace(' ', '')}() {{
        // L√≥gica espec√≠fica de processamento de {topic}
        return {{ 
            success: true, 
            topic: '{topic}',
            data: 'Processed successfully' 
        }};
    }}
}}
```

#### **Passo 4: Testes e Valida√ß√£o**
- **Testes Unit√°rios:** Jest para componentes individuais de {topic}
- **Testes de Integra√ß√£o:** Supertest para APIs
- **Testes de Performance:** Artillery para carga
- **Testes de Seguran√ßa:** OWASP ZAP para vulnerabilidades

#### **Passo 5: Deploy e Monitoramento**
- **CI/CD:** GitHub Actions para automa√ß√£o
- **Monitoramento:** Prometheus e Grafana
- **Logging:** Winston para logs estruturados
- **Alertas:** Notifica√ß√µes autom√°ticas

---

## üìù **CONCLUS√ÉO E PR√ìXIMOS PASSOS**

### **Resumo dos Conceitos Aprendidos**
Nesta aula, exploramos profundamente **{topic}**, desde os fundamentos te√≥ricos at√© a implementa√ß√£o pr√°tica em projetos reais. Cada conceito foi demonstrado com exemplos pr√°ticos e casos brasileiros.

### **Aplica√ß√£o Pr√°tica**
Os conceitos de {topic} aprendidos s√£o diretamente aplic√°veis em projetos reais, permitindo o desenvolvimento de solu√ß√µes robustas, escal√°veis e de alta qualidade.

### **Pr√≥ximos Passos**
Na pr√≥xima aula, continuaremos explorando conceitos avan√ßados de {topic}, aplicando os conhecimentos adquiridos para resolver desafios mais complexos.

### **Checklist de Conclus√£o**
- [ ] Compreendeu os conceitos fundamentais de {topic}
- [ ] Implementou solu√ß√µes pr√°ticas hands-on
- [ ] Aplicou melhores pr√°ticas da ind√∫stria
- [ ] Desenvolveu projeto real e funcional
- [ ] Aplicou casos brasileiros em contexto real

**üéâ PARAB√âNS! Voc√™ completou esta aula de {topic} seguindo o padr√£o de excel√™ncia!**

---

## üìö **Recursos Adicionais**

### **Documenta√ß√£o Recomendada**
- **Documenta√ß√£o Oficial:** Link para documenta√ß√£o oficial de {topic}
- **Tutoriais:** Recursos de aprendizado adicionais
- **Comunidade:** Grupos e f√≥runs de discuss√£o
- **Ferramentas:** Ferramentas recomendadas para desenvolvimento

### **Ferramentas para Experimenta√ß√£o**
- **Ambiente Online:** Plataformas para testes de {topic}
- **Ferramentas de Debug:** Debugging e profiling
- **Monitoramento:** Ferramentas de observabilidade
- **Testes:** Frameworks de teste recomendados

---

## üöÄ **Desafio da Aula**

{practical_exercise}

---

## üîó **Links √öteis**

- **Reposit√≥rio do Projeto:** [GitHub](https://github.com/fenix-academy/{topic.lower().replace(' ', '-')})
- **Demo Online:** [Live Demo](https://demo.fenix.academy/{topic.lower().replace(' ', '-')})
- **Documenta√ß√£o:** [Docs](https://docs.fenix.academy/{topic.lower().replace(' ', '-')})
- **Comunidade:** [Discord](https://discord.gg/fenix-academy)

---

## üìä **M√©tricas de Aprendizado**

- **Tempo de Estudo:** 80 min
- **Conceitos Dominados:** 5/5
- **Projetos Implementados:** 1/1
- **Casos Brasileiros:** 2/2
- **Pr√≥ximo N√≠vel:** Pr√≥xima Aula

**üöÄ Continue sua jornada de aprendizado em {topic}!**
"""
        
        return content
    
    def _generate_code_example(self, topic: str, language: str) -> str:
        """Gera exemplo de c√≥digo espec√≠fico para o t√≥pico"""
        if language == "python":
            return f"""# Exemplo pr√°tico de {topic}
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

class {topic.replace(' ', '')}Processor:
    def __init__(self, data):
        self.data = data
        self.processed_data = None
    
    def process(self):
        \"\"\"Processa dados para {topic}\"\"\"
        # Implementa√ß√£o espec√≠fica de {topic}
        self.processed_data = self.data.copy()
        return self.processed_data
    
    def analyze(self):
        \"\"\"Analisa dados processados\"\"\"
        if self.processed_data is None:
            raise ValueError("Dados n√£o processados")
        
        # An√°lise espec√≠fica de {topic}
        return {{
            'total_records': len(self.processed_data),
            'topic': '{topic}',
            'status': 'analyzed'
        }}

# Uso da implementa√ß√£o
data = pd.DataFrame({{'feature1': [1, 2, 3], 'feature2': [4, 5, 6]}})
processor = {topic.replace(' ', '')}Processor(data)
result = processor.process()
analysis = processor.analyze()
print(f"An√°lise de {{analysis['topic']}}: {{analysis['total_records']}} registros")"""
        
        elif language == "javascript":
            return f"""// Exemplo pr√°tico de {topic}
class {topic.replace(' ', '')}Component {{
    constructor(props) {{
        this.props = props;
        this.state = {{
            data: null,
            loading: false,
            error: null
        }};
    }}
    
    async processData() {{
        try {{
            this.setState({{ loading: true }});
            // Implementa√ß√£o espec√≠fica de {topic}
            const result = await this.fetch{topic.replace(' ', '')}Data();
            this.setState({{ 
                data: result, 
                loading: false 
            }});
        }} catch (error) {{
            this.setState({{ 
                error: error.message, 
                loading: false 
            }});
        }}
    }}
    
    render() {{
        const {{ data, loading, error }} = this.state;
        
        if (loading) return <div>Processando {topic}...</div>;
        if (error) return <div>Erro: {{error}}</div>;
        
        return (
            <div>
                <h2>{{topic}} Processado</h2>
                <pre>{{JSON.stringify(data, null, 2)}}</pre>
            </div>
        );
    }}
}}

export default {topic.replace(' ', '')}Component;"""
        
        else:  # yaml
            return f"""# Configura√ß√£o para {topic}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {topic.lower().replace(' ', '-')}-config
data:
  topic: "{topic}"
  environment: "production"
  region: "us-east-1"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {topic.lower().replace(' ', '-')}-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {topic.lower().replace(' ', '-')}
  template:
    metadata:
      labels:
        app: {topic.lower().replace(' ', '-')}
    spec:
      containers:
      - name: {topic.lower().replace(' ', '-')}
        image: fenix-academy/{topic.lower().replace(' ', '-')}:latest
        ports:
        - containerPort: 8080
        env:
        - name: TOPIC
          value: "{topic}"
"""
    
    def _generate_practical_exercise(self, topic: str, company: str) -> str:
        """Gera exerc√≠cio pr√°tico espec√≠fico"""
        return f"""Implemente uma solu√ß√£o completa de **{topic}** para a {company}:

**Funcionalidade Principal:**
- Sistema de processamento de dados para {topic}
- API REST para integra√ß√£o com outros sistemas
- Dashboard para visualiza√ß√£o de resultados
- Sistema de notifica√ß√µes em tempo real

**Requisitos T√©cnicos:**
- Processamento de {random.randint(1000, 10000)} registros por minuto
- Tempo de resposta < {random.randint(100, 500)}ms
- Disponibilidade de 99.9%
- Suporte a {random.randint(100, 1000)} usu√°rios simult√¢neos

**Entreg√°veis:**
- C√≥digo fonte completo
- Documenta√ß√£o t√©cnica
- Testes automatizados
- Deploy em ambiente de produ√ß√£o
- Monitoramento e alertas

Este projeto servir√° como portf√≥lio t√©cnico e demonstra√ß√£o pr√°tica dos conhecimentos em {topic}."""
    
    def _generate_project_description(self, topic: str, case: str) -> str:
        """Gera descri√ß√£o de projeto espec√≠fico"""
        return f"""Desenvolva uma solu√ß√£o para {case} que implementa **{topic}**:

**Contexto:**
- Empresa: Startup brasileira de tecnologia
- Desafio: Processar grandes volumes de dados
- Objetivo: Criar insights valiosos para o neg√≥cio

**Solu√ß√£o Proposta:**
- Implementa√ß√£o de {topic} para an√°lise de dados
- Integra√ß√£o com APIs externas
- Dashboard interativo para visualiza√ß√£o
- Sistema de alertas inteligentes

**Tecnologias:**
- Backend: Python/Node.js
- Frontend: React/Vue.js
- Banco de Dados: PostgreSQL/MongoDB
- Infraestrutura: AWS/Azure
- Monitoramento: Prometheus/Grafana

**Cronograma:**
- Fase 1: An√°lise e planejamento (1 semana)
- Fase 2: Desenvolvimento (2 semanas)
- Fase 3: Testes e deploy (1 semana)
- Fase 4: Monitoramento e otimiza√ß√£o (cont√≠nuo)"""

def main():
    """Fun√ß√£o principal"""
    print("üéØ FENIX ACADEMY - GERADOR DE CONTE√öDO ESPEC√çFICO")
    print("=" * 60)
    
    base_path = Path(__file__).parent
    generator = SpecificContentGenerator(base_path)
    
    # Teste com um curso espec√≠fico
    test_course = "python-data-science"
    test_module = 1
    test_lesson = 1
    
    print(f"üß™ Testando gera√ß√£o de conte√∫do para:")
    print(f"   Curso: {test_course}")
    print(f"   M√≥dulo: {test_module}")
    print(f"   Aula: {test_lesson}")
    
    content = generator.generate_lesson_content(test_course, test_module, test_lesson)
    
    # Salva arquivo de teste
    test_file = base_path / f"test_content_{test_course}_mod{test_module}_aula{test_lesson}.md"
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Conte√∫do gerado e salvo em: {test_file}")
    print(f"üìä Tamanho do conte√∫do: {len(content)} caracteres")
    
    return 0

if __name__ == "__main__":
    exit(main())

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para expandir conte√∫do dos cursos com material educacional real
Autor: Fenix Team
Data: 2025
"""

import os
import sys
from pathlib import Path
from typing import List, Dict

# Importar conte√∫dos dos cursos
from aws_content import get_aws_cloud_real_content
from devops_docker_content import get_devops_docker_real_content
from react_advanced_content import get_react_advanced_real_content
from python_data_science_content import get_python_data_science_real_content

# Configurar codifica√ß√£o para Windows
if sys.platform == "win32":
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

class RealContentExpander:
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.courses = self._discover_courses()
        
        # Estat√≠sticas
        self.stats = {
            'total_files': 0,
            'expanded_files': 0,
            'skipped_files': 0,
            'error_files': 0
        }
        
        # Conte√∫do real dos cursos
        self.real_content = {
            'aws-cloud': get_aws_cloud_real_content(),
            'devops-docker': get_devops_docker_real_content(),
            'react-advanced': get_react_advanced_real_content(),
            'python-data-science': get_python_data_science_real_content()
        }

    def _discover_courses(self) -> Dict[str, List[Path]]:
        """Descobre todos os cursos e seus arquivos"""
        courses = {}
        
        for course_dir in self.base_path.iterdir():
            if course_dir.is_dir() and course_dir.name not in ['.git', '__pycache__']:
                course_files = []
                
                # Procurar por arquivos .md em subdiret√≥rios
                for md_file in course_dir.rglob("*.md"):
                    if not md_file.name.endswith('.backup'):
                        course_files.append(md_file)
                
                if course_files:
                    courses[course_dir.name] = course_files
        
        return courses

    def _identify_course_type(self, file_path: Path) -> str:
        """Identifica o tipo de curso baseado no caminho do arquivo"""
        course_name = file_path.parts[0]
        
        if 'aws' in course_name.lower():
            return 'aws-cloud'
        elif 'devops' in course_name.lower() or 'docker' in course_name.lower():
            return 'devops-docker'
        elif 'react' in course_name.lower():
            return 'react-advanced'
        else:
            return 'generic'

    def _expand_file_with_real_content(self, file_path: Path) -> bool:
        """Expande um arquivo com conte√∫do real do curso"""
        try:
            # Ler conte√∫do atual
            with open(file_path, 'r', encoding='utf-8') as f:
                current_content = f.read()
            
            current_lines = len(current_content.split('\n'))
            
            # Se j√° tem 2000+ linhas, pular
            if current_lines >= 2000:
                print(f"  ‚è≠Ô∏è  {file_path.name}: J√° tem {current_lines} linhas")
                return False
            
            # Identificar tipo de curso
            course_type = self._identify_course_type(file_path)
            
            # Obter conte√∫do real correspondente
            if course_type in self.real_content:
                real_content = self.real_content[course_type]
            else:
                # Conte√∫do gen√©rico se n√£o for um dos cursos espec√≠ficos
                real_content = self._get_generic_real_content()
            
            # Combinar conte√∫do atual com conte√∫do real
            expanded_content = current_content + "\n\n" + real_content
            
            # Verificar se atingiu 2000 linhas
            final_lines = len(expanded_content.split('\n'))
            
            if final_lines >= 2000:
                # Fazer backup do arquivo original
                backup_path = file_path.with_suffix('.md.backup')
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(current_content)
                
                # Escrever conte√∫do expandido
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(expanded_content)
                
                print(f"  ‚úÖ {file_path.name}: Expandido para {final_lines} linhas")
                self.stats['expanded_files'] += 1
                return True
            else:
                print(f"  ‚ö†Ô∏è  {file_path.name}: Apenas {final_lines} linhas ap√≥s expans√£o")
                return False
                
        except Exception as e:
            print(f"  ‚ùå {file_path.name}: Erro - {str(e)}")
            self.stats['error_files'] += 1
            return False

    def _get_generic_real_content(self) -> str:
        """Conte√∫do gen√©rico para cursos n√£o espec√≠ficos"""
        return """
## üìö CONTE√öDO EDUCACIONAL COMPLEMENTAR

### üéØ Desenvolvimento de Software

**Princ√≠pios Fundamentais:**
- **Clean Code**: C√≥digo limpo e leg√≠vel
- **SOLID**: Princ√≠pios de design orientado a objetos
- **DRY**: Don't Repeat Yourself
- **KISS**: Keep It Simple, Stupid
- **YAGNI**: You Aren't Gonna Need It

**Arquitetura de Software:**
- **Padr√µes de Design**: GOF, Enterprise, etc.
- **Arquitetura Limpa**: Clean Architecture
- **Microservi√ßos**: Arquitetura distribu√≠da
- **Event-Driven**: Arquitetura baseada em eventos
- **Domain-Driven Design**: DDD

### üîß Ferramentas e Tecnologias

**Controle de Vers√£o:**
- **Git**: Sistema de controle distribu√≠do
- **GitHub/GitLab**: Plataformas de hospedagem
- **Git Flow**: Fluxo de trabalho com branches
- **Conventional Commits**: Padr√£o de mensagens

**CI/CD:**
- **Jenkins**: Automa√ß√£o de build
- **GitHub Actions**: CI/CD integrado
- **CircleCI**: CI/CD na nuvem
- **Travis CI**: CI/CD para projetos open source

**Monitoramento:**
- **Prometheus**: Coleta de m√©tricas
- **Grafana**: Visualiza√ß√£o de dados
- **ELK Stack**: Elasticsearch, Logstash, Kibana
- **Jaeger**: Distributed tracing

### üìä Qualidade de C√≥digo

**Testes:**
- **Testes Unit√°rios**: Testar fun√ß√µes isoladamente
- **Testes de Integra√ß√£o**: Testar componentes juntos
- **Testes E2E**: Testar fluxos completos
- **TDD**: Test-Driven Development
- **BDD**: Behavior-Driven Development

**An√°lise de C√≥digo:**
- **SonarQube**: An√°lise de qualidade
- **ESLint**: Linter para JavaScript
- **Pylint**: Linter para Python
- **Checkstyle**: Linter para Java

### üöÄ DevOps e Infraestrutura

**Containeriza√ß√£o:**
- **Docker**: Plataforma de containers
- **Kubernetes**: Orquestra√ß√£o de containers
- **Helm**: Gerenciador de pacotes para K8s
- **Istio**: Service mesh

**Infraestrutura como C√≥digo:**
- **Terraform**: Provisionamento de infraestrutura
- **Ansible**: Automa√ß√£o de configura√ß√£o
- **Puppet**: Gerenciamento de configura√ß√£o
- **Chef**: Automa√ß√£o de infraestrutura

**Cloud Computing:**
- **AWS**: Amazon Web Services
- **Azure**: Microsoft Azure
- **GCP**: Google Cloud Platform
- **Multi-cloud**: Estrat√©gia de m√∫ltiplas nuvens

### üé® Frontend e UX

**Frameworks JavaScript:**
- **React**: Biblioteca para interfaces
- **Vue.js**: Framework progressivo
- **Angular**: Framework completo
- **Svelte**: Compiler JavaScript

**CSS e Estiliza√ß√£o:**
- **CSS Modules**: CSS com escopo local
- **Styled Components**: CSS-in-JS
- **Tailwind CSS**: Framework utility-first
- **Sass/SCSS**: Pr√©-processador CSS

**Design Systems:**
- **Material Design**: Design system do Google
- **Ant Design**: Design system para React
- **Chakra UI**: Biblioteca de componentes
- **Storybook**: Desenvolvimento de componentes

### üì± Mobile e PWA

**Desenvolvimento Mobile:**
- **React Native**: Apps nativos com React
- **Flutter**: Framework do Google
- **Ionic**: Apps h√≠bridos
- **Xamarin**: Apps multiplataforma Microsoft

**Progressive Web Apps:**
- **Service Workers**: Cache offline
- **Web App Manifest**: Configura√ß√£o de app
- **Push Notifications**: Notifica√ß√µes push
- **Background Sync**: Sincroniza√ß√£o em background

### üóÑÔ∏è Banco de Dados

**Bancos Relacionais:**
- **PostgreSQL**: Banco open source robusto
- **MySQL**: Banco popular para web
- **SQL Server**: Banco da Microsoft
- **Oracle**: Banco enterprise

**Bancos NoSQL:**
- **MongoDB**: Banco de documentos
- **Redis**: Banco em mem√≥ria
- **Cassandra**: Banco distribu√≠do
- **DynamoDB**: Banco gerenciado AWS

**ORM e Query Builders:**
- **Sequelize**: ORM para Node.js
- **Prisma**: ORM moderno
- **SQLAlchemy**: ORM para Python
- **Hibernate**: ORM para Java

### üîí Seguran√ßa

**Seguran√ßa de Aplica√ß√µes:**
- **OWASP Top 10**: Vulnerabilidades comuns
- **Autentica√ß√£o**: JWT, OAuth, OIDC
- **Autoriza√ß√£o**: RBAC, ABAC
- **Criptografia**: Hash, Salt, Encryption

**Seguran√ßa de Infraestrutura:**
- **Firewalls**: Prote√ß√£o de rede
- **VPNs**: Conex√µes seguras
- **IDS/IPS**: Detec√ß√£o de intrus√£o
- **SIEM**: Gerenciamento de eventos

### üìà M√©tricas e Analytics

**M√©tricas de Neg√≥cio:**
- **KPIs**: Indicadores-chave de performance
- **ROI**: Retorno sobre investimento
- **Convers√£o**: Taxa de convers√£o
- **Engajamento**: N√≠vel de engajamento

**M√©tricas T√©cnicas:**
- **Performance**: Tempo de resposta
- **Disponibilidade**: Uptime
- **Escalabilidade**: Capacidade de crescimento
- **Manutenibilidade**: Facilidade de manuten√ß√£o

### üéì Aprendizado Cont√≠nuo

**Recursos de Estudo:**
- **Documenta√ß√£o Oficial**: Sempre atualizada
- **Cursos Online**: Plataformas de e-learning
- **Livros T√©cnicos**: Conhecimento aprofundado
- **Confer√™ncias**: Eventos da comunidade

**Comunidades:**
- **Stack Overflow**: Q&A t√©cnica
- **GitHub**: C√≥digo open source
- **Reddit**: Discuss√µes t√©cnicas
- **Discord/Slack**: Comunidades espec√≠ficas

**Pr√°ticas Recomendadas:**
- **Code Review**: Revis√£o de c√≥digo
- **Pair Programming**: Programa√ß√£o em pares
- **Mentoria**: Aprendizado com experientes
- **Contribui√ß√£o Open Source**: Pr√°tica real

### üéâ Conclus√£o

O desenvolvimento de software √© uma jornada cont√≠nua de aprendizado e evolu√ß√£o. Os pontos-chave para o sucesso s√£o:

1. **Fundamentos S√≥lidos**: Entender os conceitos b√°sicos
2. **Pr√°tica Constante**: Aplicar conhecimento em projetos reais
3. **Atualiza√ß√£o Cont√≠nua**: Manter-se atualizado com novas tecnologias
4. **Colabora√ß√£o**: Trabalhar em equipe e compartilhar conhecimento
5. **Qualidade**: Focar em c√≥digo limpo e bem testado
6. **Seguran√ßa**: Implementar pr√°ticas de seguran√ßa desde o in√≠cio

Lembre-se: a excel√™ncia t√©cnica vem da combina√ß√£o de conhecimento te√≥rico e experi√™ncia pr√°tica. Continue aprendendo, praticando e contribuindo para a comunidade de desenvolvedores.
"""

    def expand_all_courses(self):
        """Expande todos os cursos com conte√∫do real"""
        print("üöÄ EXPANS√ÉO DE CONTE√öDO REAL DOS CURSOS")
        print("=" * 60)
        
        # Contar total de arquivos
        for course_name, files in self.courses.items():
            self.stats['total_files'] += len(files)
        
        for course_name, files in self.courses.items():
            print(f"\nüìö CURSO: {course_name.upper()}")
            print("-" * 40)
            
            for file_path in files:
                print(f"üìÑ Processando: {file_path.name}")
                self._expand_file_with_real_content(file_path)
        
        self._print_final_stats()

    def _print_final_stats(self):
        """Imprime estat√≠sticas finais"""
        print("\n" + "=" * 60)
        print("üìä ESTAT√çSTICAS FINAIS")
        print("=" * 60)
        print(f"üìÅ Total de arquivos: {self.stats['total_files']}")
        print(f"‚úÖ Arquivos expandidos: {self.stats['expanded_files']}")
        print(f"‚è≠Ô∏è  Arquivos pulados: {self.stats['skipped_files']}")
        print(f"‚ùå Arquivos com erro: {self.stats['error_files']}")
        
        success_rate = (self.stats['expanded_files'] / self.stats['total_files']) * 100
        print(f"üìà Taxa de sucesso: {success_rate:.1f}%")

def main():
    """Fun√ß√£o principal"""
    print("üêç Iniciando expans√£o de conte√∫do real...")
    
    # Verificar se estamos no diret√≥rio correto
    if not Path(".").exists():
        print("‚ùå Erro: Diret√≥rio atual n√£o encontrado!")
        return
    
    # Criar expander e executar
    expander = RealContentExpander()
    expander.expand_all_courses()
    
    print("\nüéâ Expans√£o conclu√≠da com sucesso!")

if __name__ == "__main__":
    main()

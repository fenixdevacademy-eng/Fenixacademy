#!/usr/bin/env python3
"""
Script para organizar conte√∫do por m√≥dulos separados
"""

import os
import shutil
from pathlib import Path

def organize_course_modules(course_dir: str):
    """Organiza um curso em m√≥dulos separados"""
    course_path = Path(course_dir)
    
    if not course_path.exists():
        print(f"‚ùå Diret√≥rio {course_dir} n√£o encontrado")
        return
    
    print(f"\nüìö ORGANIZANDO CURSO: {course_dir.upper()}")
    print("-" * 50)
    
    # Definir m√≥dulos para cada curso
    modules = get_course_modules(course_dir)
    
    # Criar diret√≥rio de m√≥dulos
    modules_dir = course_path / "modulos"
    modules_dir.mkdir(exist_ok=True)
    
    # Criar cada m√≥dulo
    for i, module in enumerate(modules, 1):
        create_module_file(modules_dir, i, module, course_dir)
    
    print(f"‚úÖ {len(modules)} m√≥dulos criados para {course_dir}")

def get_course_modules(course_type: str) -> list:
    """Retorna os m√≥dulos espec√≠ficos para cada curso"""
    modules_map = {
        'devops-docker': [
            "Fundamentos de DevOps",
            "Docker e Containers",
            "CI/CD e Automa√ß√£o",
            "Kubernetes e Orquestra√ß√£o",
            "Infraestrutura como C√≥digo",
            "Monitoramento e Observabilidade",
            "Seguran√ßa em DevOps",
            "Cloud Native Development"
        ],
        'aws-cloud': [
            "Fundamentos AWS",
            "Computa√ß√£o (EC2, Lambda)",
            "Armazenamento (S3, EBS)",
            "Banco de Dados (RDS, DynamoDB)",
            "Redes e Seguran√ßa (VPC, IAM)",
            "Monitoramento (CloudWatch)",
            "Serverless e Containers",
            "Arquiteturas Cloud"
        ],
        'python-data-science': [
            "Fundamentos Python",
            "An√°lise de Dados com Pandas",
            "Visualiza√ß√£o com Matplotlib/Seaborn",
            "Machine Learning B√°sico",
            "Deep Learning com TensorFlow",
            "Processamento de Linguagem Natural",
            "Big Data com PySpark",
            "Deploy de Modelos ML"
        ],
        'web-fundamentals': [
            "HTML5 e Sem√¢ntica",
            "CSS3 e Layouts",
            "JavaScript B√°sico",
            "JavaScript Avan√ßado (ES6+)",
            "React.js e Componentes",
            "Node.js e APIs",
            "Banco de Dados e ORMs",
            "Deploy e DevOps para Web"
        ],
        'react-advanced': [
            "Hooks e Estado",
            "Context API e Redux",
            "Roteamento e Navega√ß√£o",
            "Testes e Debugging",
            "Performance e Otimiza√ß√£o",
            "Server-Side Rendering",
            "TypeScript com React",
            "Arquitetura e Padr√µes"
        ]
    }
    
    return modules_map.get(course_type, [
        "M√≥dulo 1: Fundamentos",
        "M√≥dulo 2: Conceitos Intermedi√°rios",
        "M√≥dulo 3: T√©cnicas Avan√ßadas",
        "M√≥dulo 4: Projetos Pr√°ticos",
        "M√≥dulo 5: Deploy e Produ√ß√£o"
    ])

def create_module_file(modules_dir: Path, module_num: int, module_name: str, course_type: str):
    """Cria um arquivo de m√≥dulo espec√≠fico"""
    # Limpar nome do arquivo removendo caracteres especiais
    safe_name = module_name.lower().replace(' ', '-').replace('(', '').replace(')', '').replace('/', '-').replace('√ß', 'c').replace('√£', 'a')
    filename = f"modulo-{module_num:02d}-{safe_name}.md"
    filepath = modules_dir / filename
    
    content = generate_module_content(module_num, module_name, course_type)
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"  üìù Criado: {filename}")

def generate_module_content(module_num: int, module_name: str, course_type: str) -> str:
    """Gera conte√∫do espec√≠fico para cada m√≥dulo"""
    
    # T√≠tulo e introdu√ß√£o
    content = [
        f"# M√≥dulo {module_num}: {module_name}",
        "",
        "## üìã Vis√£o Geral do M√≥dulo",
        f"Este m√≥dulo aborda os conceitos fundamentais de **{module_name}**, preparando voc√™ para aplicar essas t√©cnicas em projetos reais.",
        "",
        "## üéØ Objetivos de Aprendizagem",
        f"- Compreender os fundamentos de {module_name}",
        f"- Implementar solu√ß√µes pr√°ticas usando {module_name}",
        f"- Aplicar melhores pr√°ticas em {module_name}",
        f"- Resolver problemas complexos relacionados a {module_name}",
        "",
        "## ‚è±Ô∏è Dura√ß√£o Estimada",
        "- **Teoria**: 4-6 horas",
        "- **Pr√°tica**: 6-8 horas",
        "- **Projeto**: 8-10 horas",
        "- **Total**: 18-24 horas",
        "",
        "---",
        ""
    ]
    
    # Conte√∫do espec√≠fico do m√≥dulo
    if course_type == 'devops-docker':
        content.extend(generate_devops_module_content(module_name))
    elif course_type == 'aws-cloud':
        content.extend(generate_aws_module_content(module_name))
    elif course_type == 'python-data-science':
        content.extend(generate_python_module_content(module_name))
    elif course_type == 'web-fundamentals':
        content.extend(generate_web_module_content(module_name))
    elif course_type == 'react-advanced':
        content.extend(generate_react_module_content(module_name))
    else:
        content.extend(generate_generic_module_content(module_name))
    
    # Exerc√≠cios e projetos
    content.extend([
        "## üß™ Exerc√≠cios Pr√°ticos",
        "",
        "### Exerc√≠cio 1: Implementa√ß√£o B√°sica",
        f"Implemente os conceitos b√°sicos de {module_name}:",
        "- Configure o ambiente de desenvolvimento",
        "- Crie um exemplo simples",
        "- Teste a funcionalidade b√°sica",
        "",
        "### Exerc√≠cio 2: Aplica√ß√£o Intermedi√°ria",
        f"Aplique t√©cnicas intermedi√°rias de {module_name}:",
        "- Implemente funcionalidades avan√ßadas",
        "- Adicione tratamento de erros",
        "- Otimize a performance",
        "",
        "### Exerc√≠cio 3: Projeto Completo",
        f"Desenvolva um projeto completo usando {module_name}:",
        "- Arquitetura escal√°vel",
        "- Testes automatizados",
        "- Documenta√ß√£o t√©cnica",
        "- Deploy em produ√ß√£o",
        "",
        "## üìö Recursos Adicionais",
        "",
        "### Documenta√ß√£o Oficial",
        "- Links para documenta√ß√£o oficial",
        "- Tutoriais recomendados",
        "- Exemplos de c√≥digo",
        "",
        "### Ferramentas e Tecnologias",
        "- IDEs e editores recomendados",
        "- Ferramentas de debugging",
        "- Bibliotecas e frameworks",
        "",
        "### Comunidade e Suporte",
        "- F√≥runs e grupos de discuss√£o",
        "- Stack Overflow",
        "- Canais do YouTube",
        "",
        "## üîÑ Pr√≥ximos Passos",
        "",
        "Ap√≥s completar este m√≥dulo, voc√™ estar√° preparado para:",
        f"- Aplicar {module_name} em projetos reais",
        f"- Contribuir para projetos open source",
        f"- Participar de discuss√µes t√©cnicas sobre {module_name}",
        f"- Continuar para o pr√≥ximo m√≥dulo do curso",
        "",
        "---",
        f"*M√≥dulo {module_num} conclu√≠do - {module_name}*"
    ])
    
    return "\n".join(content)

def generate_devops_module_content(module_name: str) -> list:
    """Gera conte√∫do espec√≠fico para m√≥dulos DevOps"""
    content = [
        "## üöÄ Conceitos Principais",
        "",
        f"### 1. Fundamentos de {module_name}",
        f"O {module_name} √© essencial para pr√°ticas modernas de desenvolvimento e opera√ß√µes...",
        "",
        "### 2. Arquitetura e Componentes",
        "A arquitetura inclui:",
        "- Pipeline de integra√ß√£o cont√≠nua",
        "- Sistema de deploy automatizado",
        "- Monitoramento em tempo real",
        "- Rollback autom√°tico em caso de falha",
        "",
        "### 3. Implementa√ß√£o Pr√°tica",
        "```yaml",
        f"# Exemplo de configura√ß√£o {module_name}",
        f"{module_name.lower().replace(' ', '_')}:",
        "  enabled: true",
        "  version: '1.0.0'",
        "  config:",
        "    timeout: 30",
        "    retries: 3",
        "    logging:",
        "      level: 'info'",
        "      format: 'json'",
        "```",
        "",
        "## üîß Ferramentas e Tecnologias",
        "",
        "### Ferramentas Principais",
        "- Jenkins, GitLab CI, GitHub Actions",
        "- Docker, Kubernetes, Helm",
        "- Terraform, Ansible, Chef",
        "- Prometheus, Grafana, ELK Stack",
        "",
        "### Configura√ß√£o do Ambiente",
        "```bash",
        "# Configurar ambiente de desenvolvimento",
        "docker --version",
        "kubectl version",
        "terraform --version",
        "```",
        ""
    ]
    return content

def generate_aws_module_content(module_name: str) -> list:
    """Gera conte√∫do espec√≠fico para m√≥dulos AWS"""
    content = [
        "## ‚òÅÔ∏è Conceitos Principais",
        "",
        f"### 1. Fundamentos de {module_name}",
        f"O {module_name} oferece solu√ß√µes robustas para aplica√ß√µes na nuvem...",
        "",
        "### 2. Arquitetura e Servi√ßos",
        "A arquitetura inclui:",
        "- Servi√ßos de computa√ß√£o",
        "- Armazenamento escal√°vel",
        "- Redes e seguran√ßa",
        "- Monitoramento e logging",
        "",
        "### 3. Implementa√ß√£o Pr√°tica",
        "```bash",
        f"# Exemplo de implementa√ß√£o {module_name}",
        "aws configure",
        f"aws {module_name.lower().replace(' ', '-')} create",
        "```",
        "",
        "## üõ†Ô∏è Servi√ßos AWS Relacionados",
        "",
        "### Servi√ßos Principais",
        "- EC2, Lambda, ECS, EKS",
        "- S3, EBS, RDS, DynamoDB",
        "- VPC, IAM, CloudWatch",
        "- CloudFormation, CDK",
        "",
        "### Configura√ß√£o do Ambiente",
        "```bash",
        "# Configurar AWS CLI",
        "aws configure",
        "aws sts get-caller-identity",
        "```",
        ""
    ]
    return content

def generate_python_module_content(module_name: str) -> list:
    """Gera conte√∫do espec√≠fico para m√≥dulos Python"""
    content = [
        "## üêç Conceitos Principais",
        "",
        f"### 1. Fundamentos de {module_name}",
        f"O {module_name} utiliza Python para an√°lise e processamento de dados...",
        "",
        "### 2. Metodologia e Processo",
        "O processo inclui:",
        "- Coleta e limpeza de dados",
        "- An√°lise explorat√≥ria",
        "- Feature engineering",
        "- Treinamento e valida√ß√£o",
        "",
        "### 3. Implementa√ß√£o Pr√°tica",
        "```python",
        f"# Exemplo de implementa√ß√£o {module_name}",
        "import pandas as pd",
        "import numpy as np",
        f"from sklearn import {module_name.lower().replace(' ', '_')}",
        "",
        "# Implementa√ß√£o do c√≥digo",
        "def process_data(data):",
        "    # Processamento dos dados",
        "    return processed_data",
        "```",
        "",
        "## üìä Bibliotecas e Frameworks",
        "",
        "### Bibliotecas Principais",
        "- Pandas, NumPy, SciPy",
        "- Matplotlib, Seaborn, Plotly",
        "- Scikit-learn, TensorFlow, PyTorch",
        "- Jupyter, Streamlit, Dash",
        "",
        "### Configura√ß√£o do Ambiente",
        "```bash",
        "# Criar ambiente virtual",
        "python -m venv venv",
        "source venv/bin/activate  # Linux/Mac",
        "pip install pandas numpy matplotlib",
        "```",
        ""
    ]
    return content

def generate_web_module_content(module_name: str) -> list:
    """Gera conte√∫do espec√≠fico para m√≥dulos Web"""
    content = [
        "## üåê Conceitos Principais",
        "",
        f"### 1. Fundamentos de {module_name}",
        f"O {module_name} representa as melhores pr√°ticas em desenvolvimento web moderno...",
        "",
        "### 2. Arquitetura e Padr√µes",
        "A arquitetura inclui:",
        "- Separa√ß√£o de responsabilidades",
        "- Padr√µes de design reutiliz√°veis",
        "- Sistema de roteamento",
        "- Gerenciamento de estado",
        "",
        "### 3. Implementa√ß√£o Pr√°tica",
        "```javascript",
        f"// Exemplo de implementa√ß√£o {module_name}",
        "const {module_name.lower().replace(' ', '')} = {{",
        "  init() {{",
        "    // Implementa√ß√£o",
        "  }}",
        "}};",
        "```",
        "",
        "## üõ†Ô∏è Tecnologias e Ferramentas",
        "",
        "### Tecnologias Principais",
        "- HTML5, CSS3, JavaScript (ES6+)",
        "- React, Vue, Angular",
        "- Node.js, Express, FastAPI",
        "- MongoDB, PostgreSQL, Redis",
        "",
        "### Configura√ß√£o do Ambiente",
        "```bash",
        "# Instalar depend√™ncias",
        "npm install",
        "npm run dev",
        "```",
        ""
    ]
    return content

def generate_react_module_content(module_name: str) -> list:
    """Gera conte√∫do espec√≠fico para m√≥dulos React"""
    content = [
        "## ‚öõÔ∏è Conceitos Principais",
        "",
        f"### 1. Fundamentos de {module_name}",
        f"O {module_name} representa a evolu√ß√£o do React para aplica√ß√µes modernas...",
        "",
        "### 2. Arquitetura e Padr√µes",
        "A arquitetura inclui:",
        "- Gerenciamento de estado",
        "- Roteamento e navega√ß√£o",
        "- Componentes reutiliz√°veis",
        "- Testes automatizados",
        "",
        "### 3. Implementa√ß√£o Pr√°tica",
        "```jsx",
        f"// Exemplo de implementa√ß√£o {module_name}",
        "const {module_name.replace(' ', '')} = () => {{",
        "  // Implementa√ß√£o",
        "  return <div>Componente</div>;",
        "}};",
        "```",
        "",
        "## üõ†Ô∏è Ferramentas e Bibliotecas",
        "",
        "### Ferramentas Principais",
        "- Create React App, Vite",
        "- React Router, React Query",
        "- Redux Toolkit, Zustand",
        "- Jest, React Testing Library",
        "",
        "### Configura√ß√£o do Ambiente",
        "```bash",
        "# Criar projeto React",
        "npx create-react-app my-app",
        "cd my-app",
        "npm start",
        "```",
        ""
    ]
    return content

def generate_generic_module_content(module_name: str) -> list:
    """Gera conte√∫do gen√©rico para m√≥dulos"""
    content = [
        "## üìö Conceitos Principais",
        "",
        f"### 1. Fundamentos de {module_name}",
        f"O {module_name} √© essencial para o desenvolvimento de software de qualidade...",
        "",
        "### 2. Metodologia e Aplica√ß√£o",
        "A implementa√ß√£o inclui:",
        "- Metodologias comprovadas",
        "- Ferramentas e tecnologias",
        "- Processos de valida√ß√£o",
        "- M√©tricas de sucesso",
        "",
        "### 3. Implementa√ß√£o Pr√°tica",
        "```bash",
        f"# Exemplo de implementa√ß√£o {module_name}",
        "setup_{module_name.lower().replace(' ', '_')}",
        "configure_{module_name.lower().replace(' ', '_')}",
        "```",
        "",
        "## üõ†Ô∏è Ferramentas e Recursos",
        "",
        "### Ferramentas Principais",
        "- IDEs e editores de c√≥digo",
        "- Sistemas de controle de vers√£o",
        "- Ferramentas de teste e qualidade",
        "- Plataformas de deploy",
        "",
        "### Configura√ß√£o do Ambiente",
        "```bash",
        "# Configurar ambiente",
        "git clone <repository>",
        "npm install",
        "npm run dev",
        "```",
        ""
    ]
    return content

def main():
    """Fun√ß√£o principal"""
    print("üìö ORGANIZANDO CONTE√öDO POR M√ìDULOS")
    print("=" * 60)
    
    # Cursos dispon√≠veis
    courses = [
        'devops-docker',
        'aws-cloud', 
        'python-data-science',
        'web-fundamentals',
        'react-advanced'
    ]
    
    for course in courses:
        organize_course_modules(course)
    
    print("\nüéâ Organiza√ß√£o por m√≥dulos conclu√≠da com sucesso!")
    print("\nüìÅ Os m√≥dulos foram criados em cada diret√≥rio de curso:")
    print("   - devops-docker/modulos/")
    print("   - aws-cloud/modulos/")
    print("   - python-data-science/modulos/")
    print("   - web-fundamentals/modulos/")
    print("   - react-advanced/modulos/")

if __name__ == "__main__":
    main()

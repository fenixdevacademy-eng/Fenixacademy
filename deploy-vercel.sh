#!/bin/bash

# üöÄ Deploy Script for Fenix Academy - Vercel
# Este script automatiza o deploy completo no Vercel

set -e

echo "üöÄ FENIX ACADEMY - DEPLOY NO VERCEL"
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se o Vercel CLI est√° instalado
if ! command -v vercel &> /dev/null; then
    error "Vercel CLI n√£o encontrado!"
    log "Instalando Vercel CLI..."
    npm install -g vercel
    success "Vercel CLI instalado!"
fi

# Verificar se est√° logado no Vercel
if ! vercel whoami &> /dev/null; then
    warning "Voc√™ n√£o est√° logado no Vercel!"
    log "Fazendo login..."
    vercel login
fi

# 1. Preparar ambiente
log "Preparando ambiente..."

# Instalar depend√™ncias do frontend
log "Instalando depend√™ncias do frontend..."
cd frontend
npm install
success "Depend√™ncias do frontend instaladas!"

# Build do frontend
log "Fazendo build do frontend..."
npm run build
success "Build do frontend conclu√≠do!"

cd ..

# 2. Configurar vari√°veis de ambiente
log "Configurando vari√°veis de ambiente..."

# Verificar se o arquivo .env.local existe
if [ ! -f "frontend/.env.local" ]; then
    warning "Arquivo .env.local n√£o encontrado!"
    log "Copiando arquivo de exemplo..."
    cp frontend/env.example frontend/.env.local
    warning "Configure as vari√°veis de ambiente em frontend/.env.local"
fi

# 3. Deploy no Vercel
log "Iniciando deploy no Vercel..."

# Deploy do frontend
cd frontend
vercel --prod --yes
success "Deploy do frontend conclu√≠do!"

# 4. Configurar dom√≠nio personalizado (opcional)
read -p "Deseja configurar um dom√≠nio personalizado? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    read -p "Digite o dom√≠nio (ex: fenixacademy.com.br): " DOMAIN
    if [ ! -z "$DOMAIN" ]; then
        log "Configurando dom√≠nio personalizado: $DOMAIN"
        vercel domains add $DOMAIN
        success "Dom√≠nio configurado!"
    fi
fi

# 5. Configurar webhooks do Stripe
log "Configurando webhooks do Stripe..."

# Obter URL do projeto
PROJECT_URL=$(vercel ls --json | jq -r '.[0].url')
WEBHOOK_URL="https://$PROJECT_URL/api/webhooks/stripe"

echo "Webhook URL: $WEBHOOK_URL"
echo "Configure este URL no painel do Stripe:"
echo "1. Acesse https://dashboard.stripe.com/webhooks"
echo "2. Clique em 'Add endpoint'"
echo "3. Cole a URL: $WEBHOOK_URL"
echo "4. Selecione os eventos: payment_intent.succeeded, payment_intent.payment_failed"
echo "5. Copie o webhook secret e adicione ao .env.local"

# 6. Verificar deploy
log "Verificando deploy..."
vercel ls
success "Deploy verificado!"

# 7. Abrir no navegador
read -p "Deseja abrir o site no navegador? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    vercel open
fi

# 8. Resumo final
echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "================================"
echo "Frontend: https://$PROJECT_URL"
echo "Admin: https://$PROJECT_URL/admin"
echo "API: https://$PROJECT_URL/api"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Configure as vari√°veis de ambiente no painel do Vercel"
echo "2. Configure os webhooks do Stripe"
echo "3. Configure os pixels de tracking"
echo "4. Teste todas as funcionalidades"
echo "5. Configure o dom√≠nio personalizado"
echo ""
echo "üîó Links √∫teis:"
echo "- Vercel Dashboard: https://vercel.com/dashboard"
echo "- Stripe Dashboard: https://dashboard.stripe.com"
echo "- Documenta√ß√£o: https://vercel.com/docs"
echo ""

success "Fenix Academy est√° no ar! üöÄ"

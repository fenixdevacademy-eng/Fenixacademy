/**
 * üöÄ Demonstra√ß√£o do Auto-Complete Inteligente - Fenix IDE 2.0
 * Mostra as funcionalidades avan√ßadas de auto-complete
 */

const FenixIDE2Core = require('./fenix-ide-v2-core');

async function demonstrateAutoComplete() {
    console.log('üöÄ Iniciando demonstra√ß√£o do Auto-Complete Inteligente...\n');

    try {
        // 1. Inicializar a IDE
        console.log('üìã Passo 1: Inicializando Fenix IDE 2.0...');
        const ide = new FenixIDE2Core({
            workspacePath: process.cwd(),
            theme: 'dark',
            language: 'pt-BR'
        });

        // Aguardar inicializa√ß√£o
        await new Promise(resolve => {
            ide.once('ide:initialized', resolve);
        });

        console.log('‚úÖ IDE inicializada com sucesso!\n');

        // 2. Iniciar a IDE
        console.log('üöÄ Passo 2: Iniciando a IDE...');
        await ide.start();
        console.log('‚úÖ IDE iniciada!\n');

        // 3. Demonstrar auto-complete
        console.log('üéØ Passo 3: Demonstrando Auto-Complete Inteligente...');
        const autoComplete = ide.modules.get('auto-complete')?.instance;

        if (autoComplete) {
            console.log('üìã Status do Auto-Complete:');
            const status = autoComplete.getStatus();
            console.log(`   Nome: ${status.name}`);
            console.log(`   Ativo: ${status.isActive}`);
            console.log(`   Cache: ${status.cacheSize} sugest√µes`);
            console.log(`   Snippets contextuais: ${status.contextualSnippets}\n`);

            // 4. Demonstrar sugest√µes para JavaScript
            console.log('üíª Passo 4: Sugest√µes para JavaScript...');
            const jsContext = {
                language: 'javascript',
                content: `
function calcularImposto(valor, tipo) {
    // Fun√ß√£o para calcular impostos brasileiros
    let imposto = 0;
    
    if (tipo === 'ICMS') {
        imposto = valor * 0.18; // 18% ICMS
    } else if (tipo === 'IPI') {
        imposto = valor * 0.05; // 5% IPI
    }
    
    return imposto;
}

// Valida√ß√£o de CPF
function validarCPF(cpf) {
    // Implementa√ß√£o aqui
}

// Gera√ß√£o de PIX
class PIXGenerator {
    // Implementa√ß√£o aqui
}
                `,
                position: { line: 25, character: 10 },
                filePath: '/demo/brazilian-taxes.js'
            };

            const suggestions = await autoComplete.getIntelligentSuggestions(jsContext);

            console.log('üìã Sugest√µes inteligentes obtidas:');
            console.log(`   Total: ${suggestions.length} sugest√µes\n`);

            // Mostrar sugest√µes por categoria
            const brazilianSuggestions = suggestions.filter(s => s.isBrazilian);
            const snippetSuggestions = suggestions.filter(s => s.kind === 'snippet');
            const aiSuggestions = suggestions.filter(s => s.isAI);
            const codeSuggestions = suggestions.filter(s => s.kind === 'variable' || s.kind === 'function' || s.kind === 'class');

            if (brazilianSuggestions.length > 0) {
                console.log('üáßüá∑ Sugest√µes Brasileiras:');
                brazilianSuggestions.forEach(s => {
                    console.log(`   üéØ ${s.label} - ${s.detail}`);
                });
                console.log();
            }

            if (snippetSuggestions.length > 0) {
                console.log('üìù Snippets:');
                snippetSuggestions.forEach(s => {
                    console.log(`   üìã ${s.label} - ${s.detail}`);
                });
                console.log();
            }

            if (aiSuggestions.length > 0) {
                console.log('üß† Sugest√µes da IA:');
                aiSuggestions.forEach(s => {
                    console.log(`   üí° ${s.label} - ${s.detail}`);
                });
                console.log();
            }

            if (codeSuggestions.length > 0) {
                console.log('üîç C√≥digo Local:');
                codeSuggestions.forEach(s => {
                    console.log(`   ${s.kind === 'function' ? '‚öôÔ∏è' : s.kind === 'class' ? 'üèóÔ∏è' : 'üì¶'} ${s.label} - ${s.detail}`);
                });
                console.log();
            }

            // 5. Demonstrar cache
            console.log('üíæ Passo 5: Sistema de Cache...');
            const cacheStatus = autoComplete.getStatus();
            console.log(`   üì¶ Tamanho do cache: ${cacheStatus.cacheSize}`);
            console.log(`   ‚è±Ô∏è Expira√ß√£o: ${autoComplete.cacheExpiry / 1000}s\n`);

            // 6. Demonstrar snippets contextuais
            console.log('üé® Passo 6: Snippets Contextuais...');
            const contextualSnippets = autoComplete.contextualSnippets;

            console.log('üìã Categorias dispon√≠veis:');
            for (const [category, snippets] of contextualSnippets) {
                console.log(`   üìÅ ${category}: ${Object.keys(snippets).length} snippets`);
                for (const [name, snippet] of Object.entries(snippets)) {
                    console.log(`      üìù ${name}: ${snippet.description}`);
                }
            }
            console.log();

            // 7. Demonstrar prioriza√ß√£o
            console.log('üéØ Passo 7: Sistema de Prioriza√ß√£o...');
            console.log('üìä Ordem de prioridade das sugest√µes:');
            console.log('   1. üáßüá∑ Snippets brasileiros (m√°xima prioridade)');
            console.log('   2. üìù Snippets da linguagem');
            console.log('   3. üß† Sugest√µes da IA');
            console.log('   4. üîç C√≥digo local (vari√°veis, fun√ß√µes, classes)\n');

            // 8. Demonstrar eventos
            console.log('üîî Passo 8: Sistema de Eventos...');
            autoComplete.on('suggestions:generated', (data) => {
                console.log(`   ‚úÖ Evento: ${data.count} sugest√µes geradas para ${data.language}`);
            });

            autoComplete.on('suggestion:used', (suggestion) => {
                console.log(`   üéØ Evento: Sugest√£o "${suggestion.label}" utilizada`);
            });

            // Simular uso de sugest√£o
            if (suggestions.length > 0) {
                const firstSuggestion = suggestions[0];
                autoComplete.emit('suggestion:selected', firstSuggestion);
            }

        } else {
            console.log('‚ùå M√≥dulo de auto-complete n√£o encontrado');
        }

        // 9. Resumo final
        console.log('üéâ Demonstra√ß√£o do Auto-Complete conclu√≠da!');
        console.log('\nüìã Recursos do Auto-Complete Inteligente:');
        console.log('   üöÄ Sugest√µes contextuais inteligentes');
        console.log('   üáßüá∑ Snippets brasileiros priorit√°rios');
        console.log('   üß† Integra√ß√£o com IA');
        console.log('   üíæ Sistema de cache otimizado');
        console.log('   üéØ Prioriza√ß√£o inteligente');
        console.log('   üîç An√°lise de c√≥digo local');
        console.log('   üìù Snippets por linguagem');
        console.log('   üîî Sistema de eventos robusto');

        // 10. Parar a IDE
        console.log('\nüõë Parando a IDE...');
        await ide.stop();
        console.log('‚úÖ IDE parada com sucesso');

        // 11. Limpeza
        console.log('\nüßπ Realizando limpeza...');
        await ide.cleanup();
        console.log('‚úÖ Limpeza conclu√≠da');

        console.log('\nüéØ Auto-Complete Inteligente - Fenix IDE 2.0');
        console.log('üöÄ Revolucionando a experi√™ncia de desenvolvimento!');

    } catch (error) {
        console.error('‚ùå Erro na demonstra√ß√£o:', error);
        process.exit(1);
    }
}

// Executar demonstra√ß√£o se for o arquivo principal
if (require.main === module) {
    demonstrateAutoComplete().catch(error => {
        console.error('‚ùå Erro fatal na demonstra√ß√£o:', error);
        process.exit(1);
    });
}

module.exports = { demonstrateAutoComplete };

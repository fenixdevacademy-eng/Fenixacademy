'use client';

import React, { useState, useEffect } from 'react';
import {
    Play,
    Clock,
    BookOpen,
    CheckCircle,
    Lock,
    Star,
    Users,
    Award,
    Download,
    ChevronDown,
    ChevronUp
} from 'lucide-react';
import CS50ContentDisplay from '../../components/CS50ContentDisplay';

interface Lesson {
    id: number;
    title: string;
    duration: number;
    type: 'video' | 'text' | 'quiz' | 'exercise' | 'project';
    content?: string;
    video_url?: string;
    transcript?: string;
    resources?: any[];
    exercises?: any[];
    completed?: boolean;
    requiresPermission?: boolean;
    permissionLevel?: 'free' | 'basic' | 'premium' | 'admin';
}

interface Module {
    id: number;
    title: string;
    description: string;
    duration: number;
    lessons: Lesson[];
    completed?: boolean;
    requiresPermission?: boolean;
    permissionLevel?: 'free' | 'basic' | 'premium' | 'admin';
}

interface CourseContent {
    id: number;
    title: string;
    description: string;
    instructor: string;
    level: string;
    duration: string;
    students: number;
    rating: number;
    price: number;
    originalPrice?: number;
    image: string;
    category: string;
    lessons: number;
    certificate: boolean;
    featured?: boolean;
    new?: boolean;
    discount?: number;
    modules: Module[];
    requiresPermission?: boolean;
    permissionLevel?: 'free' | 'basic' | 'premium' | 'admin';
}

export default function FundamentosDesenvolvimentoWebPage() {
    const [courseData, setCourseData] = useState<CourseContent | null>(null);
    const [activeTab, setActiveTab] = useState<'overview' | 'content' | 'instructor' | 'reviews'>('overview');
    const [expandedModules, setExpandedModules] = useState<Set<number>>(new Set());
    const [expandedLessons, setExpandedLessons] = useState<Set<number>>(new Set());
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const loadCourseData = async () => {
            try {
                const mockData: CourseContent = {
                    id: 10,
                    title: "Fundamentos de Desenvolvimento Web",
                    description: "HTML, CSS, JavaScript e conceitos fundamentais para iniciantes. Aprenda a criar sites responsivos e interativos do zero.",
                    instructor: "Prof. Jo√£o Santos",
                    level: "beginner",
                    duration: "33 horas",
                    students: 3456,
                    rating: 4.7,
                    price: 197,
                    originalPrice: 297,
                    image: "/courses/web-fundamentals.jpg",
                    category: "Frontend",
                    lessons: 25,
                    certificate: true,
                    discount: 34,
                    modules: [
                        {
                            id: 1,
                            title: "Introdu√ß√£o ao Desenvolvimento Web",
                            description: "Conceitos b√°sicos, ferramentas e configura√ß√£o do ambiente",
                            duration: 3,
                            lessons: [
                                {
                                    id: 1,
                                    title: "Bem-vindo ao Desenvolvimento Web",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Introdu√ß√£o ao Desenvolvimento Web\n\nBem-vindo ao curso **Fundamentos de Desenvolvimento Web** da Fenix Academy!\n\n## O que √© Desenvolvimento Web?\n\nDesenvolvimento web √© o processo de criar sites e aplica√ß√µes web usando tecnologias como HTML, CSS e JavaScript.\n\n### üåê **Tecnologias Fundamentais**\n- **HTML**: Estrutura e conte√∫do das p√°ginas\n- **CSS**: Estiliza√ß√£o e layout\n- **JavaScript**: Interatividade e funcionalidades\n- **Git**: Controle de vers√£o\n- **VS Code**: Editor de c√≥digo\n\n### üéØ **O que voc√™ vai aprender**\n- Criar p√°ginas web responsivas\n- Estilizar com CSS moderno\n- Adicionar interatividade com JavaScript\n- Publicar sites na internet\n- Usar ferramentas de desenvolvimento",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/introducao/bem-vindo.mp4",
                                    transcript: "Vamos aprender os fundamentos do desenvolvimento web de forma pr√°tica e divertida.",
                                    resources: [
                                        {
                                            type: "documentation",
                                            title: "MDN Web Docs",
                                            url: "https://developer.mozilla.org/",
                                            description: "Documenta√ß√£o oficial para desenvolvedores web"
                                        }
                                    ],
                                    exercises: [
                                        {
                                            title: "Setup do Ambiente",
                                            description: "Configure seu ambiente de desenvolvimento",
                                            difficulty: "easy",
                                            estimated_time: "30 minutos",
                                            instructions: "1. Instale VS Code\n2. Configure extens√µes\n3. Crie primeiro projeto\n4. Teste a configura√ß√£o"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            id: 2,
                            title: "HTML5 Sem√¢ntico",
                            description: "Estrutura HTML moderna e acess√≠vel para web",
                            duration: 3,
                            lessons: [
                                {
                                    id: 2,
                                    title: "HTML5 Sem√¢ntico e Estrutura Moderna",
                                    duration: 1800,
                                    type: "video",
                                    content: "# HTML5 Sem√¢ntico e Estrutura Moderna\n\n## üéØ Objetivos\n- Compreender a import√¢ncia da sem√¢ntica HTML\n- Dominar as principais tags sem√¢nticas do HTML5\n- Criar estruturas acess√≠veis e bem organizadas\n- Aplicar boas pr√°ticas de SEO e acessibilidade\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. O que √© HTML Sem√¢ntico?**\n\nHTML sem√¢ntico significa usar as tags corretas para expressar o **significado** do conte√∫do, n√£o apenas sua apar√™ncia.\n\n**Vantagens:**\n- Melhor para SEO (Search Engine Optimization)\n- Acessibilidade aprimorada para leitores de tela\n- C√≥digo mais leg√≠vel e manuten√≠vel\n- Estrutura clara para desenvolvedores\n\n### **2. Tags Sem√¢nticas Principais**\n\n#### **Estrutura da P√°gina:**\n```html\n<header>     <!-- Cabe√ßalho da p√°gina ou se√ß√£o -->\n<nav>        <!-- Navega√ß√£o principal -->\n<main>       <!-- Conte√∫do principal -->\n<article>    <!-- Conte√∫do independente e completo -->\n<section>    <!-- Se√ß√£o tem√°tica de conte√∫do -->\n<aside>      <!-- Conte√∫do relacionado mas separado -->\n<footer>     <!-- Rodap√© da p√°gina ou se√ß√£o -->\n```\n\n#### **Conte√∫do de Texto:**\n```html\n<h1> a <h6>  <!-- T√≠tulos hier√°rquicos -->\n<p>          <!-- Par√°grafos -->\n<blockquote> <!-- Cita√ß√µes longas -->\n<cite>       <!-- T√≠tulo de uma obra -->\n<time>       <!-- Datas e hor√°rios -->\n<mark>       <!-- Texto destacado -->\n<code>       <!-- C√≥digo inline -->\n<pre>        <!-- Bloco de c√≥digo pr√©-formatado -->\n```\n\n#### **Listas e Navega√ß√£o:**\n```html\n<ul>         <!-- Lista n√£o ordenada -->\n<ol>         <!-- Lista ordenada -->\n<li>         <!-- Item de lista -->\n<nav>        <!-- Navega√ß√£o -->\n```\n\n### **3. Estrutura Sem√¢ntica Completa**\n\n```html\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Minha P√°gina Sem√¢ntica</title>\n</head>\n<body>\n    <header>\n        <h1>Logo da Empresa</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#sobre\">Sobre</a></li>\n                <li><a href=\"#contato\">Contato</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <article>\n            <header>\n                <h2>T√≠tulo do Artigo</h2>\n                <time datetime=\"2025-01-15\">15 de Janeiro de 2025</time>\n            </header>\n            \n            <section>\n                <h3>Introdu√ß√£o</h3>\n                <p>Conte√∫do da introdu√ß√£o...</p>\n            </section>\n            \n            <section>\n                <h3>Desenvolvimento</h3>\n                <p>Conte√∫do principal...</p>\n                <blockquote>\n                    <p>Cita√ß√£o importante sobre o tema.</p>\n                    <cite>‚Äî Autor da Cita√ß√£o</cite>\n                </blockquote>\n            </section>\n        </article>\n\n        <aside>\n            <h3>Artigos Relacionados</h3>\n            <ul>\n                <li><a href=\"#artigo1\">Artigo Relacionado 1</a></li>\n                <li><a href=\"#artigo2\">Artigo Relacionado 2</a></li>\n            </ul>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2025 Minha Empresa. Todos os direitos reservados.</p>\n    </footer>\n</body>\n</html>\n```\n\n## üíª Exemplo Pr√°tico\n\n### **P√°gina de Blog Sem√¢ntica:**\n\n```html\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog de Tecnologia</title>\n</head>\n<body>\n    <header>\n        <h1>TechBlog</h1>\n        <nav aria-label=\"Navega√ß√£o principal\">\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#artigos\">Artigos</a></li>\n                <li><a href=\"#categorias\">Categorias</a></li>\n                <li><a href=\"#sobre\">Sobre</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <article>\n            <header>\n                <h2>Introdu√ß√£o ao HTML5 Sem√¢ntico</h2>\n                <div class=\"meta\">\n                    <time datetime=\"2025-01-15T10:00:00\">15 de Janeiro, 10:00</time>\n                    <span>por <a href=\"#autor\">Jo√£o Silva</a></span>\n                    <span>Categoria: <a href=\"#html\">HTML</a></span>\n                </div>\n            </header>\n            \n            <section>\n                <h3>Por que HTML Sem√¢ntico?</h3>\n                <p>O HTML sem√¢ntico √© fundamental para criar p√°ginas web acess√≠veis e bem estruturadas...</p>\n                \n                <h3>Principais Tags</h3>\n                <p>Vamos explorar as principais tags sem√¢nticas do HTML5:</p>\n                <ul>\n                    <li><code>&lt;header&gt;</code> - Para cabe√ßalhos</li>\n                    <li><code>&lt;nav&gt;</code> - Para navega√ß√£o</li>\n                    <li><code>&lt;main&gt;</code> - Para conte√∫do principal</li>\n                    <li><code>&lt;article&gt;</code> - Para artigos independentes</li>\n                </ul>\n            </section>\n            \n            <section>\n                <h3>Exemplo Pr√°tico</h3>\n                <p>Aqui est√° um exemplo de como estruturar uma p√°gina de blog:</p>\n                <pre><code>&lt;article&gt;\n    &lt;header&gt;\n        &lt;h2&gt;T√≠tulo do Artigo&lt;/h2&gt;\n        &lt;time&gt;Data de Publica√ß√£o&lt;/time&gt;\n    &lt;/header&gt;\n    &lt;section&gt;\n        &lt;h3&gt;Se√ß√£o do Conte√∫do&lt;/h3&gt;\n        &lt;p&gt;Conte√∫do da se√ß√£o...&lt;/p&gt;\n    &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n            </section>\n            \n            <footer>\n                <h3>Compartilhe este artigo:</h3>\n                <nav aria-label=\"Compartilhamento\">\n                    <ul>\n                        <li><a href=\"#twitter\">Twitter</a></li>\n                        <li><a href=\"#facebook\">Facebook</a></li>\n                        <li><a href=\"#linkedin\">LinkedIn</a></li>\n                    </ul>\n                </nav>\n            </footer>\n        </article>\n\n        <aside>\n            <section>\n                <h3>Artigos Relacionados</h3>\n                <ul>\n                    <li><a href=\"#css\">CSS Grid Layout</a></li>\n                    <li><a href=\"#js\">JavaScript Moderno</a></li>\n                    <li><a href=\"#responsive\">Design Responsivo</a></li>\n                </ul>\n            </section>\n            \n            <section>\n                <h3>Newsletter</h3>\n                <p>Receba as √∫ltimas novidades sobre desenvolvimento web!</p>\n                <form>\n                    <input type=\"email\" placeholder=\"Seu e-mail\" required>\n                    <button type=\"submit\">Inscrever</button>\n                </form>\n            </section>\n        </aside>\n    </main>\n\n    <footer>\n        <div class=\"footer-content\">\n            <section>\n                <h3>Sobre o TechBlog</h3>\n                <p>Blog dedicado ao desenvolvimento web e tecnologias modernas.</p>\n            </section>\n            \n            <section>\n                <h3>Links √öteis</h3>\n                <ul>\n                    <li><a href=\"#politica\">Pol√≠tica de Privacidade</a></li>\n                    <li><a href=\"#termos\">Termos de Uso</a></li>\n                    <li><a href=\"#contato\">Contato</a></li>\n                </ul>\n            </section>\n            \n            <section>\n                <h3>Redes Sociais</h3>\n                <ul>\n                    <li><a href=\"#twitter\">Twitter</a></li>\n                    <li><a href=\"#github\">GitHub</a></li>\n                    <li><a href=\"#linkedin\">LinkedIn</a></li>\n                </ul>\n            </section>\n        </div>\n        <div class=\"footer-bottom\">\n            <p>&copy; 2025 TechBlog. Todos os direitos reservados.</p>\n        </div>\n    </footer>\n</body>\n</html>\n```\n\n## üõ† Desafio da Aula\n\n**Criar uma p√°gina de portfolio pessoal usando HTML5 sem√¢ntico.**\n\n**Requisitos:**\n- Usar todas as tags sem√¢nticas principais\n- Estrutura l√≥gica e hier√°rquica\n- Se√ß√µes bem definidas (sobre, projetos, contato)\n- Navega√ß√£o acess√≠vel\n- Formul√°rio de contato estruturado\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Estrutura HTML sem√¢ntica para a p√°gina principal\n- Header com navega√ß√£o clara\n- Main com se√ß√µes organizadas (eventos, inscri√ß√µes, sobre)\n- Aside com informa√ß√µes complementares\n- Footer com links √∫teis e contato\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Compreendi a import√¢ncia da sem√¢ntica HTML\n- [ ] Dominei as principais tags sem√¢nticas do HTML5\n- [ ] Criei estruturas acess√≠veis e bem organizadas\n- [ ] Apliquei boas pr√°ticas de SEO e acessibilidade\n- [ ] Completei o projeto de portfolio sem√¢ntico\n- [ ] Testei a acessibilidade com leitores de tela\n\n---\n\n*Parab√©ns! Voc√™ dominou HTML5 sem√¢ntico e pode criar estruturas web acess√≠veis e bem organizadas! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/html/html5-semantico.mp4",
                                    transcript: "HTML5 sem√¢ntico √© fundamental para criar p√°ginas web acess√≠veis, bem estruturadas e otimizadas para SEO.",
                                    resources: [
                                        {
                                            type: "documentation",
                                            title: "MDN - HTML5 Sem√¢ntico",
                                            url: "https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element",
                                            description: "Documenta√ß√£o completa das tags HTML5 sem√¢nticas"
                                        },
                                        {
                                            type: "guide",
                                            title: "Guia de Acessibilidade Web",
                                            url: "https://www.w3.org/WAI/WCAG21/quickref/",
                                            description: "Diretrizes de acessibilidade web"
                                        }
                                    ],
                                    exercises: [
                                        {
                                            title: "Estrutura Sem√¢ntica",
                                            description: "Criar p√°gina com todas as tags sem√¢nticas principais",
                                            difficulty: "medium",
                                            estimated_time: "45 minutos",
                                            instructions: "1. Criar estrutura HTML5 sem√¢ntica\n2. Usar header, nav, main, article, section, aside, footer\n3. Adicionar conte√∫do relevante\n4. Testar acessibilidade"
                                        },
                                        {
                                            title: "Portfolio Pessoal",
                                            description: "Desenvolver portfolio usando HTML sem√¢ntico",
                                            difficulty: "hard",
                                            estimated_time: "90 minutos",
                                            instructions: "1. Estruturar portfolio com tags sem√¢nticas\n2. Criar se√ß√µes: sobre, projetos, contato\n3. Adicionar navega√ß√£o acess√≠vel\n4. Implementar formul√°rio de contato"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            id: 3,
                            title: "CSS Moderno e Responsivo",
                            description: "Estiliza√ß√£o avan√ßada e design responsivo",
                            duration: 3,
                            lessons: [
                                {
                                    id: 3,
                                    title: "CSS Moderno: Flexbox, Grid e Design Responsivo",
                                    duration: 1800,
                                    type: "video",
                                    content: "# CSS Moderno: Flexbox, Grid e Design Responsivo\n\n## üéØ Objetivos\n- Dominar Flexbox para layouts flex√≠veis\n- Compreender CSS Grid para layouts complexos\n- Implementar design responsivo com media queries\n- Criar interfaces modernas e adapt√°veis\n- Aplicar boas pr√°ticas de CSS moderno\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. Flexbox (Flexible Box Layout)**\n\nFlexbox √© um modelo de layout unidimensional que organiza elementos em uma linha ou coluna.\n\n#### **Propriedades do Container (Parent):**\n```css\n.container {\n    display: flex;           /* Ativa flexbox */\n    flex-direction: row;     /* Dire√ß√£o: row | row-reverse | column | column-reverse */\n    justify-content: center; /* Alinhamento horizontal: flex-start | center | flex-end | space-between | space-around */\n    align-items: center;     /* Alinhamento vertical: stretch | flex-start | center | flex-end | baseline */\n    flex-wrap: wrap;         /* Quebra de linha: nowrap | wrap | wrap-reverse */\n    gap: 20px;              /* Espa√ßamento entre itens */\n}\n```\n\n#### **Propriedades dos Itens (Children):**\n```css\n.item {\n    flex: 1;                /* Shorthand: flex-grow flex-shrink flex-basis */\n    flex-grow: 1;           /* Capacidade de crescer (0 = n√£o cresce) */\n    flex-shrink: 1;         /* Capacidade de encolher (0 = n√£o encolhe) */\n    flex-basis: auto;       /* Tamanho base (auto | 0 | 200px) */\n    align-self: center;     /* Alinhamento individual do item */\n    order: 1;               /* Ordem de exibi√ß√£o (0 = padr√£o) */\n}\n```\n\n### **2. CSS Grid Layout**\n\nGrid √© um sistema de layout bidimensional que permite criar layouts complexos com linhas e colunas.\n\n#### **Propriedades do Container Grid:**\n```css\n.grid-container {\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;  /* 3 colunas: 1fr 2fr 1fr */\n    grid-template-rows: 100px auto 100px; /* 3 linhas: 100px auto 100px */\n    grid-template-areas: \n        \"header header header\"\n        \"sidebar main aside\"\n        \"footer footer footer\";\n    gap: 20px;\n    justify-items: center;    /* Alinhamento horizontal dos itens */\n    align-items: center;      /* Alinhamento vertical dos itens */\n}\n```\n\n#### **Propriedades dos Itens Grid:**\n```css\n.grid-item {\n    grid-column: 1 / 3;      /* Inicia na linha 1, termina na linha 3 */\n    grid-row: 2 / 4;         /* Inicia na linha 2, termina na linha 4 */\n    grid-area: main;         /* Nome da √°rea definida no template */\n    justify-self: start;     /* Alinhamento horizontal individual */\n    align-self: end;         /* Alinhamento vertical individual */\n}\n```\n\n### **3. Design Responsivo com Media Queries**\n\nMedia queries permitem aplicar estilos diferentes baseados nas caracter√≠sticas do dispositivo.\n\n```css\n/* Estilos base (mobile-first) */\n.container {\n    padding: 20px;\n    font-size: 16px;\n}\n\n/* Tablet e acima */\n@media (min-width: 768px) {\n    .container {\n        padding: 40px;\n        font-size: 18px;\n    }\n}\n\n/* Desktop e acima */\n@media (min-width: 1024px) {\n    .container {\n        padding: 60px;\n        font-size: 20px;\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n}\n\n/* Orienta√ß√£o paisagem */\n@media (orientation: landscape) {\n    .header {\n        height: 60px;\n    }\n}\n```\n\n### **4. CSS Custom Properties (Vari√°veis)**\n\n```css\n:root {\n    --primary-color: #3498db;\n    --secondary-color: #e74c3c;\n    --text-color: #2c3e50;\n    --spacing-unit: 8px;\n    --border-radius: 4px;\n    --transition: all 0.3s ease;\n}\n\n.button {\n    background-color: var(--primary-color);\n    color: white;\n    padding: calc(var(--spacing-unit) * 2);\n    border-radius: var(--border-radius);\n    transition: var(--transition);\n}\n\n.button:hover {\n    background-color: var(--secondary-color);\n    transform: translateY(-2px);\n}\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Layout Responsivo com Flexbox e Grid:**\n\n```html\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Layout Moderno</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        :root {\n            --primary-color: #3498db;\n            --secondary-color: #e74c3c;\n            --accent-color: #f39c12;\n            --text-color: #2c3e50;\n            --bg-color: #ecf0f1;\n            --spacing: 20px;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n        }\n\n        /* Header com Flexbox */\n        .header {\n            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n            color: white;\n            padding: var(--spacing);\n        }\n\n        .nav {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n\n        .nav-links {\n            display: flex;\n            gap: 30px;\n            list-style: none;\n        }\n\n        .nav-links a {\n            color: white;\n            text-decoration: none;\n            padding: 10px 15px;\n            border-radius: 5px;\n            transition: background-color 0.3s ease;\n        }\n\n        .nav-links a:hover {\n            background-color: rgba(255, 255, 255, 0.2);\n        }\n\n        /* Main Content com Grid */\n        .main-content {\n            display: grid;\n            grid-template-columns: 1fr;\n            grid-template-areas: \n                \"hero\"\n                \"features\"\n                \"about\"\n                \"contact\";\n            gap: var(--spacing);\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: var(--spacing);\n        }\n\n        /* Hero Section */\n        .hero {\n            grid-area: hero;\n            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));\n            color: white;\n            padding: 60px var(--spacing);\n            border-radius: 15px;\n            text-align: center;\n        }\n\n        .hero h1 {\n            font-size: 3rem;\n            margin-bottom: 20px;\n        }\n\n        .hero p {\n            font-size: 1.2rem;\n            margin-bottom: 30px;\n        }\n\n        .cta-button {\n            background-color: var(--secondary-color);\n            color: white;\n            padding: 15px 30px;\n            border: none;\n            border-radius: 25px;\n            font-size: 1.1rem;\n            cursor: pointer;\n            transition: transform 0.3s ease;\n        }\n\n        .cta-button:hover {\n            transform: translateY(-3px);\n        }\n\n        /* Features Section com Flexbox */\n        .features {\n            grid-area: features;\n            display: flex;\n            flex-direction: column;\n            gap: var(--spacing);\n        }\n\n        .features-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: var(--spacing);\n        }\n\n        .feature-card {\n            background: white;\n            padding: var(--spacing);\n            border-radius: 10px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n            transition: transform 0.3s ease;\n        }\n\n        .feature-card:hover {\n            transform: translateY(-5px);\n        }\n\n        .feature-card h3 {\n            color: var(--primary-color);\n            margin-bottom: 15px;\n        }\n\n        /* About Section */\n        .about {\n            grid-area: about;\n            background: white;\n            padding: var(--spacing);\n            border-radius: 10px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        }\n\n        /* Contact Section */\n        .contact {\n            grid-area: contact;\n            background: white;\n            padding: var(--spacing);\n            border-radius: 10px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        }\n\n        .contact-form {\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n        }\n\n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 5px;\n        }\n\n        .form-group input,\n        .form-group textarea {\n            padding: 12px;\n            border: 2px solid #ddd;\n            border-radius: 5px;\n            font-size: 16px;\n            transition: border-color 0.3s ease;\n        }\n\n        .form-group input:focus,\n        .form-group textarea:focus {\n            outline: none;\n            border-color: var(--primary-color);\n        }\n\n        .submit-btn {\n            background-color: var(--primary-color);\n            color: white;\n            padding: 15px;\n            border: none;\n            border-radius: 5px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n        }\n\n        .submit-btn:hover {\n            background-color: var(--secondary-color);\n        }\n\n        /* Footer */\n        .footer {\n            background-color: var(--text-color);\n            color: white;\n            text-align: center;\n            padding: var(--spacing);\n            margin-top: var(--spacing);\n        }\n\n        /* Responsividade */\n        @media (max-width: 768px) {\n            .nav {\n                flex-direction: column;\n                gap: 20px;\n            }\n\n            .nav-links {\n                flex-direction: column;\n                text-align: center;\n            }\n\n            .hero h1 {\n                font-size: 2rem;\n            }\n\n            .hero p {\n                font-size: 1rem;\n            }\n\n            .features-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .hero {\n                padding: 40px 20px;\n            }\n\n            .hero h1 {\n                font-size: 1.5rem;\n            }\n\n            .main-content {\n                padding: 15px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header class=\"header\">\n        <nav class=\"nav\">\n            <h2>Logo</h2>\n            <ul class=\"nav-links\">\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#features\">Recursos</a></li>\n                <li><a href=\"#about\">Sobre</a></li>\n                <li><a href=\"#contact\">Contato</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main class=\"main-content\">\n        <section class=\"hero\">\n            <h1>Bem-vindo ao Futuro</h1>\n            <p>Crie layouts modernos e responsivos com CSS Flexbox e Grid</p>\n            <button class=\"cta-button\">Come√ßar Agora</button>\n        </section>\n\n        <section class=\"features\">\n            <h2>Recursos Principais</h2>\n            <div class=\"features-grid\">\n                <div class=\"feature-card\">\n                    <h3>Flexbox</h3>\n                    <p>Layouts flex√≠veis e adapt√°veis para qualquer dispositivo.</p>\n                </div>\n                <div class=\"feature-card\">\n                    <h3>CSS Grid</h3>\n                    <p>Sistema de layout bidimensional para designs complexos.</p>\n                </div>\n                <div class=\"feature-card\">\n                    <h3>Responsivo</h3>\n                    <p>Design que se adapta perfeitamente a qualquer tela.</p>\n                </div>\n            </div>\n        </section>\n\n        <section class=\"about\">\n            <h2>Sobre N√≥s</h2>\n            <p>Somos especialistas em desenvolvimento web moderno, focados em criar experi√™ncias √∫nicas e responsivas.</p>\n        </section>\n\n        <section class=\"contact\">\n            <h2>Entre em Contato</h2>\n            <form class=\"contact-form\">\n                <div class=\"form-group\">\n                    <label for=\"name\">Nome:</label>\n                    <input type=\"text\" id=\"name\" name=\"name\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">E-mail:</label>\n                    <input type=\"email\" id=\"email\" name=\"email\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"message\">Mensagem:</label>\n                    <textarea id=\"message\" name=\"message\" rows=\"4\" required></textarea>\n                </div>\n                <button type=\"submit\" class=\"submit-btn\">Enviar Mensagem</button>\n            </form>\n        </section>\n    </main>\n\n    <footer class=\"footer\">\n        <p>&copy; 2025 Layout Moderno. Todos os direitos reservados.</p>\n    </footer>\n</body>\n</html>\n```\n\n## üõ† Desafio da Aula\n\n**Criar um dashboard responsivo usando Flexbox e Grid.**\n\n**Requisitos:**\n- Layout com header, sidebar, main content e footer\n- Sidebar colaps√≠vel em dispositivos m√≥veis\n- Cards organizados em grid responsivo\n- Navega√ß√£o com Flexbox\n- Media queries para diferentes breakpoints\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Header responsivo com navega√ß√£o Flexbox\n- Grid de eventos com cards organizados\n- Sidebar colaps√≠vel para filtros\n- Layout adapt√°vel para mobile e desktop\n- Anima√ß√µes e transi√ß√µes suaves\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Dominei Flexbox para layouts flex√≠veis\n- [ ] Compreendi CSS Grid para layouts complexos\n- [ ] Implementei design responsivo com media queries\n- [ ] Criei interfaces modernas e adapt√°veis\n- [ ] Apliquei boas pr√°ticas de CSS moderno\n- [ ] Completei o projeto de dashboard responsivo\n- [ ] Testei responsividade em diferentes dispositivos\n\n---\n\n*Parab√©ns! Voc√™ dominou CSS moderno e pode criar layouts responsivos e profissionais! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/css/css-moderno-responsivo.mp4",
                                    transcript: "CSS moderno com Flexbox, Grid e design responsivo √© essencial para criar interfaces web profissionais e adapt√°veis.",
                                    resources: [
                                        {
                                            type: "documentation",
                                            title: "MDN - Flexbox",
                                            url: "https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Flexible_Box_Layout",
                                            description: "Guia completo de Flexbox"
                                        },
                                        {
                                            type: "documentation",
                                            title: "MDN - CSS Grid",
                                            url: "https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_Grid_Layout",
                                            description: "Guia completo de CSS Grid"
                                        },
                                        {
                                            type: "guide",
                                            title: "CSS-Tricks - Flexbox",
                                            url: "https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
                                            description: "Guia visual de Flexbox"
                                        }
                                    ],
                                    exercises: [
                                        {
                                            title: "Layout Flexbox",
                                            description: "Criar layout responsivo usando Flexbox",
                                            difficulty: "medium",
                                            estimated_time: "60 minutos",
                                            instructions: "1. Implementar navega√ß√£o com Flexbox\n2. Criar cards flex√≠veis\n3. Aplicar alinhamentos e espa√ßamentos\n4. Testar responsividade"
                                        },
                                        {
                                            title: "Dashboard Grid",
                                            description: "Desenvolver dashboard usando CSS Grid",
                                            difficulty: "hard",
                                            estimated_time: "90 minutos",
                                            instructions: "1. Estruturar layout com Grid\n2. Criar √°reas nomeadas\n3. Implementar responsividade\n4. Adicionar interatividade"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            id: 4,
                            title: "JavaScript - Interatividade e Funcionalidades",
                            description: "Programa√ß√£o JavaScript para web com 10 aulas estruturadas: Introdu√ß√£o, Vari√°veis, Operadores, Estruturas de Controle, Fundamentos, DOM, Objetos, Manipula√ß√£o Avan√ßada do DOM, Eventos e Formul√°rios",
                            duration: 12,
                            lessons: [
                                {
                                    id: 4,
                                    title: "Aula 1: Introdu√ß√£o ao JavaScript",
                                    duration: 1800,
                                    type: "video",
                                    content: "Conceitos fundamentais sobre JavaScript, seu papel na web e formas de inser√ß√£o de scripts.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-1-introducao.mp4"
                                },
                                {
                                    id: 5,
                                    title: "Aula 2: Vari√°veis e Tipos de Dados",
                                    duration: 1800,
                                    type: "video",
                                    content: "Declara√ß√£o de vari√°veis (var, let, const), tipos primitivos e complexos, convers√£o e verifica√ß√£o de tipos.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-2-variaveis-tipos.mp4"
                                },
                                {
                                    id: 6,
                                    title: "Aula 3: Operadores e Express√µes",
                                    duration: 1800,
                                    type: "video",
                                    content: "Operadores matem√°ticos, de compara√ß√£o, l√≥gicos, tern√°rio e preced√™ncia de operadores.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-3-operadores.mp4"
                                },
                                {
                                    id: 7,
                                    title: "Aula 4: Estruturas de Controle",
                                    duration: 1800,
                                    type: "video",
                                    content: "Condicionais (if, else, switch), loops (for, while, do...while) e controle de fluxo (break, continue).",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-4-estruturas-controle.mp4"
                                },
                                {
                                    id: 8,
                                    title: "Aula 5: Fundamentos do JavaScript",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Aula 5: Fundamentos do JavaScript\n\n## üéØ Objetivos\n- Compreender conceitos fundamentais de JavaScript\n- Dominar estruturas b√°sicas de programa√ß√£o\n- Aplicar boas pr√°ticas de c√≥digo\n- Preparar base para conceitos avan√ßados\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. Conceitos Fundamentais**\n\n#### **O que √© JavaScript?**\n- Linguagem de programa√ß√£o interpretada\n- Executada no navegador (client-side)\n- Tamb√©m pode rodar no servidor (Node.js)\n- Linguagem din√¢mica e flex√≠vel\n\n#### **Caracter√≠sticas Principais:**\n- **Interpretada:** c√≥digo executado linha por linha\n- **Din√¢mica:** tipos podem mudar durante execu√ß√£o\n- **Funcional:** fun√ß√µes s√£o cidad√£os de primeira classe\n- **Orientada a objetos:** baseada em prot√≥tipos\n\n### **2. Estruturas B√°sicas**\n\n#### **Coment√°rios:**\n```javascript\n// Coment√°rio de uma linha\n/* Coment√°rio\n   de m√∫ltiplas\n   linhas */\n```\n\n#### **Declara√ß√µes:**\n```javascript\n// Cada instru√ß√£o termina com ponto e v√≠rgula\nlet nome = \"Jo√£o\";\nconst idade = 25;\nconsole.log(nome);\n```\n\n#### **Blocos de C√≥digo:**\n```javascript\n{\n    // Bloco de c√≥digo\n    let x = 10;\n    let y = 20;\n    console.log(x + y);\n}\n```\n\n### **3. Boas Pr√°ticas**\n\n#### **Nomenclatura:**\n```javascript\n// ‚úÖ Boas pr√°ticas\nlet nomeUsuario = \"Jo√£o\";\nconst PI = 3.14159;\nfunction calcularArea() {}\n\n// ‚ùå Evitar\nlet n = \"Jo√£o\";\nlet user_name = \"Jo√£o\";\nfunction calc() {}\n```\n\n#### **Formata√ß√£o:**\n```javascript\n// ‚úÖ C√≥digo limpo e leg√≠vel\nfunction calcularMedia(nota1, nota2, nota3) {\n    const soma = nota1 + nota2 + nota3;\n    const media = soma / 3;\n    return media;\n}\n```\n\n### **4. Estruturas de Controle Avan√ßadas**\n\n#### **Switch com Express√µes:**\n```javascript\nconst nota = 8;\nconst conceito = (() => {\n    switch (true) {\n        case nota >= 9: return 'A';\n        case nota >= 7: return 'B';\n        case nota >= 5: return 'C';\n        default: return 'D';\n    }\n})();\n```\n\n#### **Operador Tern√°rio Aninhado:**\n```javascript\nconst status = idade >= 18 \n    ? (idade >= 65 ? 'Idoso' : 'Adulto')\n    : (idade >= 12 ? 'Adolescente' : 'Crian√ßa');\n```\n\n### **5. Fun√ß√µes Avan√ßadas**\n\n#### **Fun√ß√µes com Par√¢metros Padr√£o:**\n```javascript\nfunction saudacao(nome = 'Visitante', hora = new Date().getHours()) {\n    if (hora < 12) return `Bom dia, ${nome}!`;\n    if (hora < 18) return `Boa tarde, ${nome}!`;\n    return `Boa noite, ${nome}!`;\n}\n```\n\n#### **Fun√ß√µes com Rest Parameters:**\n```javascript\nfunction soma(...numeros) {\n    return numeros.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(soma(1, 2, 3, 4, 5)); // 15\n```\n\n### **6. Arrays e Objetos Avan√ßados**\n\n#### **M√©todos de Array:**\n```javascript\nconst numeros = [1, 2, 3, 4, 5];\n\n// Map - transformar elementos\nconst dobros = numeros.map(n => n * 2);\nconsole.log(dobros); // [2, 4, 6, 8, 10]\n\n// Filter - filtrar elementos\nconst pares = numeros.filter(n => n % 2 === 0);\nconsole.log(pares); // [2, 4]\n\n// Reduce - acumular valores\nconst soma = numeros.reduce((acc, n) => acc + n, 0);\nconsole.log(soma); // 15\n```\n\n#### **Destructuring Avan√ßado:**\n```javascript\nconst pessoa = {\n    nome: 'Jo√£o',\n    idade: 25,\n    endereco: {\n        rua: 'Rua A',\n        cidade: 'S√£o Paulo'\n    }\n};\n\nconst { nome, endereco: { cidade } } = pessoa;\nconsole.log(nome, cidade); // Jo√£o S√£o Paulo\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Sistema de Gerenciamento de Notas:**\n\n```javascript\nclass GerenciadorNotas {\n    constructor() {\n        this.alunos = [];\n    }\n\n    adicionarAluno(nome, notas = []) {\n        const aluno = {\n            id: Date.now(),\n            nome,\n            notas: [...notas],\n            media: this.calcularMedia(notas),\n            conceito: this.calcularConceito(this.calcularMedia(notas))\n        };\n        \n        this.alunos.push(aluno);\n        return aluno;\n    }\n\n    calcularMedia(notas) {\n        if (notas.length === 0) return 0;\n        return notas.reduce((soma, nota) => soma + nota, 0) / notas.length;\n    }\n\n    calcularConceito(media) {\n        if (media >= 9) return 'A';\n        if (media >= 7) return 'B';\n        if (media >= 5) return 'C';\n        return 'D';\n    }\n\n    adicionarNota(alunoId, nota) {\n        const aluno = this.alunos.find(a => a.id === alunoId);\n        if (aluno) {\n            aluno.notas.push(nota);\n            aluno.media = this.calcularMedia(aluno.notas);\n            aluno.conceito = this.calcularConceito(aluno.media);\n        }\n    }\n\n    listarAlunos() {\n        return this.alunos.map(aluno => ({\n            nome: aluno.nome,\n            media: aluno.media.toFixed(2),\n            conceito: aluno.conceito,\n            totalNotas: aluno.notas.length\n        }));\n    }\n\n    buscarAlunoPorNome(nome) {\n        return this.alunos.filter(aluno => \n            aluno.nome.toLowerCase().includes(nome.toLowerCase())\n        );\n    }\n\n    estatisticas() {\n        const medias = this.alunos.map(a => a.media);\n        const mediaGeral = this.calcularMedia(medias);\n        const aprovados = this.alunos.filter(a => a.media >= 7).length;\n        \n        return {\n            totalAlunos: this.alunos.length,\n            mediaGeral: mediaGeral.toFixed(2),\n            aprovados,\n            reprovados: this.alunos.length - aprovados,\n            percentualAprovacao: ((aprovados / this.alunos.length) * 100).toFixed(1)\n        };\n    }\n}\n\n// Uso do sistema\nconst gerenciador = new GerenciadorNotas();\n\n// Adicionar alunos\nconst aluno1 = gerenciador.adicionarAluno('Ana Silva', [8.5, 9.0, 7.5]);\nconst aluno2 = gerenciador.adicionarAluno('Jo√£o Santos', [6.0, 7.5, 8.0]);\nconst aluno3 = gerenciador.adicionarAluno('Maria Costa', [9.5, 9.0, 9.5]);\n\n// Adicionar nova nota\ngerenciador.adicionarNota(aluno1.id, 8.0);\n\n// Listar alunos\nconsole.log('Lista de Alunos:');\nconsole.table(gerenciador.listarAlunos());\n\n// Estat√≠sticas\nconsole.log('\\nEstat√≠sticas:');\nconsole.table(gerenciador.estatisticas());\n\n// Buscar aluno\nconsole.log('\\nBusca por \"Ana\":');\nconsole.table(gerenciador.buscarAlunoPorNome('Ana'));\n```\n\n## üõ† Desafio da Aula\n\n**Implementar sistema de valida√ß√£o de formul√°rios.**\n\n**Requisitos:**\n- Valida√ß√£o de campos obrigat√≥rios\n- Valida√ß√£o de formato de e-mail\n- Valida√ß√£o de senha (m√≠nimo 8 caracteres, mai√∫scula, min√∫scula, n√∫mero)\n- Valida√ß√£o de CPF\n- Mensagens de erro personalizadas\n- Valida√ß√£o em tempo real\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Sistema de valida√ß√£o de formul√°rios\n- Gerenciamento de dados com classes\n- Valida√ß√µes em tempo real\n- Tratamento de erros robusto\n- Interface responsiva e intuitiva\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Compreendi conceitos fundamentais de JavaScript\n- [ ] Dominei estruturas b√°sicas de programa√ß√£o\n- [ ] Apliquei boas pr√°ticas de c√≥digo\n- [ ] Implementei sistema de gerenciamento de notas\n- [ ] Criei valida√ß√µes de formul√°rio\n- [ ] Testei todas as funcionalidades\n- [ ] Preparei base para conceitos avan√ßados\n\n---\n\n*Parab√©ns! Voc√™ tem uma base s√≥lida em JavaScript e est√° pronto para os pr√≥ximos desafios! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-5-fundamentos.mp4"
                                },
                                {
                                    id: 9,
                                    title: "Aula 6: Manipula√ß√£o do DOM",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Aula 6: Manipula√ß√£o do DOM\n\n## üéØ Objetivos\n- Compreender o que √© o DOM e sua estrutura\n- Dominar m√©todos de sele√ß√£o de elementos\n- Manipular conte√∫do, atributos e estilos\n- Criar e remover elementos dinamicamente\n- Implementar intera√ß√µes b√°sicas na p√°gina\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. O que √© o DOM?**\n\n**DOM (Document Object Model)** √© uma representa√ß√£o **em √°rvore** da p√°gina HTML pelo navegador. Cada elemento HTML √© um **n√≥** que pode ser manipulado via JavaScript.\n\n#### **Estrutura Hier√°rquica:**\n```\nDocument\n‚îú‚îÄ‚îÄ html\n‚îÇ   ‚îú‚îÄ‚îÄ head\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ title\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ meta\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ link\n‚îÇ   ‚îî‚îÄ‚îÄ body\n‚îÇ       ‚îú‚îÄ‚îÄ header\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ h1\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ nav\n‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ ul\n‚îÇ       ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ li\n‚îÇ       ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ li\n‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ button\n‚îÇ       ‚îú‚îÄ‚îÄ main\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ section\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ h2\n‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ p\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ article\n‚îÇ       ‚îî‚îÄ‚îÄ footer\n```\n\n### **2. Sele√ß√£o de Elementos**\n\n#### **M√©todos de Sele√ß√£o:**\n```javascript\n// Por ID (retorna um elemento)\nconst titulo = document.getElementById('titulo');\n\n// Por classe (retorna HTMLCollection)\nconst botoes = document.getElementsByClassName('btn');\n\n// Por tag (retorna HTMLCollection)\nconst paragrafos = document.getElementsByTagName('p');\n\n// Por seletor CSS (retorna o primeiro elemento)\nconst primeiroBotao = document.querySelector('.btn');\n\n// Por seletor CSS (retorna todos os elementos)\nconst todosBotoes = document.querySelectorAll('.btn');\n```\n\n#### **Seletores CSS Avan√ßados:**\n```javascript\n// Primeiro elemento de uma lista\nconst primeiroItem = document.querySelector('ul li:first-child');\n\n// Elemento com m√∫ltiplas classes\nconst botaoEspecial = document.querySelector('.btn.btn-primary.btn-lg');\n\n// Elemento dentro de outro\nconst tituloDentro = document.querySelector('#main h1');\n\n// Elemento com atributo espec√≠fico\nconst inputObrigatorio = document.querySelector('input[required]');\n\n// Elemento com valor espec√≠fico\nconst inputEmail = document.querySelector('input[type=\"email\"]');\n\n// Elemento com texto espec√≠fico\nconst paragrafoComTexto = document.querySelector('p:contains(\"JavaScript\")');\n```\n\n### **3. Manipulando Conte√∫do**\n\n#### **Alterando Texto:**\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// textContent - apenas texto (mais seguro)\nelemento.textContent = 'Novo texto aqui';\n\n// innerHTML - HTML interno (cuidado com XSS)\nelemento.innerHTML = '<strong>Texto em negrito</strong>';\n\n// innerText - texto vis√≠vel (considera CSS)\nelemento.innerText = 'Texto vis√≠vel';\n\n// insertAdjacentHTML - inserir HTML em posi√ß√µes espec√≠ficas\nelemento.insertAdjacentHTML('beforebegin', '<p>Antes do elemento</p>');\nelemento.insertAdjacentHTML('afterbegin', '<p>Dentro, no in√≠cio</p>');\nelemento.insertAdjacentHTML('beforeend', '<p>Dentro, no final</p>');\nelemento.insertAdjacentHTML('afterend', '<p>Depois do elemento</p>');\n```\n\n#### **Alterando Atributos:**\n```javascript\nconst imagem = document.querySelector('img');\n\n// Definir atributo\nimagem.setAttribute('src', 'nova-imagem.jpg');\nimagem.setAttribute('alt', 'Descri√ß√£o da nova imagem');\nimagem.setAttribute('data-id', '123');\n\n// Obter valor do atributo\nconst srcAtual = imagem.getAttribute('src');\nconst dataId = imagem.getAttribute('data-id');\n\n// Remover atributo\nimagem.removeAttribute('alt');\n\n// Atributos diretos (para atributos padr√£o)\nimagem.src = 'nova-imagem.jpg';\nimagem.alt = 'Nova descri√ß√£o';\nimagem.width = 300;\nimagem.height = 200;\n\n// Atributos data personalizados\nimagem.dataset.id = '456';\nimagem.dataset.categoria = 'produto';\n```\n\n### **4. Manipula√ß√£o de Classes**\n\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// Adicionar classe\nelemento.classList.add('nova-classe');\nelemento.classList.add('classe1', 'classe2');\n\n// Remover classe\nelemento.classList.remove('classe-antiga');\nelemento.classList.remove('classe1', 'classe2');\n\n// Alternar classe\nelemento.classList.toggle('classe-ativa');\nelemento.classList.toggle('classe-ativa', true);  // For√ßa adicionar\nelemento.classList.toggle('classe-ativa', false); // For√ßa remover\n\n// Verificar se tem classe\nif (elemento.classList.contains('classe-especial')) {\n    console.log('Elemento tem a classe especial');\n}\n\n// Substituir todas as classes\nelemento.className = 'nova-classe outra-classe';\n\n// Listar todas as classes\nconst classes = Array.from(elemento.classList);\nconsole.log('Classes:', classes);\n```\n\n### **5. Manipula√ß√£o de Estilos**\n\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// Estilos inline\nelemento.style.backgroundColor = 'red';\nelemento.style.color = 'white';\nelemento.style.fontSize = '18px';\nelemento.style.padding = '20px';\nelemento.style.borderRadius = '5px';\nelemento.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';\n\n// M√∫ltiplos estilos\nObject.assign(elemento.style, {\n    backgroundColor: 'blue',\n    color: 'white',\n    fontSize: '20px',\n    padding: '15px',\n    borderRadius: '5px',\n    transition: 'all 0.3s ease'\n});\n\n// Estilos com propriedades CSS\nconst propriedadesCSS = {\n    'background-color': 'green',\n    'font-size': '16px',\n    'text-align': 'center',\n    'margin-top': '10px'\n};\n\nObject.entries(propriedadesCSS).forEach(([prop, valor]) => {\n    elemento.style.setProperty(prop, valor);\n});\n\n// Obter estilos computados\nconst estilos = window.getComputedStyle(elemento);\nconst corFundo = estilos.backgroundColor;\nconst tamanhoFonte = estilos.fontSize;\nconst largura = estilos.width;\n\n// Verificar se elemento est√° vis√≠vel\nconst isVisible = estilos.display !== 'none' && \n                  estilos.visibility !== 'hidden' && \n                  estilos.opacity !== '0';\n```\n\n### **6. Cria√ß√£o e Remo√ß√£o de Elementos**\n\n#### **Criando Elementos:**\n```javascript\n// Criar elemento\nconst novoParagrafo = document.createElement('p');\nnovoParagrafo.textContent = 'Este √© um novo par√°grafo';\nnovoParagrafo.className = 'destaque';\nnovoParagrafo.id = 'paragrafo-novo';\n\n// Adicionar ao DOM\nconst container = document.getElementById('container');\ncontainer.appendChild(novoParagrafo);\n\n// Inserir antes de outro elemento\nconst elementoReferencia = document.getElementById('referencia');\ncontainer.insertBefore(novoParagrafo, elementoReferencia);\n\n// Inserir em posi√ß√£o espec√≠fica\ncontainer.insertAdjacentHTML('beforeend', '<p>Par√°grafo inserido</p>');\ncontainer.insertAdjacentElement('afterbegin', novoParagrafo);\n\n// Criar elemento com HTML\nconst divHTML = document.createElement('div');\ndivHTML.innerHTML = '<h3>T√≠tulo</h3><p>Conte√∫do</p>';\ncontainer.appendChild(divHTML);\n```\n\n#### **Removendo Elementos:**\n```javascript\n// Remover elemento\nconst elementoParaRemover = document.getElementById('remover');\nelementoParaRemover.remove();\n\n// Remover filho espec√≠fico\nconst pai = document.getElementById('pai');\nconst filho = document.getElementById('filho');\npai.removeChild(filho);\n\n// Remover todos os filhos\nwhile (pai.firstChild) {\n    pai.removeChild(pai.firstChild);\n}\n\n// Remover usando parentNode\nfilho.parentNode.removeChild(filho);\n```\n\n### **7. Navega√ß√£o no DOM**\n\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// Elementos pai\nconst pai = elemento.parentElement;\nconst paiNode = elemento.parentNode;\nconst paiClosest = elemento.closest('.container');\n\n// Elementos filhos\nconst filhos = elemento.children; // HTMLCollection\nconst filhosNodes = elemento.childNodes; // NodeList (inclui texto)\nconst primeiroFilho = elemento.firstElementChild;\nconst ultimoFilho = elemento.lastElementChild;\n\n// Elementos irm√£os\nconst proximoIrmao = elemento.nextElementSibling;\nconst irmaoAnterior = elemento.previousElementSibling;\nconst todosIrmaos = Array.from(elemento.parentElement.children).filter(\n    child => child !== elemento\n);\n\n// Navegar para elementos espec√≠ficos\nconst proximoParagrafo = elemento.nextElementSibling;\nconst paragrafoAnterior = elemento.previousElementSibling;\n\n// Encontrar elemento pai com classe espec√≠fica\nconst containerPai = elemento.closest('.container');\n```\n\n### **8. Eventos do DOM**\n\n```javascript\nconst botao = document.getElementById('meuBotao');\n\n// Adicionar evento\nbotao.addEventListener('click', function(event) {\n    console.log('Bot√£o clicado!');\n    console.log('Evento:', event);\n    console.log('Elemento:', this);\n});\n\n// Evento com arrow function\nbotao.addEventListener('click', (event) => {\n    console.log('Bot√£o clicado com arrow function!');\n    console.log('Elemento:', event.target);\n});\n\n// M√∫ltiplos eventos\nbotao.addEventListener('mouseenter', () => {\n    botao.style.backgroundColor = 'blue';\n});\n\nbotao.addEventListener('mouseleave', () => {\n    botao.style.backgroundColor = 'red';\n});\n\n// Remover evento\nconst handler = () => console.log('Evento removido');\nbotao.addEventListener('click', handler);\nbotao.removeEventListener('click', handler);\n\n// Eventos de teclado\nconst input = document.getElementById('meuInput');\ninput.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n        console.log('Enter pressionado!');\n    }\n});\n\n// Eventos de formul√°rio\nconst form = document.getElementById('meuForm');\nform.addEventListener('submit', (event) => {\n    event.preventDefault(); // Previne envio padr√£o\n    console.log('Formul√°rio submetido!');\n});\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Sistema de Valida√ß√£o de Formul√°rio Interativo:**\n\n```html\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Valida√ß√£o de Formul√°rio</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 20px;\n        }\n\n        .container {\n            background: white;\n            padding: 40px;\n            border-radius: 15px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            width: 100%;\n            max-width: 500px;\n        }\n\n        h1 {\n            text-align: center;\n            color: #333;\n            margin-bottom: 30px;\n            font-size: 2rem;\n        }\n\n        .form-group {\n            margin-bottom: 25px;\n            position: relative;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 600;\n            color: #555;\n            font-size: 14px;\n        }\n\n        input, select, textarea {\n            width: 100%;\n            padding: 15px;\n            border: 2px solid #e1e5e9;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: all 0.3s ease;\n            background: #f8f9fa;\n        }\n\n        input:focus, select:focus, textarea:focus {\n            outline: none;\n            border-color: #667eea;\n            background: white;\n            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n        }\n\n        .form-group.error input,\n        .form-group.error select,\n        .form-group.error textarea {\n            border-color: #e74c3c;\n            background: #fdf2f2;\n        }\n\n        .form-group.success input,\n        .form-group.success select,\n        .form-group.success textarea {\n            border-color: #27ae60;\n            background: #f0f9f0;\n        }\n\n        .error-message {\n            color: #e74c3c;\n            font-size: 12px;\n            margin-top: 5px;\n            display: none;\n        }\n\n        .form-group.error .error-message {\n            display: block;\n        }\n\n        .success-message {\n            color: #27ae60;\n            font-size: 12px;\n            margin-top: 5px;\n            display: none;\n        }\n\n        .form-group.success .success-message {\n            display: block;\n        }\n\n        .form-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n\n        button {\n            width: 100%;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 15px;\n            border: none;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: transform 0.3s ease;\n        }\n\n        button:hover {\n            transform: translateY(-2px);\n        }\n\n        button:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n\n        .progress-bar {\n            width: 100%;\n            height: 6px;\n            background: #e1e5e9;\n            border-radius: 3px;\n            margin-bottom: 30px;\n            overflow: hidden;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n\n        .form-summary {\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 8px;\n            margin-top: 20px;\n            display: none;\n        }\n\n        .form-summary h3 {\n            margin-bottom: 15px;\n            color: #333;\n        }\n\n        .summary-item {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n            padding-bottom: 10px;\n            border-bottom: 1px solid #e1e5e9;\n        }\n\n        .summary-label {\n            font-weight: 600;\n            color: #555;\n        }\n\n        .summary-value {\n            color: #667eea;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>üìù Formul√°rio de Cadastro</h1>\n        \n        <div class=\"progress-bar\">\n            <div class=\"progress-fill\" id=\"progressBar\"></div>\n        </div>\n        \n        <form id=\"cadastroForm\">\n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label for=\"nome\">Nome *</label>\n                    <input type=\"text\" id=\"nome\" name=\"nome\" required>\n                    <div class=\"error-message\" id=\"nomeError\">Nome √© obrigat√≥rio</div>\n                    <div class=\"success-message\" id=\"nomeSuccess\">Nome v√°lido!</div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"sobrenome\">Sobrenome *</label>\n                    <input type=\"text\" id=\"sobrenome\" name=\"sobrenome\" required>\n                    <div class=\"error-message\" id=\"sobrenomeError\">Sobrenome √© obrigat√≥rio</div>\n                    <div class=\"success-message\" id=\"sobrenomeSuccess\">Sobrenome v√°lido!</div>\n                </div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"email\">E-mail *</label>\n                <input type=\"email\" id=\"email\" name=\"email\" required>\n                <div class=\"error-message\" id=\"emailError\">E-mail inv√°lido</div>\n                <div class=\"success-message\" id=\"emailSuccess\">E-mail v√°lido!</div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"telefone\">Telefone</label>\n                <input type=\"tel\" id=\"telefone\" name=\"telefone\" placeholder=\"(11) 99999-9999\">\n                <div class=\"error-message\" id=\"telefoneError\">Telefone inv√°lido</div>\n                <div class=\"success-message\" id=\"telefoneSuccess\">Telefone v√°lido!</div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"categoria\">Categoria *</label>\n                <select id=\"categoria\" name=\"categoria\" required>\n                    <option value=\"\">Selecione uma categoria</option>\n                    <option value=\"estudante\">Estudante</option>\n                    <option value=\"profissional\">Profissional</option>\n                    <option value=\"empresario\">Empres√°rio</option>\n                    <option value=\"outro\">Outro</option>\n                </select>\n                <div class=\"error-message\" id=\"categoriaError\">Categoria √© obrigat√≥ria</div>\n                <div class=\"success-message\" id=\"categoriaSuccess\">Categoria selecionada!</div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"mensagem\">Mensagem</label>\n                <textarea id=\"mensagem\" name=\"mensagem\" rows=\"4\" placeholder=\"Conte-nos sobre voc√™...\"></textarea>\n                <div class=\"error-message\" id=\"mensagemError\">Mensagem muito curta</div>\n                <div class=\"success-message\" id=\"mensagemSuccess\">Mensagem v√°lida!</div>\n            </div>\n            \n            <button type=\"submit\" id=\"submitBtn\">üì§ Enviar Cadastro</button>\n        </form>\n        \n        <div class=\"form-summary\" id=\"formSummary\">\n            <h3>üìã Resumo do Cadastro</h3>\n            <div id=\"summaryContent\"></div>\n        </div>\n    </div>\n\n    <script>\n        class ValidadorFormulario {\n            constructor() {\n                this.form = document.getElementById('cadastroForm');\n                this.progressBar = document.getElementById('progressBar');\n                this.submitBtn = document.getElementById('submitBtn');\n                this.formSummary = document.getElementById('formSummary');\n                this.summaryContent = document.getElementById('summaryContent');\n                \n                this.campos = {};\n                this.camposValidos = 0;\n                this.totalCampos = 0;\n                \n                this.inicializar();\n            }\n\n            inicializar() {\n                this.configurarCampos();\n                this.configurarEventos();\n                this.atualizarProgresso();\n            }\n\n            configurarCampos() {\n                const camposObrigatorios = ['nome', 'sobrenome', 'email', 'categoria'];\n                const camposOpcionais = ['telefone', 'mensagem'];\n                \n                [...camposObrigatorios, ...camposOpcionais].forEach(campoId => {\n                    const campo = document.getElementById(campoId);\n                    const formGroup = campo.closest('.form-group');\n                    \n                    this.campos[campoId] = {\n                        elemento: campo,\n                        formGroup: formGroup,\n                        obrigatorio: camposObrigatorios.includes(campoId),\n                        valido: false\n                    };\n                    \n                    if (camposObrigatorios.includes(campoId)) {\n                        this.totalCampos++;\n                    }\n                });\n            }\n\n            configurarEventos() {\n                // Eventos de valida√ß√£o em tempo real\n                Object.entries(this.campos).forEach(([campoId, campo]) => {\n                    campo.elemento.addEventListener('input', () => {\n                        this.validarCampo(campoId);\n                        this.atualizarProgresso();\n                    });\n                    \n                    campo.elemento.addEventListener('blur', () => {\n                        this.validarCampo(campoId);\n                        this.atualizarProgresso();\n                    });\n                });\n\n                // Evento de envio do formul√°rio\n                this.form.addEventListener('submit', (e) => {\n                    e.preventDefault();\n                    this.validarFormulario();\n                });\n            }\n\n            validarCampo(campoId) {\n                const campo = this.campos[campoId];\n                const valor = campo.elemento.value.trim();\n                let valido = true;\n                let mensagem = '';\n\n                // Valida√ß√µes espec√≠ficas por campo\n                switch (campoId) {\n                    case 'nome':\n                    case 'sobrenome':\n                        if (campo.obrigatorio && !valor) {\n                            valido = false;\n                            mensagem = `${campoId.charAt(0).toUpperCase() + campoId.slice(1)} √© obrigat√≥rio`;\n                        } else if (valor && valor.length < 2) {\n                            valido = false;\n                            mensagem = `${campoId.charAt(0).toUpperCase() + campoId.slice(1)} deve ter pelo menos 2 caracteres`;\n                        }\n                        break;\n                        \n                    case 'email':\n                        if (campo.obrigatorio && !valor) {\n                            valido = false;\n                            mensagem = 'E-mail √© obrigat√≥rio';\n                        } else if (valor && !this.validarEmail(valor)) {\n                            valido = false;\n                            mensagem = 'E-mail inv√°lido';\n                        }\n                        break;\n                        \n                    case 'telefone':\n                        if (valor && !this.validarTelefone(valor)) {\n                            valido = false;\n                            mensagem = 'Telefone inv√°lido';\n                        }\n                        break;\n                        \n                    case 'categoria':\n                        if (campo.obrigatorio && !valor) {\n                            valido = false;\n                            mensagem = 'Categoria √© obrigat√≥ria';\n                        }\n                        break;\n                        \n                    case 'mensagem':\n                        if (valor && valor.length < 10) {\n                            valido = false;\n                            mensagem = 'Mensagem deve ter pelo menos 10 caracteres';\n                        }\n                        break;\n                }\n\n                // Aplicar valida√ß√£o visual\n                this.aplicarValidacao(campoId, valido, mensagem);\n                \n                // Atualizar contador de campos v√°lidos\n                if (campo.obrigatorio) {\n                    if (campo.valido !== valido) {\n                        campo.valido = valido;\n                        if (valido) {\n                            this.camposValidos++;\n                        } else {\n                            this.camposValidos--;\n                        }\n                    }\n                }\n            }\n\n            validarEmail(email) {\n                const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                return regex.test(email);\n            }\n\n            validarTelefone(telefone) {\n                const regex = /^\\(?([0-9]{2})\\)?[-.\\s]?([0-9]{4,5})[-.\\s]?([0-9]{4})$/;\n                return regex.test(telefone);\n            }\n\n            aplicarValidacao(campoId, valido, mensagem) {\n                const campo = this.campos[campoId];\n                const formGroup = campo.formGroup;\n                const errorElement = formGroup.querySelector('.error-message');\n                const successElement = formGroup.querySelector('.success-message');\n\n                // Remover classes anteriores\n                formGroup.classList.remove('error', 'success');\n                \n                if (valido) {\n                    formGroup.classList.add('success');\n                    if (errorElement) errorElement.style.display = 'none';\n                    if (successElement) successElement.style.display = 'block';\n                } else {\n                    formGroup.classList.add('error');\n                    if (errorElement) {\n                        errorElement.textContent = mensagem;\n                        errorElement.style.display = 'block';\n                    }\n                    if (successElement) successElement.style.display = 'none';\n                }\n            }\n\n            atualizarProgresso() {\n                const percentual = this.totalCampos > 0 ? (this.camposValidos / this.totalCampos) * 100 : 0;\n                this.progressBar.style.width = `${percentual}%`;\n                \n                // Atualizar estado do bot√£o\n                this.submitBtn.disabled = this.camposValidos < this.totalCampos;\n            }\n\n            validarFormulario() {\n                // Validar todos os campos obrigat√≥rios\n                Object.keys(this.campos).forEach(campoId => {\n                    if (this.campos[campoId].obrigatorio) {\n                        this.validarCampo(campoId);\n                    }\n                });\n\n                if (this.camposValidos === this.totalCampos) {\n                    this.enviarFormulario();\n                } else {\n                    alert('Por favor, corrija os erros no formul√°rio antes de enviar.');\n                }\n            }\n\n            enviarFormulario() {\n                // Simular envio\n                this.submitBtn.textContent = 'üì§ Enviando...';\n                this.submitBtn.disabled = true;\n\n                setTimeout(() => {\n                    this.mostrarResumo();\n                    this.submitBtn.textContent = '‚úÖ Enviado com Sucesso!';\n                    this.submitBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';\n                }, 2000);\n            }\n\n            mostrarResumo() {\n                const dados = {};\n                Object.entries(this.campos).forEach(([campoId, campo]) => {\n                    if (campo.elemento.value.trim()) {\n                        dados[campoId] = campo.elemento.value.trim();\n                    }\n                });\n\n                let html = '';\n                Object.entries(dados).forEach(([campo, valor]) => {\n                    const label = campo.charAt(0).toUpperCase() + campo.slice(1);\n                    html += `\n                        <div class=\"summary-item\">\n                            <span class=\"summary-label\">${label}:</span>\n                            <span class=\"summary-value\">${valor}</span>\n                        </div>\n                    `;\n                });\n\n                this.summaryContent.innerHTML = html;\n                this.formSummary.style.display = 'block';\n            }\n        }\n\n        // Inicializar o validador\n        const validador = new ValidadorFormulario();\n    </script>\n</body>\n</html>\n```\n\n## üõ† Desafio da Aula\n\n**Implementar sistema de valida√ß√£o avan√ßada.**\n\n**Requisitos:**\n- Valida√ß√£o de CPF com algoritmo\n- Valida√ß√£o de CEP com API externa\n- Valida√ß√£o de senha com crit√©rios m√∫ltiplos\n- Valida√ß√£o de arquivo (tamanho, tipo)\n- Sistema de m√°scaras para campos\n- Valida√ß√£o em tempo real com debounce\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Sistema de valida√ß√£o robusto\n- Feedback visual em tempo real\n- M√°scaras para campos de data e telefone\n- Valida√ß√£o de arquivos de imagem\n- Sistema de notifica√ß√µes de erro/sucesso\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Entendi o que √© o DOM e sua rela√ß√£o com HTML\n- [ ] Selecionei elementos do HTML usando JavaScript\n- [ ] Manipulei conte√∫do, atributos e estilos dos elementos\n- [ ] Apliquei intera√ß√µes no projeto real\n- [ ] Implementei valida√ß√µes e feedback visual\n- [ ] Completei o sistema de valida√ß√£o de formul√°rio\n- [ ] Testei todas as funcionalidades de manipula√ß√£o do DOM\n\n---\n\n*Parab√©ns! Voc√™ dominou a manipula√ß√£o do DOM e pode criar formul√°rios interativos e validados! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-8-dom.mp4"
                                },
                                {
                                    id: 10,
                                    title: "Aula 7: Objetos",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Aula 7: Objetos em JavaScript\n\n## üéØ Objetivos\n- Compreender o que s√£o objetos em JavaScript\n- Criar, acessar e manipular propriedades e m√©todos\n- Utilizar `this` e t√©cnicas de itera√ß√£o sobre objetos\n- Aplicar objetos no projeto real para organizar dados\n- Implementar padr√µes de design orientado a objetos\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. O que s√£o Objetos?**\n\nObjetos s√£o estruturas que armazenam **pares chave-valor**, onde as chaves s√£o strings (ou identificadores v√°lidos) e os valores podem ser qualquer tipo de dado, incluindo fun√ß√µes.\n\n#### **Caracter√≠sticas dos Objetos:**\n- **Cole√ß√µes de dados:** organizam informa√ß√µes relacionadas\n- **Refer√™ncia:** s√£o passados por refer√™ncia, n√£o por valor\n- **Mut√°veis:** podem ser alterados ap√≥s cria√ß√£o\n- **Din√¢micos:** propriedades podem ser adicionadas/removidas\n\n### **2. Cria√ß√£o de Objetos**\n\n#### **Nota√ß√£o Literal (Recomendada):**\n```javascript\nconst pessoa = {\n    nome: \"Jo√£o Silva\",\n    idade: 25,\n    email: \"joao@email.com\",\n    ativo: true,\n    endereco: {\n        rua: \"Rua das Flores\",\n        cidade: \"S√£o Paulo\",\n        cep: \"01234-567\"\n    },\n    hobbies: [\"m√∫sica\", \"esportes\", \"leitura\"]\n};\n```\n\n#### **Construtor Object:**\n```javascript\nconst carro = new Object();\ncarro.marca = \"Toyota\";\ncarro.modelo = \"Corolla\";\ncarro.ano = 2020;\n```\n\n#### **Object.create():**\n```javascript\nconst animal = Object.create(null);\nanimal.tipo = \"Cachorro\";\nanimal.nome = \"Rex\";\n```\n\n### **3. Acessando Propriedades**\n\n#### **Nota√ß√£o de Ponto:**\n```javascript\nconsole.log(pessoa.nome);           // Jo√£o Silva\nconsole.log(pessoa.endereco.cidade); // S√£o Paulo\nconsole.log(pessoa.hobbies[0]);      // m√∫sica\n```\n\n#### **Nota√ß√£o de Colchetes:**\n```javascript\nconst propriedade = \"idade\";\nconsole.log(pessoa[propriedade]);    // 25\nconsole.log(pessoa[\"endereco\"][\"rua\"]); // Rua das Flores\n```\n\n#### **Verifica√ß√£o de Exist√™ncia:**\n```javascript\n// Verificar se propriedade existe\nif (pessoa.hasOwnProperty('nome')) {\n    console.log('Propriedade nome existe');\n}\n\n// Verificar se propriedade existe (m√©todo moderno)\nif ('idade' in pessoa) {\n    console.log('Propriedade idade existe');\n}\n\n// Verificar se propriedade √© undefined\nif (pessoa.telefone !== undefined) {\n    console.log('Telefone:', pessoa.telefone);\n}\n```\n\n### **4. Manipulando Propriedades**\n\n#### **Adicionando Propriedades:**\n```javascript\npessoa.telefone = \"(11) 99999-9999\";\npessoa.profissao = \"Desenvolvedor\";\npessoa.redesSociais = {\n    linkedin: \"linkedin.com/in/joaosilva\",\n    github: \"github.com/joaosilva\"\n};\n```\n\n#### **Alterando Propriedades:**\n```javascript\npessoa.idade = 26;\npessoa.endereco.cidade = \"Rio de Janeiro\";\npessoa.hobbies.push(\"programa√ß√£o\");\n```\n\n#### **Removendo Propriedades:**\n```javascript\n// Usando delete\ndelete pessoa.telefone;\n\n// Definindo como undefined\npessoa.profissao = undefined;\n\n// Usando destructuring para omitir propriedades\nconst { telefone, ...pessoaSemTelefone } = pessoa;\n```\n\n### **5. M√©todos de Objetos**\n\nM√©todos s√£o fun√ß√µes que pertencem a um objeto e podem acessar suas propriedades atrav√©s da palavra-chave `this`.\n\n#### **Definindo M√©todos:**\n```javascript\nconst calculadora = {\n    valor1: 0,\n    valor2: 0,\n    \n    // M√©todo para definir valores\n    definirValores: function(v1, v2) {\n        this.valor1 = v1;\n        this.valor2 = v2;\n    },\n    \n    // M√©todo para somar\n    somar: function() {\n        return this.valor1 + this.valor2;\n    },\n    \n    // M√©todo para multiplicar\n    multiplicar: function() {\n        return this.valor1 * this.valor2;\n    },\n    \n    // M√©todo para obter informa√ß√µes\n    obterInfo: function() {\n        return `Valores: ${this.valor1} e ${this.valor2}`;\n    }\n};\n\n// Usando os m√©todos\ncalculadora.definirValores(10, 5);\nconsole.log(calculadora.somar());        // 15\nconsole.log(calculadora.multiplicar());  // 50\nconsole.log(calculadora.obterInfo());    // Valores: 10 e 5\n```\n\n#### **M√©todos com Arrow Functions (Cuidado!):**\n```javascript\nconst exemplo = {\n    nome: \"Teste\",\n    \n    // ‚ùå Arrow function - this n√£o funciona como esperado\n    metodo1: () => {\n        console.log(this.nome); // undefined\n    },\n    \n    // ‚úÖ Fun√ß√£o tradicional - this funciona corretamente\n    metodo2: function() {\n        console.log(this.nome); // Teste\n    },\n    \n    // ‚úÖ M√©todo abreviado (ES6+)\n    metodo3() {\n        console.log(this.nome); // Teste\n    }\n};\n```\n\n### **6. Iterando sobre Objetos**\n\n#### **for...in Loop:**\n```javascript\nconst pessoa = {\n    nome: \"Jo√£o\",\n    idade: 25,\n    cidade: \"S√£o Paulo\"\n};\n\nfor (let chave in pessoa) {\n    console.log(`${chave}: ${pessoa[chave]}`);\n}\n// nome: Jo√£o\n// idade: 25\n// cidade: S√£o Paulo\n```\n\n#### **Object.keys():**\n```javascript\nconst chaves = Object.keys(pessoa);\nconsole.log(chaves); // ['nome', 'idade', 'cidade']\n\nchaves.forEach(chave => {\n    console.log(`${chave}: ${pessoa[chave]}`);\n});\n```\n\n#### **Object.values():**\n```javascript\nconst valores = Object.values(pessoa);\nconsole.log(valores); // ['Jo√£o', 25, 'S√£o Paulo']\n```\n\n#### **Object.entries():**\n```javascript\nconst entradas = Object.entries(pessoa);\nconsole.log(entradas); // [['nome', 'Jo√£o'], ['idade', 25], ['cidade', 'S√£o Paulo']]\n\nentradas.forEach(([chave, valor]) => {\n    console.log(`${chave}: ${valor}`);\n});\n```\n\n### **7. Getters e Setters**\n\n```javascript\nconst conta = {\n    _saldo: 1000, // Propriedade privada (conven√ß√£o)\n    \n    // Getter para saldo\n    get saldo() {\n        return this._saldo;\n    },\n    \n    // Setter para saldo com valida√ß√£o\n    set saldo(novoSaldo) {\n        if (novoSaldo >= 0) {\n            this._saldo = novoSaldo;\n        } else {\n            console.error('Saldo n√£o pode ser negativo');\n        }\n    },\n    \n    // M√©todo para depositar\n    depositar(valor) {\n        if (valor > 0) {\n            this._saldo += valor;\n            return true;\n        }\n        return false;\n    },\n    \n    // M√©todo para sacar\n    sacar(valor) {\n        if (valor > 0 && valor <= this._saldo) {\n            this._saldo -= valor;\n            return true;\n        }\n        return false;\n    }\n};\n\n// Usando getters e setters\nconsole.log(conta.saldo);     // 1000\nconta.saldo = 1500;          // Usando setter\nconsole.log(conta.saldo);     // 1500\nconta.depositar(500);        // 2000\nconta.sacar(300);            // 1700\n```\n\n### **8. Object Destructuring**\n\n```javascript\nconst usuario = {\n    id: 1,\n    nome: \"Maria\",\n    email: \"maria@email.com\",\n    perfil: {\n        tipo: \"admin\",\n        permissoes: [\"read\", \"write\", \"delete\"]\n    }\n};\n\n// Destructuring b√°sico\nconst { nome, email } = usuario;\nconsole.log(nome, email); // Maria maria@email.com\n\n// Destructuring com renomea√ß√£o\nconst { nome: nomeUsuario, email: emailUsuario } = usuario;\nconsole.log(nomeUsuario, emailUsuario); // Maria maria@email.com\n\n// Destructuring aninhado\nconst { perfil: { tipo, permissoes } } = usuario;\nconsole.log(tipo, permissoes); // admin ['read', 'write', 'delete']\n\n// Destructuring com valores padr√£o\nconst { telefone = \"N√£o informado\" } = usuario;\nconsole.log(telefone); // N√£o informado\n\n// Destructuring em par√¢metros de fun√ß√£o\nfunction processarUsuario({ nome, email, perfil: { tipo } }) {\n    console.log(`Usu√°rio ${nome} (${email}) tem perfil ${tipo}`);\n}\n\nprocessarUsuario(usuario); // Usu√°rio Maria (maria@email.com) tem perfil admin\n```\n\n### **9. Spread e Rest com Objetos**\n\n```javascript\nconst configuracao = {\n    tema: \"escuro\",\n    idioma: \"pt-BR\",\n    notificacoes: true\n};\n\n// Spread para criar c√≥pia\nconst configCopia = { ...configuracao };\n\n// Spread para adicionar propriedades\nconst configCompleta = {\n    ...configuracao,\n    versao: \"2.0\",\n    debug: false\n};\n\n// Spread para mesclar objetos\nconst configUsuario = {\n    tema: \"claro\",\n    ...configuracao,\n    notificacoes: false\n};\n\n// Rest para extrair propriedades\nconst { tema, ...outrasConfigs } = configuracao;\nconsole.log(tema);           // escuro\nconsole.log(outrasConfigs);  // { idioma: 'pt-BR', notificacoes: true }\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Sistema de Gerenciamento de Biblioteca:**\n\n```javascript\nclass Biblioteca {\n    constructor() {\n        this.livros = [];\n        this.usuarios = [];\n        this.emprestimos = [];\n        this.contadorLivros = 0;\n        this.contadorUsuarios = 0;\n        this.contadorEmprestimos = 0;\n    }\n\n    // M√©todos para Livros\n    adicionarLivro(titulo, autor, isbn, categoria, quantidade = 1) {\n        const livro = {\n            id: ++this.contadorLivros,\n            titulo,\n            autor,\n            isbn,\n            categoria,\n            quantidade,\n            disponivel: quantidade,\n            dataCadastro: new Date()\n        };\n\n        this.livros.push(livro);\n        return livro;\n    }\n\n    buscarLivro(criterio) {\n        return this.livros.filter(livro => \n            livro.titulo.toLowerCase().includes(criterio.toLowerCase()) ||\n            livro.autor.toLowerCase().includes(criterio.toLowerCase()) ||\n            livro.isbn.includes(criterio) ||\n            livro.categoria.toLowerCase().includes(criterio.toLowerCase())\n        );\n    }\n\n    // M√©todos para Usu√°rios\n    cadastrarUsuario(nome, email, telefone, tipo = \"estudante\") {\n        const usuario = {\n            id: ++this.contadorUsuarios,\n            nome,\n            email,\n            telefone,\n            tipo,\n            dataCadastro: new Date(),\n            livrosEmprestados: []\n        };\n\n        this.usuarios.push(usuario);\n        return usuario;\n    }\n\n    // M√©todos para Empr√©stimos\n    emprestarLivro(usuarioId, livroId) {\n        const usuario = this.usuarios.find(u => u.id === usuarioId);\n        const livro = this.livros.find(l => l.id === livroId);\n\n        if (!usuario || !livro) {\n            return { sucesso: false, mensagem: \"Usu√°rio ou livro n√£o encontrado\" };\n        }\n\n        if (livro.disponivel <= 0) {\n            return { sucesso: false, mensagem: \"Livro n√£o dispon√≠vel\" };\n        }\n\n        if (usuario.livrosEmprestados.length >= 3) {\n            return { sucesso: false, mensagem: \"Usu√°rio j√° possui 3 livros emprestados\" };\n        }\n\n        // Criar empr√©stimo\n        const emprestimo = {\n            id: ++this.contadorEmprestimos,\n            usuarioId,\n            livroId,\n            dataEmprestimo: new Date(),\n            dataDevolucao: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 dias\n            status: \"ativo\"\n        };\n\n        this.emprestimos.push(emprestimo);\n        livro.disponivel--;\n        usuario.livrosEmprestados.push(livroId);\n\n        return { \n            sucesso: true, \n            mensagem: \"Livro emprestado com sucesso\",\n            emprestimo \n        };\n    }\n\n    devolverLivro(emprestimoId) {\n        const emprestimo = this.emprestimos.find(e => e.id === emprestimoId);\n        if (!emprestimo || emprestimo.status !== \"ativo\") {\n            return { sucesso: false, mensagem: \"Empr√©stimo n√£o encontrado ou j√° finalizado\" };\n        }\n\n        const livro = this.livros.find(l => l.id === emprestimo.livroId);\n        const usuario = this.usuarios.find(u => u.id === emprestimo.usuarioId);\n\n        // Atualizar status\n        emprestimo.status = \"devolvido\";\n        emprestimo.dataDevolucaoReal = new Date();\n        livro.disponivel++;\n\n        // Remover do array de livros emprestados\n        const index = usuario.livrosEmprestados.indexOf(emprestimo.livroId);\n        if (index > -1) {\n            usuario.livrosEmprestados.splice(index, 1);\n        }\n\n        return { sucesso: true, mensagem: \"Livro devolvido com sucesso\" };\n    }\n\n    // M√©todos de Relat√≥rio\n    obterEstatisticas() {\n        const totalLivros = this.livros.reduce((total, livro) => total + livro.quantidade, 0);\n        const livrosDisponiveis = this.livros.reduce((total, livro) => total + livro.disponivel, 0);\n        const livrosEmprestados = totalLivros - livrosDisponiveis;\n        const emprestimosAtivos = this.emprestimos.filter(e => e.status === \"ativo\").length;\n        const usuariosAtivos = this.usuarios.filter(u => u.livrosEmprestados.length > 0).length;\n\n        return {\n            totalLivros,\n            livrosDisponiveis,\n            livrosEmprestados,\n            emprestimosAtivos,\n            usuariosAtivos,\n            totalUsuarios: this.usuarios.length,\n            totalEmprestimos: this.emprestimos.length\n        };\n    }\n\n    obterRelatorioEmprestimos() {\n        return this.emprestimos.map(emprestimo => {\n            const usuario = this.usuarios.find(u => u.id === emprestimo.usuarioId);\n            const livro = this.livros.find(l => l.id === emprestimo.livroId);\n\n            return {\n                id: emprestimo.id,\n                usuario: usuario.nome,\n                livro: livro.titulo,\n                dataEmprestimo: emprestimo.dataEmprestimo.toLocaleDateString(),\n                dataDevolucao: emprestimo.dataDevolucao.toLocaleDateString(),\n                status: emprestimo.status,\n                atrasado: emprestimo.status === \"ativo\" && new Date() > emprestimo.dataDevolucao\n            };\n        });\n    }\n}\n\n// Uso do sistema\nconst biblioteca = new Biblioteca();\n\n// Adicionar livros\nconst livro1 = biblioteca.adicionarLivro(\"O Senhor dos An√©is\", \"J.R.R. Tolkien\", \"978-85-359-0277-8\", \"Fantasia\", 3);\nconst livro2 = biblioteca.adicionarLivro(\"1984\", \"George Orwell\", \"978-85-359-0278-5\", \"Fic√ß√£o Cient√≠fica\", 2);\nconst livro3 = biblioteca.adicionarLivro(\"Dom Casmurro\", \"Machado de Assis\", \"978-85-359-0279-2\", \"Romance\", 1);\n\n// Cadastrar usu√°rios\nconst usuario1 = biblioteca.cadastrarUsuario(\"Jo√£o Silva\", \"joao@email.com\", \"(11) 99999-9999\", \"estudante\");\nconst usuario2 = biblioteca.cadastrarUsuario(\"Maria Santos\", \"maria@email.com\", \"(11) 88888-8888\", \"professor\");\n\n// Emprestar livros\nconst emprestimo1 = biblioteca.emprestarLivro(usuario1.id, livro1.id);\nconst emprestimo2 = biblioteca.emprestarLivro(usuario2.id, livro2.id);\n\nconsole.log('Empr√©stimo 1:', emprestimo1);\nconsole.log('Empr√©stimo 2:', emprestimo2);\n\n// Buscar livros\nconst livrosFantasia = biblioteca.buscarLivro(\"fantasia\");\nconsole.log('Livros de fantasia:', livrosFantasia);\n\n// Estat√≠sticas\nconst stats = biblioteca.obterEstatisticas();\nconsole.log('Estat√≠sticas da biblioteca:');\nconsole.table(stats);\n\n// Relat√≥rio de empr√©stimos\nconst relatorio = biblioteca.obterRelatorioEmprestimos();\nconsole.log('Relat√≥rio de empr√©stimos:');\nconsole.table(relatorio);\n\n// Devolver livro\nconst devolucao = biblioteca.devolverLivro(emprestimo1.emprestimo.id);\nconsole.log('Devolu√ß√£o:', devolucao);\n\n// Estat√≠sticas ap√≥s devolu√ß√£o\nconst statsAtualizadas = biblioteca.obterEstatisticas();\nconsole.log('Estat√≠sticas atualizadas:');\nconsole.table(statsAtualizadas);\n```\n\n## üõ† Desafio da Aula\n\n**Implementar sistema de valida√ß√£o de objetos.**\n\n**Requisitos:**\n- Valida√ß√£o de propriedades obrigat√≥rias\n- Valida√ß√£o de tipos de dados\n- Valida√ß√£o de valores (ranges, formatos)\n- Mensagens de erro personalizadas\n- Sistema de valida√ß√£o reutiliz√°vel\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Estrutura de dados com objetos\n- Valida√ß√£o de dados de entrada\n- Sistema de permiss√µes por usu√°rio\n- Relat√≥rios e estat√≠sticas\n- Persist√™ncia de dados estruturados\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Compreendi o que s√£o objetos em JavaScript\n- [ ] Criei, acessei e manipulei propriedades e m√©todos\n- [ ] Utilizei `this` corretamente em m√©todos\n- [ ] Apliquei t√©cnicas de itera√ß√£o sobre objetos\n- [ ] Implementei getters e setters\n- [ ] Usei destructuring, spread e rest com objetos\n- [ ] Completei o sistema de gerenciamento de biblioteca\n- [ ] Testei todas as funcionalidades de objetos\n\n---\n\n*Parab√©ns! Voc√™ dominou objetos em JavaScript e pode criar estruturas de dados complexas! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-7-objetos.mp4"
                                },
                                {
                                    id: 11,
                                    title: "Aula 8: DOM (Document Object Model)",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Aula 8: DOM (Document Object Model)\n\n## üéØ Objetivos\n- Entender o que √© o DOM e sua rela√ß√£o com HTML\n- Selecionar elementos do HTML usando JavaScript\n- Manipular conte√∫do, atributos e estilos dos elementos\n- Aplicar intera√ß√µes no projeto real do Gerenciador de Eventos\n- Implementar valida√ß√µes e feedback visual\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. O que √© o DOM?**\n\n**DOM (Document Object Model)** √© uma representa√ß√£o **em √°rvore** da p√°gina HTML pelo navegador. Cada elemento HTML √© um **n√≥** que pode ser manipulado via JavaScript.\n\n#### **Estrutura Hier√°rquica:**\n```\nDocument\n‚îú‚îÄ‚îÄ html\n‚îÇ   ‚îú‚îÄ‚îÄ head\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ title\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ meta\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ link\n‚îÇ   ‚îî‚îÄ‚îÄ body\n‚îÇ       ‚îú‚îÄ‚îÄ header\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ h1\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ nav\n‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ ul\n‚îÇ       ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ li\n‚îÇ       ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ li\n‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ button\n‚îÇ       ‚îú‚îÄ‚îÄ main\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ section\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ h2\n‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ p\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ article\n‚îÇ       ‚îî‚îÄ‚îÄ footer\n```\n\n### **2. Sele√ß√£o de Elementos**\n\n#### **M√©todos de Sele√ß√£o:**\n```javascript\n// Por ID (retorna um elemento)\nconst titulo = document.getElementById('titulo');\n\n// Por classe (retorna HTMLCollection)\nconst botoes = document.getElementsByClassName('btn');\n\n// Por tag (retorna HTMLCollection)\nconst paragrafos = document.getElementsByTagName('p');\n\n// Por seletor CSS (retorna o primeiro elemento)\nconst primeiroBotao = document.querySelector('.btn');\n\n// Por seletor CSS (retorna todos os elementos)\nconst todosBotoes = document.querySelectorAll('.btn');\n```\n\n#### **Seletores CSS Avan√ßados:**\n```javascript\n// Primeiro elemento de uma lista\nconst primeiroItem = document.querySelector('ul li:first-child');\n\n// Elemento com m√∫ltiplas classes\nconst botaoEspecial = document.querySelector('.btn.btn-primary.btn-lg');\n\n// Elemento dentro de outro\nconst tituloDentro = document.querySelector('#main h1');\n\n// Elemento com atributo espec√≠fico\nconst inputObrigatorio = document.querySelector('input[required]');\n\n// Elemento com valor espec√≠fico\nconst inputEmail = document.querySelector('input[type=\"email\"]');\n\n// Elemento com texto espec√≠fico\nconst paragrafoComTexto = document.querySelector('p:contains(\"JavaScript\")');\n```\n\n### **3. Manipulando Conte√∫do**\n\n#### **Alterando Texto:**\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// textContent - apenas texto (mais seguro)\nelemento.textContent = 'Novo texto aqui';\n\n// innerHTML - HTML interno (cuidado com XSS)\nelemento.innerHTML = '<strong>Texto em negrito</strong>';\n\n// innerText - texto vis√≠vel (considera CSS)\nelemento.innerText = 'Texto vis√≠vel';\n\n// insertAdjacentHTML - inserir HTML em posi√ß√µes espec√≠ficas\nelemento.insertAdjacentHTML('beforebegin', '<p>Antes do elemento</p>');\nelemento.insertAdjacentHTML('afterbegin', '<p>Dentro, no in√≠cio</p>');\nelemento.insertAdjacentHTML('beforeend', '<p>Dentro, no final</p>');\nelemento.insertAdjacentHTML('afterend', '<p>Depois do elemento</p>');\n```\n\n#### **Alterando Atributos:**\n```javascript\nconst imagem = document.querySelector('img');\n\n// Definir atributo\nimagem.setAttribute('src', 'nova-imagem.jpg');\nimagem.setAttribute('alt', 'Descri√ß√£o da nova imagem');\nimagem.setAttribute('data-id', '123');\n\n// Obter valor do atributo\nconst srcAtual = imagem.getAttribute('src');\nconst dataId = imagem.getAttribute('data-id');\n\n// Remover atributo\nimagem.removeAttribute('alt');\n\n// Atributos diretos (para atributos padr√£o)\nimagem.src = 'nova-imagem.jpg';\nimagem.alt = 'Nova descri√ß√£o';\nimagem.width = 300;\nimagem.height = 200;\n\n// Atributos data personalizados\nimagem.dataset.id = '456';\nimagem.dataset.categoria = 'produto';\n```\n\n### **4. Manipula√ß√£o de Classes**\n\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// Adicionar classe\nelemento.classList.add('nova-classe');\nelemento.classList.add('classe1', 'classe2');\n\n// Remover classe\nelemento.classList.remove('classe-antiga');\nelemento.classList.remove('classe1', 'classe2');\n\n// Alternar classe\nelemento.classList.toggle('classe-ativa');\nelemento.classList.toggle('classe-ativa', true);  // For√ßa adicionar\nelemento.classList.toggle('classe-ativa', false); // For√ßa remover\n\n// Verificar se tem classe\nif (elemento.classList.contains('classe-especial')) {\n    console.log('Elemento tem a classe especial');\n}\n\n// Substituir todas as classes\nelemento.className = 'nova-classe outra-classe';\n\n// Listar todas as classes\nconst classes = Array.from(elemento.classList);\nconsole.log('Classes:', classes);\n```\n\n### **5. Manipula√ß√£o de Estilos**\n\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// Estilos inline\nelemento.style.backgroundColor = 'red';\nelemento.style.color = 'white';\nelemento.style.fontSize = '18px';\nelemento.style.padding = '20px';\nelemento.style.borderRadius = '5px';\nelemento.style.boxShadow = '0 2px 10px rgba(0,0,0,0.1)';\n\n// M√∫ltiplos estilos\nObject.assign(elemento.style, {\n    backgroundColor: 'blue',\n    color: 'white',\n    fontSize: '20px',\n    padding: '15px',\n    borderRadius: '5px',\n    transition: 'all 0.3s ease'\n});\n\n// Estilos com propriedades CSS\nconst propriedadesCSS = {\n    'background-color': 'green',\n    'font-size': '16px',\n    'text-align': 'center',\n    'margin-top': '10px'\n};\n\nObject.entries(propriedadesCSS).forEach(([prop, valor]) => {\n    elemento.style.setProperty(prop, valor);\n});\n\n// Obter estilos computados\nconst estilos = window.getComputedStyle(elemento);\nconst corFundo = estilos.backgroundColor;\nconst tamanhoFonte = estilos.fontSize;\nconst largura = estilos.width;\n\n// Verificar se elemento est√° vis√≠vel\nconst isVisible = estilos.display !== 'none' && \n                  estilos.visibility !== 'hidden' && \n                  estilos.opacity !== '0';\n```\n\n### **6. Cria√ß√£o e Remo√ß√£o de Elementos**\n\n#### **Criando Elementos:**\n```javascript\n// Criar elemento\nconst novoParagrafo = document.createElement('p');\nnovoParagrafo.textContent = 'Este √© um novo par√°grafo';\nnovoParagrafo.className = 'destaque';\nnovoParagrafo.id = 'paragrafo-novo';\n\n// Adicionar ao DOM\nconst container = document.getElementById('container');\ncontainer.appendChild(novoParagrafo);\n\n// Inserir antes de outro elemento\nconst elementoReferencia = document.getElementById('referencia');\ncontainer.insertBefore(novoParagrafo, elementoReferencia);\n\n// Inserir em posi√ß√£o espec√≠fica\ncontainer.insertAdjacentHTML('beforeend', '<p>Par√°grafo inserido</p>');\ncontainer.insertAdjacentElement('afterbegin', novoParagrafo);\n\n// Criar elemento com HTML\nconst divHTML = document.createElement('div');\ndivHTML.innerHTML = '<h3>T√≠tulo</h3><p>Conte√∫do</p>';\ncontainer.appendChild(divHTML);\n```\n\n#### **Removendo Elementos:**\n```javascript\n// Remover elemento\nconst elementoParaRemover = document.getElementById('remover');\nelementoParaRemover.remove();\n\n// Remover filho espec√≠fico\nconst pai = document.getElementById('pai');\nconst filho = document.getElementById('filho');\npai.removeChild(filho);\n\n// Remover todos os filhos\nwhile (pai.firstChild) {\n    pai.removeChild(pai.firstChild);\n}\n\n// Remover usando parentNode\nfilho.parentNode.removeChild(filho);\n```\n\n### **7. Navega√ß√£o no DOM**\n\n```javascript\nconst elemento = document.getElementById('meuElemento');\n\n// Elementos pai\nconst pai = elemento.parentElement;\nconst paiNode = elemento.parentNode;\nconst paiClosest = elemento.closest('.container');\n\n// Elementos filhos\nconst filhos = elemento.children; // HTMLCollection\nconst filhosNodes = elemento.childNodes; // NodeList (inclui texto)\nconst primeiroFilho = elemento.firstElementChild;\nconst ultimoFilho = elemento.lastElementChild;\n\n// Elementos irm√£os\nconst proximoIrmao = elemento.nextElementSibling;\nconst irmaoAnterior = elemento.previousElementSibling;\nconst todosIrmaos = Array.from(elemento.parentElement.children).filter(\n    child => child !== elemento\n);\n\n// Navegar para elementos espec√≠ficos\nconst proximoParagrafo = elemento.nextElementSibling;\nconst paragrafoAnterior = elemento.previousElementSibling;\n\n// Encontrar elemento pai com classe espec√≠fica\nconst containerPai = elemento.closest('.container');\n```\n\n### **8. Eventos do DOM**\n\n```javascript\nconst botao = document.getElementById('meuBotao');\n\n// Adicionar evento\nbotao.addEventListener('click', function(event) {\n    console.log('Bot√£o clicado!');\n    console.log('Evento:', event);\n    console.log('Elemento:', this);\n});\n\n// Evento com arrow function\nbotao.addEventListener('click', (event) => {\n    console.log('Bot√£o clicado com arrow function!');\n    console.log('Elemento:', event.target);\n});\n\n// M√∫ltiplos eventos\nbotao.addEventListener('mouseenter', () => {\n    botao.style.backgroundColor = 'blue';\n});\n\nbotao.addEventListener('mouseleave', () => {\n    botao.style.backgroundColor = 'red';\n});\n\n// Remover evento\nconst handler = () => console.log('Evento removido');\nbotao.addEventListener('click', handler);\nbotao.removeEventListener('click', handler);\n\n// Eventos de teclado\nconst input = document.getElementById('meuInput');\ninput.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n        console.log('Enter pressionado!');\n    }\n});\n\n// Eventos de formul√°rio\nconst form = document.getElementById('meuForm');\nform.addEventListener('submit', (event) => {\n    event.preventDefault(); // Previne envio padr√£o\n    console.log('Formul√°rio submetido!');\n});\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Sistema de Valida√ß√£o de Formul√°rio Interativo:**\n\n```html\n<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Valida√ß√£o de Formul√°rio</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 20px;\n        }\n\n        .container {\n            background: white;\n            padding: 40px;\n            border-radius: 15px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            width: 100%;\n            max-width: 500px;\n        }\n\n        h1 {\n            text-align: center;\n            color: #333;\n            margin-bottom: 30px;\n            font-size: 2rem;\n        }\n\n        .form-group {\n            margin-bottom: 25px;\n            position: relative;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 600;\n            color: #555;\n            font-size: 14px;\n        }\n\n        input, select, textarea {\n            width: 100%;\n            padding: 15px;\n            border: 2px solid #e1e5e9;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: all 0.3s ease;\n            background: #f8f9fa;\n        }\n\n        input:focus, select:focus, textarea:focus {\n            outline: none;\n            border-color: #667eea;\n            background: white;\n            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n        }\n\n        .form-group.error input,\n        .form-group.error select,\n        .form-group.error textarea {\n            border-color: #e74c3c;\n            background: #fdf2f2;\n        }\n\n        .form-group.success input,\n        .form-group.success select,\n        .form-group.success textarea {\n            border-color: #27ae60;\n            background: #f0f9f0;\n        }\n\n        .error-message {\n            color: #e74c3c;\n            font-size: 12px;\n            margin-top: 5px;\n            display: none;\n        }\n\n        .form-group.error .error-message {\n            display: block;\n        }\n\n        .success-message {\n            color: #27ae60;\n            font-size: 12px;\n            margin-top: 5px;\n            display: none;\n        }\n\n        .form-group.success .success-message {\n            display: block;\n        }\n\n        .form-row {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n\n        button {\n            width: 100%;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 15px;\n            border: none;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: transform 0.3s ease;\n        }\n\n        button:hover {\n            transform: translateY(-2px);\n        }\n\n        button:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n\n        .progress-bar {\n            width: 100%;\n            height: 6px;\n            background: #e1e5e9;\n            border-radius: 3px;\n            margin-bottom: 30px;\n            overflow: hidden;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n\n        .form-summary {\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 8px;\n            margin-top: 20px;\n            display: none;\n        }\n\n        .form-summary h3 {\n            margin-bottom: 15px;\n            color: #333;\n        }\n\n        .summary-item {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 10px;\n            padding-bottom: 10px;\n            border-bottom: 1px solid #e1e5e9;\n        }\n\n        .summary-label {\n            font-weight: 600;\n            color: #555;\n        }\n\n        .summary-value {\n            color: #667eea;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>üìù Formul√°rio de Cadastro</h1>\n        \n        <div class=\"progress-bar\">\n            <div class=\"progress-fill\" id=\"progressBar\"></div>\n        </div>\n        \n        <form id=\"cadastroForm\">\n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label for=\"nome\">Nome *</label>\n                    <input type=\"text\" id=\"nome\" name=\"nome\" required>\n                    <div class=\"error-message\" id=\"nomeError\">Nome √© obrigat√≥rio</div>\n                    <div class=\"success-message\" id=\"nomeSuccess\">Nome v√°lido!</div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"sobrenome\">Sobrenome *</label>\n                    <input type=\"text\" id=\"sobrenome\" name=\"sobrenome\" required>\n                    <div class=\"error-message\" id=\"sobrenomeError\">Sobrenome √© obrigat√≥rio</div>\n                    <div class=\"success-message\" id=\"sobrenomeSuccess\">Sobrenome v√°lido!</div>\n                </div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"email\">E-mail *</label>\n                <input type=\"email\" id=\"email\" name=\"email\" required>\n                <div class=\"error-message\" id=\"emailError\">E-mail inv√°lido</div>\n                <div class=\"success-message\" id=\"emailSuccess\">E-mail v√°lido!</div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"telefone\">Telefone</label>\n                <input type=\"tel\" id=\"telefone\" name=\"telefone\" placeholder=\"(11) 99999-9999\">\n                <div class=\"error-message\" id=\"telefoneError\">Telefone inv√°lido</div>\n                <div class=\"success-message\" id=\"telefoneSuccess\">Telefone v√°lido!</div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"categoria\">Categoria *</label>\n                <select id=\"categoria\" name=\"categoria\" required>\n                    <option value=\"\">Selecione uma categoria</option>\n                    <option value=\"estudante\">Estudante</option>\n                    <option value=\"profissional\">Profissional</option>\n                    <option value=\"empresario\">Empres√°rio</option>\n                    <option value=\"outro\">Outro</option>\n                </select>\n                <div class=\"error-message\" id=\"categoriaError\">Categoria √© obrigat√≥ria</div>\n                <div class=\"success-message\" id=\"categoriaSuccess\">Categoria selecionada!</div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"mensagem\">Mensagem</label>\n                <textarea id=\"mensagem\" name=\"mensagem\" rows=\"4\" placeholder=\"Conte-nos sobre voc√™...\"></textarea>\n                <div class=\"error-message\" id=\"mensagemError\">Mensagem muito curta</div>\n                <div class=\"success-message\" id=\"mensagemSuccess\">Mensagem v√°lida!</div>\n            </div>\n            \n            <button type=\"submit\" id=\"submitBtn\">üì§ Enviar Cadastro</button>\n        </form>\n        \n        <div class=\"form-summary\" id=\"formSummary\">\n            <h3>üìã Resumo do Cadastro</h3>\n            <div id=\"summaryContent\"></div>\n        </div>\n    </div>\n\n    <script>\n        class ValidadorFormulario {\n            constructor() {\n                this.form = document.getElementById('cadastroForm');\n                this.progressBar = document.getElementById('progressBar');\n                this.submitBtn = document.getElementById('submitBtn');\n                this.formSummary = document.getElementById('formSummary');\n                this.summaryContent = document.getElementById('summaryContent');\n                \n                this.campos = {};\n                this.camposValidos = 0;\n                this.totalCampos = 0;\n                \n                this.inicializar();\n            }\n\n            inicializar() {\n                this.configurarCampos();\n                this.configurarEventos();\n                this.atualizarProgresso();\n            }\n\n            configurarCampos() {\n                const camposObrigatorios = ['nome', 'sobrenome', 'email', 'categoria'];\n                const camposOpcionais = ['telefone', 'mensagem'];\n                \n                [...camposObrigatorios, ...camposOpcionais].forEach(campoId => {\n                    const campo = document.getElementById(campoId);\n                    const formGroup = campo.closest('.form-group');\n                    \n                    this.campos[campoId] = {\n                        elemento: campo,\n                        formGroup: formGroup,\n                        obrigatorio: camposObrigatorios.includes(campoId),\n                        valido: false\n                    };\n                    \n                    if (camposObrigatorios.includes(campoId)) {\n                        this.totalCampos++;\n                    }\n                });\n            }\n\n            configurarEventos() {\n                // Eventos de valida√ß√£o em tempo real\n                Object.entries(this.campos).forEach(([campoId, campo]) => {\n                    campo.elemento.addEventListener('input', () => {\n                        this.validarCampo(campoId);\n                        this.atualizarProgresso();\n                    });\n                    \n                    campo.elemento.addEventListener('blur', () => {\n                        this.validarCampo(campoId);\n                        this.atualizarProgresso();\n                    });\n                });\n\n                // Evento de envio do formul√°rio\n                this.form.addEventListener('submit', (e) => {\n                    e.preventDefault();\n                    this.validarFormulario();\n                });\n            }\n\n            validarCampo(campoId) {\n                const campo = this.campos[campoId];\n                const valor = campo.elemento.value.trim();\n                let valido = true;\n                let mensagem = '';\n\n                // Valida√ß√µes espec√≠ficas por campo\n                switch (campoId) {\n                    case 'nome':\n                    case 'sobrenome':\n                        if (campo.obrigatorio && !valor) {\n                            valido = false;\n                            mensagem = `${campoId.charAt(0).toUpperCase() + campoId.slice(1)} √© obrigat√≥rio`;\n                        } else if (valor && valor.length < 2) {\n                            valido = false;\n                            mensagem = `${campoId.charAt(0).toUpperCase() + campoId.slice(1)} deve ter pelo menos 2 caracteres`;\n                        }\n                        break;\n                        \n                    case 'email':\n                        if (campo.obrigatorio && !valor) {\n                            valido = false;\n                            mensagem = 'E-mail √© obrigat√≥rio';\n                        } else if (valor && !this.validarEmail(valor)) {\n                            valido = false;\n                            mensagem = 'E-mail inv√°lido';\n                        }\n                        break;\n                        \n                    case 'telefone':\n                        if (valor && !this.validarTelefone(valor)) {\n                            valido = false;\n                            mensagem = 'Telefone inv√°lido';\n                        }\n                        break;\n                        \n                    case 'categoria':\n                        if (campo.obrigatorio && !valor) {\n                            valido = false;\n                            mensagem = 'Categoria √© obrigat√≥ria';\n                        }\n                        break;\n                        \n                    case 'mensagem':\n                        if (valor && valor.length < 10) {\n                            valido = false;\n                            mensagem = 'Mensagem deve ter pelo menos 10 caracteres';\n                        }\n                        break;\n                }\n\n                // Aplicar valida√ß√£o visual\n                this.aplicarValidacao(campoId, valido, mensagem);\n                \n                // Atualizar contador de campos v√°lidos\n                if (campo.obrigatorio) {\n                    if (campo.valido !== valido) {\n                        campo.valido = valido;\n                        if (valido) {\n                            this.camposValidos++;\n                        } else {\n                            this.camposValidos--;\n                        }\n                    }\n                }\n            }\n\n            validarEmail(email) {\n                const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                return regex.test(email);\n            }\n\n            validarTelefone(telefone) {\n                const regex = /^\\(?([0-9]{2})\\)?[-.\\s]?([0-9]{4,5})[-.\\s]?([0-9]{4})$/;\n                return regex.test(telefone);\n            }\n\n            aplicarValidacao(campoId, valido, mensagem) {\n                const campo = this.campos[campoId];\n                const formGroup = campo.formGroup;\n                const errorElement = formGroup.querySelector('.error-message');\n                const successElement = formGroup.querySelector('.success-message');\n\n                // Remover classes anteriores\n                formGroup.classList.remove('error', 'success');\n                \n                if (valido) {\n                    formGroup.classList.add('success');\n                    if (errorElement) errorElement.style.display = 'none';\n                    if (successElement) successElement.style.display = 'block';\n                } else {\n                    formGroup.classList.add('error');\n                    if (errorElement) {\n                        errorElement.textContent = mensagem;\n                        errorElement.style.display = 'block';\n                    }\n                    if (successElement) successElement.style.display = 'none';\n                }\n            }\n\n            atualizarProgresso() {\n                const percentual = this.totalCampos > 0 ? (this.camposValidos / this.totalCampos) * 100 : 0;\n                this.progressBar.style.width = `${percentual}%`;\n                \n                // Atualizar estado do bot√£o\n                this.submitBtn.disabled = this.camposValidos < this.totalCampos;\n            }\n\n            validarFormulario() {\n                // Validar todos os campos obrigat√≥rios\n                Object.keys(this.campos).forEach(campoId => {\n                    if (this.campos[campoId].obrigatorio) {\n                        this.validarCampo(campoId);\n                    }\n                });\n\n                if (this.camposValidos === this.totalCampos) {\n                    this.enviarFormulario();\n                } else {\n                    alert('Por favor, corrija os erros no formul√°rio antes de enviar.');\n                }\n            }\n\n            enviarFormulario() {\n                // Simular envio\n                this.submitBtn.textContent = 'üì§ Enviando...';\n                this.submitBtn.disabled = true;\n\n                setTimeout(() => {\n                    this.mostrarResumo();\n                    this.submitBtn.textContent = '‚úÖ Enviado com Sucesso!';\n                    this.submitBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';\n                }, 2000);\n            }\n\n            mostrarResumo() {\n                const dados = {};\n                Object.entries(this.campos).forEach(([campoId, campo]) => {\n                    if (campo.elemento.value.trim()) {\n                        dados[campoId] = campo.elemento.value.trim();\n                    }\n                });\n\n                let html = '';\n                Object.entries(dados).forEach(([campo, valor]) => {\n                    const label = campo.charAt(0).toUpperCase() + campo.slice(1);\n                    html += `\n                        <div class=\"summary-item\">\n                            <span class=\"summary-label\">${label}:</span>\n                            <span class=\"summary-value\">${valor}</span>\n                        </div>\n                    `;\n                });\n\n                this.summaryContent.innerHTML = html;\n                this.formSummary.style.display = 'block';\n            }\n        }\n\n        // Inicializar o validador\n        const validador = new ValidadorFormulario();\n    </script>\n</body>\n</html>\n```\n\n## üõ† Desafio da Aula\n\n**Implementar sistema de valida√ß√£o avan√ßada.**\n\n**Requisitos:**\n- Valida√ß√£o de CPF com algoritmo\n- Valida√ß√£o de CEP com API externa\n- Valida√ß√£o de senha com crit√©rios m√∫ltiplos\n- Valida√ß√£o de arquivo (tamanho, tipo)\n- Sistema de m√°scaras para campos\n- Valida√ß√£o em tempo real com debounce\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Sistema de valida√ß√£o robusto\n- Feedback visual em tempo real\n- M√°scaras para campos de data e telefone\n- Valida√ß√£o de arquivos de imagem\n- Sistema de notifica√ß√µes de erro/sucesso\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Entendi o que √© o DOM e sua rela√ß√£o com HTML\n- [ ] Selecionei elementos do HTML usando JavaScript\n- [ ] Manipulei conte√∫do, atributos e estilos dos elementos\n- [ ] Apliquei intera√ß√µes no projeto real\n- [ ] Implementei valida√ß√µes e feedback visual\n- [ ] Completei o sistema de valida√ß√£o de formul√°rio\n- [ ] Testei todas as funcionalidades de manipula√ß√£o do DOM\n\n---\n\n*Parab√©ns! Voc√™ dominou a manipula√ß√£o do DOM e pode criar formul√°rios interativos e validados! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-8-dom.mp4"
                                },
                                {
                                    id: 12,
                                    title: "Aula 9: Eventos e Formul√°rios",
                                    duration: 1800,
                                    type: "video",
                                    content: "Sistema de eventos JavaScript, formul√°rios interativos com valida√ß√£o e projeto pr√°tico completo.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-9-eventos-formularios.mp4"
                                },
                                {
                                    id: 13,
                                    title: "Aula 10: Manipula√ß√£o Avan√ßada do DOM",
                                    duration: 1800,
                                    type: "video",
                                    content: "T√©cnicas avan√ßadas de manipula√ß√£o do DOM, cria√ß√£o din√¢mica de elementos e integra√ß√£o com arrays e objetos.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript/aula-10-dom-avancado.mp4"
                                }
                            ]
                        },
                        {
                            id: 5,
                            title: "JavaScript Avan√ßado - ES6+ e Padr√µes Modernos",
                            description: "JavaScript moderno com ES6+, programa√ß√£o funcional e ass√≠ncrona com 4 aulas estruturadas",
                            duration: 12,
                            lessons: [
                                {
                                    id: 14,
                                    title: "Aula 1: ES6+ e Sintaxe Moderna",
                                    duration: 1800,
                                    type: "video",
                                    content: "let, const, arrow functions, template literals, destructuring, spread/rest e m√≥dulos ES6.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript-avancado/aula-1-es6-sintaxe.mp4"
                                },
                                {
                                    id: 15,
                                    title: "Aula 2: Programa√ß√£o Funcional e M√©todos de Array",
                                    duration: 1800,
                                    type: "video",
                                    content: "Fun√ß√µes puras, imutabilidade, map, filter, reduce e m√©todos funcionais de array.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript-avancado/aula-2-programacao-funcional.mp4"
                                },
                                {
                                    id: 16,
                                    title: "Aula 3: Promises e Async/Await",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Aula 3: Promises e Async/Await\n\n## üéØ Objetivos\n- Compreender o que s√£o Promises e como funcionam\n- Dominar a sintaxe Async/Await para c√≥digo ass√≠ncrono\n- Implementar requisi√ß√µes HTTP com Fetch API\n- Tratar erros de forma robusta em opera√ß√µes ass√≠ncronas\n- Criar aplica√ß√µes que lidam com m√∫ltiplas opera√ß√µes ass√≠ncronas\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. O que s√£o Promises?**\n\n**Promises** s√£o objetos que representam a eventual conclus√£o (ou falha) de uma opera√ß√£o ass√≠ncrona e seu valor resultante.\n\n#### **Estados de uma Promise:**\n- **Pending (Pendente):** Estado inicial, nem cumprida nem rejeitada\n- **Fulfilled (Cumprida):** Opera√ß√£o conclu√≠da com sucesso\n- **Rejected (Rejeitada):** Opera√ß√£o falhou\n\n#### **Criando uma Promise:**\n```javascript\nconst minhaPromise = new Promise((resolve, reject) => {\n    // Simulando uma opera√ß√£o ass√≠ncrona\n    setTimeout(() => {\n        const sucesso = Math.random() > 0.5;\n        \n        if (sucesso) {\n            resolve('Opera√ß√£o conclu√≠da com sucesso!');\n        } else {\n            reject(new Error('Opera√ß√£o falhou!'));\n        }\n    }, 2000);\n});\n\n// Usando a Promise\nminhaPromise\n    .then(resultado => {\n        console.log('Sucesso:', resultado);\n    })\n    .catch(erro => {\n        console.error('Erro:', erro.message);\n    });\n```\n\n### **2. M√©todos de Promise**\n\n#### **Promise.all() - Todas as Promises devem ser resolvidas:**\n```javascript\nconst promise1 = fetch('/api/users');\nconst promise2 = fetch('/api/posts');\nconst promise3 = fetch('/api/comments');\n\nPromise.all([promise1, promise2, promise3])\n    .then(responses => {\n        // responses √© um array com todas as respostas\n        return Promise.all(responses.map(response => response.json()));\n    })\n    .then(([users, posts, comments]) => {\n        console.log('Usu√°rios:', users);\n        console.log('Posts:', posts);\n        console.log('Coment√°rios:', comments);\n    })\n    .catch(erro => {\n        console.error('Uma das requisi√ß√µes falhou:', erro);\n    });\n```\n\n#### **Promise.race() - Primeira Promise a ser resolvida:**\n```javascript\nconst promiseRapida = new Promise(resolve => setTimeout(() => resolve('R√°pida'), 1000));\nconst promiseLenta = new Promise(resolve => setTimeout(() => resolve('Lenta'), 3000));\n\nPromise.race([promiseRapida, promiseLenta])\n    .then(resultado => {\n        console.log('Primeira a completar:', resultado); // Sempre 'R√°pida'\n    });\n```\n\n#### **Promise.allSettled() - Todas as Promises, independente do resultado:**\n```javascript\nconst promises = [\n    Promise.resolve('Sucesso 1'),\n    Promise.reject('Erro 1'),\n    Promise.resolve('Sucesso 2'),\n    Promise.reject('Erro 2')\n];\n\nPromise.allSettled(promises)\n    .then(resultados => {\n        resultados.forEach((resultado, index) => {\n            if (resultado.status === 'fulfilled') {\n                console.log(`Promise ${index}: Sucesso - ${resultado.value}`);\n            } else {\n                console.log(`Promise ${index}: Erro - ${resultado.reason}`);\n            }\n        });\n    });\n```\n\n### **3. Async/Await - Sintaxe Moderna**\n\n**Async/Await** √© uma forma mais limpa e leg√≠vel de trabalhar com Promises.\n\n#### **Fun√ß√£o Ass√≠ncrona B√°sica:**\n```javascript\nasync function buscarDados() {\n    try {\n        const response = await fetch('/api/dados');\n        const dados = await response.json();\n        return dados;\n    } catch (erro) {\n        console.error('Erro ao buscar dados:', erro);\n        throw erro; // Re-lan√ßa o erro para ser tratado pelo chamador\n    }\n}\n\n// Usando a fun√ß√£o\nbuscarDados()\n    .then(dados => console.log('Dados:', dados))\n    .catch(erro => console.error('Erro capturado:', erro));\n```\n\n#### **M√∫ltiplas Opera√ß√µes Ass√≠ncronas:**\n```javascript\nasync function buscarDadosCompletos() {\n    try {\n        // Executar em paralelo para melhor performance\n        const [usuarios, posts, comentarios] = await Promise.all([\n            fetch('/api/users').then(response => response.json()),\n            fetch('/api/posts').then(response => response.json()),\n            fetch('/api/comments').then(response => response.json())\n        ]);\n\n        return {\n            usuarios,\n            posts,\n            comentarios,\n            total: usuarios.length + posts.length + comentarios.length\n        };\n    } catch (erro) {\n        console.error('Erro ao buscar dados completos:', erro);\n        throw erro;\n    }\n}\n```\n\n### **4. Fetch API - Requisi√ß√µes HTTP**\n\n#### **Requisi√ß√£o GET B√°sica:**\n```javascript\nasync function buscarUsuario(id) {\n    try {\n        const response = await fetch(`/api/users/${id}`);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const usuario = await response.json();\n        return usuario;\n    } catch (erro) {\n        console.error('Erro ao buscar usu√°rio:', erro);\n        throw erro;\n    }\n}\n```\n\n#### **Requisi√ß√£o POST com Dados:**\n```javascript\nasync function criarUsuario(dadosUsuario) {\n    try {\n        const response = await fetch('/api/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(dadosUsuario)\n        });\n\n        if (!response.ok) {\n            const erro = await response.json();\n            throw new Error(erro.message || 'Erro ao criar usu√°rio');\n        }\n\n        const novoUsuario = await response.json();\n        return novoUsuario;\n    } catch (erro) {\n        console.error('Erro ao criar usu√°rio:', erro);\n        throw erro;\n    }\n}\n```\n\n#### **Requisi√ß√£o PUT para Atualiza√ß√£o:**\n```javascript\nasync function atualizarUsuario(id, dadosAtualizados) {\n    try {\n        const response = await fetch(`/api/users/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(dadosAtualizados)\n        });\n\n        if (!response.ok) {\n            throw new Error(`Erro ${response.status}: ${response.statusText}`);\n        }\n\n        const usuarioAtualizado = await response.json();\n        return usuarioAtualizado;\n    } catch (erro) {\n        console.error('Erro ao atualizar usu√°rio:', erro);\n        throw erro;\n    }\n}\n```\n\n#### **Requisi√ß√£o DELETE:**\n```javascript\nasync function deletarUsuario(id) {\n    try {\n        const response = await fetch(`/api/users/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`Erro ao deletar usu√°rio: ${response.status}`);\n        }\n\n        return { sucesso: true, mensagem: 'Usu√°rio deletado com sucesso' };\n    } catch (erro) {\n        console.error('Erro ao deletar usu√°rio:', erro);\n        throw erro;\n    }\n}\n```\n\n### **5. Tratamento de Erros Robusto**\n\n#### **Try/Catch com Async/Await:**\n```javascript\nasync function operacaoCompleta() {\n    try {\n        // Primeira opera√ß√£o\n        const usuario = await buscarUsuario(1);\n        console.log('Usu√°rio encontrado:', usuario);\n\n        // Segunda opera√ß√£o\n        const posts = await buscarPosts(usuario.id);\n        console.log('Posts encontrados:', posts);\n\n        // Terceira opera√ß√£o\n        const resultado = await processarDados(usuario, posts);\n        console.log('Resultado final:', resultado);\n\n        return resultado;\n    } catch (erro) {\n        // Tratamento espec√≠fico por tipo de erro\n        if (erro.name === 'TypeError') {\n            console.error('Erro de rede ou API:', erro);\n            // Tentar novamente ou usar dados em cache\n        } else if (erro.status === 404) {\n            console.error('Recurso n√£o encontrado:', erro);\n            // Retornar dados padr√£o\n        } else if (erro.status === 401) {\n            console.error('N√£o autorizado:', erro);\n            // Redirecionar para login\n        } else {\n            console.error('Erro inesperado:', erro);\n            // Log do erro para debugging\n        }\n        \n        // Re-lan√ßar erro ou retornar valor padr√£o\n        throw erro;\n    }\n}\n```\n\n#### **Tratamento de Erros com .catch():**\n```javascript\n// Usando .catch() com Promises\nbuscarUsuario(1)\n    .then(usuario => {\n        console.log('Usu√°rio:', usuario);\n        return buscarPosts(usuario.id);\n    })\n    .then(posts => {\n        console.log('Posts:', posts);\n        return processarDados(usuario, posts);\n    })\n    .catch(erro => {\n        console.error('Erro capturado:', erro);\n        // Tratamento do erro\n        return { erro: true, mensagem: 'Falha na opera√ß√£o' };\n    });\n```\n\n### **6. Padr√µes Avan√ßados**\n\n#### **Retry Pattern - Tentar Novamente:**\n```javascript\nasync function buscarComRetry(url, maxTentativas = 3) {\n    for (let tentativa = 1; tentativa <= maxTentativas; tentativa++) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}`);\n            }\n            return await response.json();\n        } catch (erro) {\n            console.log(`Tentativa ${tentativa} falhou:`, erro.message);\n            \n            if (tentativa === maxTentativas) {\n                throw new Error(`Falhou ap√≥s ${maxTentativas} tentativas`);\n            }\n            \n            // Aguardar antes da pr√≥xima tentativa (exponential backoff)\n            await new Promise(resolve => \n                setTimeout(resolve, Math.pow(2, tentativa) * 1000)\n            );\n        }\n    }\n}\n```\n\n#### **Timeout Pattern - Limite de Tempo:**\n```javascript\nfunction timeout(promise, ms) {\n    return Promise.race([\n        promise,\n        new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Timeout')), ms)\n        )\n    ]);\n}\n\n// Usando timeout\nasync function buscarComTimeout() {\n    try {\n        const dados = await timeout(\n            fetch('/api/dados').then(response => response.json()),\n            5000 // 5 segundos\n        );\n        return dados;\n    } catch (erro) {\n        if (erro.message === 'Timeout') {\n            console.error('Requisi√ß√£o demorou muito');\n        } else {\n            console.error('Outro erro:', erro);\n        }\n        throw erro;\n    }\n}\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Sistema de Gerenciamento de Tarefas com API:**\n\n```javascript\nclass GerenciadorTarefasAPI {\n    constructor(baseURL) {\n        this.baseURL = baseURL;\n        this.token = localStorage.getItem('authToken');\n    }\n\n    // Configurar headers padr√£o\n    getHeaders() {\n        return {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.token}`\n        };\n    }\n\n    // Buscar todas as tarefas\n    async buscarTarefas() {\n        try {\n            const response = await fetch(`${this.baseURL}/tarefas`, {\n                headers: this.getHeaders()\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro ${response.status}: ${response.statusText}`);\n            }\n\n            const tarefas = await response.json();\n            return tarefas;\n        } catch (erro) {\n            console.error('Erro ao buscar tarefas:', erro);\n            throw erro;\n        }\n    }\n\n    // Criar nova tarefa\n    async criarTarefa(dadosTarefa) {\n        try {\n            const response = await fetch(`${this.baseURL}/tarefas`, {\n                method: 'POST',\n                headers: this.getHeaders(),\n                body: JSON.stringify(dadosTarefa)\n            });\n\n            if (!response.ok) {\n                const erro = await response.json();\n                throw new Error(erro.message || 'Erro ao criar tarefa');\n            }\n\n            const novaTarefa = await response.json();\n            return novaTarefa;\n        } catch (erro) {\n            console.error('Erro ao criar tarefa:', erro);\n            throw erro;\n        }\n    }\n\n    // Atualizar tarefa existente\n    async atualizarTarefa(id, dadosAtualizados) {\n        try {\n            const response = await fetch(`${this.baseURL}/tarefas/${id}`, {\n                method: 'PUT',\n                headers: this.getHeaders(),\n                body: JSON.stringify(dadosAtualizados)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro ao atualizar tarefa: ${response.status}`);\n            }\n\n            const tarefaAtualizada = await response.json();\n            return tarefaAtualizada;\n        } catch (erro) {\n            console.error('Erro ao atualizar tarefa:', erro);\n            throw erro;\n        }\n    }\n\n    // Deletar tarefa\n    async deletarTarefa(id) {\n        try {\n            const response = await fetch(`${this.baseURL}/tarefas/${id}`, {\n                method: 'DELETE',\n                headers: this.getHeaders()\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro ao deletar tarefa: ${response.status}`);\n            }\n\n            return { sucesso: true, mensagem: 'Tarefa deletada com sucesso' };\n        } catch (erro) {\n            console.error('Erro ao deletar tarefa:', erro);\n            throw erro;\n        }\n    }\n\n    // Marcar tarefa como conclu√≠da\n    async marcarConcluida(id) {\n        try {\n            const response = await fetch(`${this.baseURL}/tarefas/${id}/concluir`, {\n                method: 'PATCH',\n                headers: this.getHeaders()\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro ao marcar tarefa como conclu√≠da: ${response.status}`);\n            }\n\n            const tarefaAtualizada = await response.json();\n            return tarefaAtualizada;\n        } catch (erro) {\n            console.error('Erro ao marcar tarefa como conclu√≠da:', erro);\n            throw erro;\n        }\n    }\n\n    // Buscar tarefas com filtros\n    async buscarTarefasFiltradas(filtros = {}) {\n        try {\n            const params = new URLSearchParams(filtros);\n            const response = await fetch(`${this.baseURL}/tarefas?${params}`, {\n                headers: this.getHeaders()\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erro ao buscar tarefas filtradas: ${response.status}`);\n            }\n\n            const tarefas = await response.json();\n            return tarefas;\n        } catch (erro) {\n            console.error('Erro ao buscar tarefas filtradas:', erro);\n            throw erro;\n        }\n    }\n\n    // Opera√ß√£o em lote - m√∫ltiplas tarefas\n    async operacaoEmLote(operacoes) {\n        try {\n            const promises = operacoes.map(async (operacao) => {\n                switch (operacao.tipo) {\n                    case 'criar':\n                        return await this.criarTarefa(operacao.dados);\n                    case 'atualizar':\n                        return await this.atualizarTarefa(operacao.id, operacao.dados);\n                    case 'deletar':\n                        return await this.deletarTarefa(operacao.id);\n                    case 'concluir':\n                        return await this.marcarConcluida(operacao.id);\n                    default:\n                        throw new Error(`Tipo de opera√ß√£o desconhecido: ${operacao.tipo}`);\n                }\n            });\n\n            const resultados = await Promise.allSettled(promises);\n            \n            // Processar resultados\n            const sucessos = [];\n            const falhas = [];\n\n            resultados.forEach((resultado, index) => {\n                if (resultado.status === 'fulfilled') {\n                    sucessos.push({\n                        operacao: operacoes[index],\n                        resultado: resultado.value\n                    });\n                } else {\n                    falhas.push({\n                        operacao: operacoes[index],\n                        erro: resultado.reason\n                    });\n                }\n            });\n\n            return { sucessos, falhas };\n        } catch (erro) {\n            console.error('Erro na opera√ß√£o em lote:', erro);\n            throw erro;\n        }\n    }\n}\n\n// Uso do sistema\nconst gerenciador = new GerenciadorTarefasAPI('https://api.exemplo.com');\n\n// Exemplo de uso\nasync function exemploUso() {\n    try {\n        // Buscar todas as tarefas\n        const tarefas = await gerenciador.buscarTarefas();\n        console.log('Tarefas encontradas:', tarefas);\n\n        // Criar nova tarefa\n        const novaTarefa = await gerenciador.criarTarefa({\n            titulo: 'Nova Tarefa',\n            descricao: 'Descri√ß√£o da tarefa',\n            prioridade: 'alta',\n            dataVencimento: '2025-02-01'\n        });\n        console.log('Nova tarefa criada:', novaTarefa);\n\n        // Opera√ß√£o em lote\n        const operacoes = [\n            { tipo: 'criar', dados: { titulo: 'Tarefa 1', descricao: 'Desc 1' } },\n            { tipo: 'criar', dados: { titulo: 'Tarefa 2', descricao: 'Desc 2' } },\n            { tipo: 'concluir', id: 1 }\n        ];\n\n        const resultadoLote = await gerenciador.operacaoEmLote(operacoes);\n        console.log('Resultado do lote:', resultadoLote);\n\n    } catch (erro) {\n        console.error('Erro no exemplo:', erro);\n    }\n}\n\n// Executar exemplo\n// exemploUso();\n```\n\n## üõ† Desafio da Aula\n\n**Implementar sistema de cache com Promises.**\n\n**Requisitos:**\n- Cache em mem√≥ria para requisi√ß√µes\n- Expira√ß√£o autom√°tica do cache\n- Fallback para dados em cache quando API falha\n- Sistema de invalida√ß√£o de cache\n- M√©tricas de performance do cache\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- API REST completa com CRUD\n- Sistema de autentica√ß√£o JWT\n- Cache inteligente para melhor performance\n- Tratamento robusto de erros\n- Opera√ß√µes em lote para m√∫ltiplos eventos\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Compreendi o que s√£o Promises e como funcionam\n- [ ] Dominei a sintaxe Async/Await para c√≥digo ass√≠ncrono\n- [ ] Implementei requisi√ß√µes HTTP com Fetch API\n- [ ] Tratei erros de forma robusta em opera√ß√µes ass√≠ncronas\n- [ ] Criei aplica√ß√µes que lidam com m√∫ltiplas opera√ß√µes ass√≠ncronas\n- [ ] Completei o sistema de gerenciamento de tarefas com API\n- [ ] Testei todas as funcionalidades ass√≠ncronas\n\n---\n\n*Parab√©ns! Voc√™ dominou Promises e Async/Await e pode criar aplica√ß√µes ass√≠ncronas robustas! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript-avancado/aula-3-promises-async.mp4"
                                },
                                {
                                    id: 17,
                                    title: "Aula 4: Classes e Heran√ßa ES6",
                                    duration: 1800,
                                    type: "video",
                                    content: "# Aula 4: Classes e Heran√ßa ES6\n\n## üéØ Objetivos\n- Compreender o sistema de classes ES6\n- Dominar construtores, m√©todos e propriedades\n- Implementar getters e setters\n- Aplicar heran√ßa e extens√£o de classes\n- Criar hierarquias de classes para projetos reais\n\n## üß† Conte√∫do Te√≥rico\n\n### **1. Classes ES6 - Sintaxe Moderna**\n\n**Classes** s√£o uma forma mais limpa e organizada de criar objetos com m√©todos e propriedades.\n\n#### **Sintaxe B√°sica:**\n```javascript\nclass Usuario {\n    constructor(nome, email, idade) {\n        this.nome = nome;\n        this.email = email;\n        this.idade = idade;\n        this.ativo = true;\n        this.dataCriacao = new Date();\n    }\n\n    // M√©todo de inst√¢ncia\n    saudar() {\n        return `Ol√°, meu nome √© ${this.nome}!`;\n    }\n\n    // M√©todo para verificar se √© maior de idade\n    ehMaiorDeIdade() {\n        return this.idade >= 18;\n    }\n\n    // M√©todo para desativar usu√°rio\n    desativar() {\n        this.ativo = false;\n        return `${this.nome} foi desativado.`;\n    }\n\n    // Getter para nome completo\n    get nomeCompleto() {\n        return this.nome.toUpperCase();\n    }\n\n    // Setter para idade com valida√ß√£o\n    set novaIdade(idade) {\n        if (idade >= 0 && idade <= 120) {\n            this.idade = idade;\n        } else {\n            throw new Error('Idade inv√°lida!');\n        }\n    }\n\n    // M√©todo est√°tico (n√£o precisa de inst√¢ncia)\n    static criarUsuarioAdmin(nome, email) {\n        const admin = new Usuario(nome, email, 18);\n        admin.isAdmin = true;\n        return admin;\n    }\n}\n\n// Criando inst√¢ncias\nconst usuario1 = new Usuario('Jo√£o', 'joao@email.com', 25);\nconst usuario2 = new Usuario('Maria', 'maria@email.com', 30);\n\n// Usando m√©todos\nconsole.log(usuario1.saudar()); // \"Ol√°, meu nome √© Jo√£o!\"\nconsole.log(usuario1.ehMaiorDeIdade()); // true\n\n// Usando getters e setters\nconsole.log(usuario1.nomeCompleto); // \"JO√ÉO\"\nusuario1.novaIdade = 26; // Usando setter\n\n// Usando m√©todo est√°tico\nconst admin = Usuario.criarUsuarioAdmin('Admin', 'admin@email.com');\n```\n\n### **2. Construtor e Inicializa√ß√£o**\n\n#### **Construtor com Valida√ß√µes:**\n```javascript\nclass Produto {\n    constructor(nome, preco, categoria) {\n        // Valida√ß√µes no construtor\n        if (!nome || typeof nome !== 'string') {\n            throw new Error('Nome √© obrigat√≥rio e deve ser uma string');\n        }\n        if (preco < 0) {\n            throw new Error('Pre√ßo n√£o pode ser negativo');\n        }\n        if (!categoria || !['eletronicos', 'roupas', 'livros'].includes(categoria)) {\n            throw new Error('Categoria inv√°lida');\n        }\n\n        this.nome = nome;\n        this.preco = preco;\n        this.categoria = categoria;\n        this.id = this.gerarId();\n        this.dataCriacao = new Date();\n    }\n\n    // M√©todo privado (conven√ß√£o)\n    gerarId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    // M√©todo para aplicar desconto\n    aplicarDesconto(percentual) {\n        if (percentual < 0 || percentual > 100) {\n            throw new Error('Percentual de desconto inv√°lido');\n        }\n        \n        const desconto = this.preco * (percentual / 100);\n        this.preco -= desconto;\n        return `Desconto de ${percentual}% aplicado. Novo pre√ßo: R$ ${this.preco.toFixed(2)}`;\n    }\n\n    // Getter para pre√ßo formatado\n    get precoFormatado() {\n        return `R$ ${this.preco.toFixed(2)}`;\n    }\n\n    // Setter para pre√ßo com valida√ß√£o\n    set novoPreco(preco) {\n        if (preco < 0) {\n            throw new Error('Pre√ßo n√£o pode ser negativo');\n        }\n        this.preco = preco;\n    }\n}\n\n// Testando a classe\nconst produto1 = new Produto('Smartphone', 1500, 'eletronicos');\nconsole.log(produto1.precoFormatado); // \"R$ 1500.00\"\n\nproduto1.aplicarDesconto(10); // \"Desconto de 10% aplicado. Novo pre√ßo: R$ 1350.00\"\nconsole.log(produto1.precoFormatado); // \"R$ 1350.00\"\n```\n\n### **3. Getters e Setters**\n\n#### **Controle de Acesso com Getters/Setters:**\n```javascript\nclass ContaBancaria {\n    constructor(titular, saldoInicial = 0) {\n        this._titular = titular; // Conven√ß√£o para propriedade privada\n        this._saldo = saldoInicial;\n        this._historico = [];\n        this._limite = 1000;\n    }\n\n    // Getter para titular (somente leitura)\n    get titular() {\n        return this._titular;\n    }\n\n    // Getter para saldo (somente leitura)\n    get saldo() {\n        return this._saldo;\n    }\n\n    // Getter para saldo formatado\n    get saldoFormatado() {\n        return `R$ ${this._saldo.toFixed(2)}`;\n    }\n\n    // Getter para hist√≥rico (somente leitura)\n    get historico() {\n        return [...this._historico]; // Retorna c√≥pia para n√£o modificar original\n    }\n\n    // Setter para limite com valida√ß√£o\n    set limite(novoLimite) {\n        if (novoLimite < 0) {\n            throw new Error('Limite n√£o pode ser negativo');\n        }\n        this._limite = novoLimite;\n        this.adicionarTransacao('Limite alterado', 0, `Novo limite: R$ ${novoLimite.toFixed(2)}`);\n    }\n\n    // M√©todo para adicionar transa√ß√£o\n    adicionarTransacao(tipo, valor, descricao = '') {\n        const transacao = {\n            data: new Date(),\n            tipo,\n            valor,\n            descricao,\n            saldoAnterior: this._saldo\n        };\n\n        this._historico.push(transacao);\n    }\n\n    // M√©todo para dep√≥sito\n    depositar(valor) {\n        if (valor <= 0) {\n            throw new Error('Valor do dep√≥sito deve ser positivo');\n        }\n\n        this._saldo += valor;\n        this.adicionarTransacao('Dep√≥sito', valor, 'Dep√≥sito realizado');\n        return `Dep√≥sito de R$ ${valor.toFixed(2)} realizado. Saldo atual: ${this.saldoFormatado}`;\n    }\n\n    // M√©todo para saque\n    sacar(valor) {\n        if (valor <= 0) {\n            throw new Error('Valor do saque deve ser positivo');\n        }\n        if (valor > this._saldo + this._limite) {\n            throw new Error('Saldo insuficiente');\n        }\n\n        this._saldo -= valor;\n        this.adicionarTransacao('Saque', -valor, 'Saque realizado');\n        return `Saque de R$ ${valor.toFixed(2)} realizado. Saldo atual: ${this.saldoFormatado}`;\n    }\n\n    // M√©todo para transfer√™ncia\n    transferir(destinatario, valor) {\n        if (!(destinatario instanceof ContaBancaria)) {\n            throw new Error('Destinat√°rio deve ser uma conta banc√°ria v√°lida');\n        }\n        if (valor <= 0) {\n            throw new Error('Valor da transfer√™ncia deve ser positivo');\n        }\n        if (valor > this._saldo) {\n            throw new Error('Saldo insuficiente para transfer√™ncia');\n        }\n\n        this._saldo -= valor;\n        destinatario._saldo += valor;\n\n        this.adicionarTransacao('Transfer√™ncia', -valor, `Transfer√™ncia para ${destinatario.titular}`);\n        destinatario.adicionarTransacao('Transfer√™ncia', valor, `Transfer√™ncia de ${this.titular}`);\n\n        return `Transfer√™ncia de R$ ${valor.toFixed(2)} realizada para ${destinatario.titular}`;\n    }\n\n    // M√©todo para extrato\n    gerarExtrato() {\n        console.log(`\\n=== EXTRATO BANC√ÅRIO ===`);\n        console.log(`Titular: ${this.titular}`);\n        console.log(`Saldo Atual: ${this.saldoFormatado}`);\n        console.log(`Limite: R$ ${this._limite.toFixed(2)}`);\n        console.log(`\\n=== HIST√ìRICO DE TRANSA√á√ïES ===`);\n        \n        this._historico.forEach((transacao, index) => {\n            const data = transacao.data.toLocaleDateString('pt-BR');\n            const hora = transacao.data.toLocaleTimeString('pt-BR');\n            const valorFormatado = transacao.valor >= 0 ? \n                `+R$ ${transacao.valor.toFixed(2)}` : \n                `R$ ${Math.abs(transacao.valor).toFixed(2)}`;\n            \n            console.log(`${index + 1}. ${data} ${hora} - ${transacao.tipo}: ${valorFormatado}`);\n            if (transacao.descricao) {\n                console.log(`   ${transacao.descricao}`);\n            }\n        });\n    }\n}\n\n// Testando a classe\nconst conta1 = new ContaBancaria('Jo√£o Silva', 1000);\nconst conta2 = new ContaBancaria('Maria Santos', 500);\n\nconsole.log(conta1.saldoFormatado); // \"R$ 1000.00\"\n\nconta1.depositar(500); // \"Dep√≥sito de R$ 500.00 realizado. Saldo atual: R$ 1500.00\"\nconta1.sacar(200); // \"Saque de R$ 200.00 realizado. Saldo atual: R$ 1300.00\"\nconta1.transferir(conta2, 300); // \"Transfer√™ncia de R$ 300.00 realizada para Maria Santos\"\n\nconta1.gerarExtrato();\n```\n\n### **4. Heran√ßa e Extens√£o**\n\n#### **Sistema de Heran√ßa ES6:**\n```javascript\n// Classe base (superclasse)\nclass Animal {\n    constructor(nome, especie, idade) {\n        this.nome = nome;\n        this.especie = especie;\n        this.idade = idade;\n        this.vivo = true;\n    }\n\n    // M√©todo da classe base\n    fazerBarulho() {\n        return 'Faz algum barulho...';\n    }\n\n    // M√©todo para envelhecer\n    envelhecer() {\n        this.idade++;\n        return `${this.nome} agora tem ${this.idade} anos.`;\n    }\n\n    // M√©todo para morrer\n    morrer() {\n        this.vivo = false;\n        return `${this.nome} faleceu.`;\n    }\n\n    // Getter para status\n    get status() {\n        return this.vivo ? 'Vivo' : 'Morto';\n    }\n}\n\n// Classe derivada (subclasse) - Cachorro\nclass Cachorro extends Animal {\n    constructor(nome, raca, idade) {\n        super(nome, 'Cachorro', idade); // Chama construtor da classe pai\n        this.raca = raca;\n        this.feliz = true;\n    }\n\n    // Sobrescreve m√©todo da classe pai\n    fazerBarulho() {\n        return 'Au au! üêï';\n    }\n\n    // M√©todo espec√≠fico da classe Cachorro\n    abanarRabo() {\n        this.feliz = true;\n        return `${this.nome} est√° abanando o rabo! üêï`;\n    }\n\n    // M√©todo para brincar\n    brincar() {\n        if (this.feliz) {\n            return `${this.nome} est√° brincando feliz! üéæ`;\n        } else {\n            return `${this.nome} n√£o est√° com vontade de brincar.`;\n        }\n    }\n\n    // Getter espec√≠fico\n    get descricao() {\n        return `${this.nome} √© um ${this.raca} de ${this.idade} anos. Status: ${this.status}`;\n    }\n}\n\n// Classe derivada (subclasse) - Gato\nclass Gato extends Animal {\n    constructor(nome, cor, idade) {\n        super(nome, 'Gato', idade);\n        this.cor = cor;\n        this.independente = true;\n    }\n\n    // Sobrescreve m√©todo da classe pai\n    fazerBarulho() {\n        return 'Miau! üê±';\n    }\n\n    // M√©todo espec√≠fico da classe Gato\n    ronronar() {\n        return `${this.nome} est√° ronronando... üò∫`;\n    }\n\n    // M√©todo para ca√ßar\n    ca√ßar() {\n        if (this.independente) {\n            return `${this.nome} saiu para ca√ßar sozinho.`;\n        } else {\n            return `${this.nome} prefere ficar em casa.`;\n        }\n    }\n\n    // Getter espec√≠fico\n    get descricao() {\n        return `${this.nome} √© um gato ${this.cor} de ${this.idade} anos. Status: ${this.status}`;\n    }\n}\n\n// Classe derivada (subclasse) - Ave\nclass Ave extends Animal {\n    constructor(nome, tipo, idade, podeVoar = true) {\n        super(nome, tipo, idade);\n        this.podeVoar = podeVoar;\n        this.alturaVoo = 0;\n    }\n\n    // Sobrescreve m√©todo da classe pai\n    fazerBarulho() {\n        return 'Piu piu! üê¶';\n    }\n\n    // M√©todo espec√≠fico da classe Ave\n    voar(altura) {\n        if (this.podeVoar) {\n            this.alturaVoo = altura;\n            return `${this.nome} voou a ${altura} metros de altura!`;\n        } else {\n            return `${this.nome} n√£o pode voar.`;\n        }\n    }\n\n    // M√©todo para pousar\n    pousar() {\n        if (this.alturaVoo > 0) {\n            this.alturaVoo = 0;\n            return `${this.nome} pousou no ch√£o.`;\n        } else {\n            return `${this.nome} j√° est√° no ch√£o.`;\n        }\n    }\n\n    // Getter espec√≠fico\n    get descricao() {\n        const voo = this.podeVoar ? 'pode voar' : 'n√£o pode voar';\n        return `${this.nome} √© um ${this.tipo} de ${this.idade} anos que ${voo}. Status: ${this.status}`;\n    }\n}\n\n// Testando as classes\nconst cachorro = new Cachorro('Rex', 'Labrador', 3);\nconst gato = new Gato('Mimi', 'laranja', 2);\nconst passarinho = new Ave('Piu', 'Can√°rio', 1);\nconst pinguim = new Ave('Pingu', 'Pinguim', 2, false);\n\nconsole.log(cachorro.fazerBarulho()); // \"Au au! üêï\"\nconsole.log(gato.fazerBarulho()); // \"Miau! üê±\"\nconsole.log(passarinho.fazerBarulho()); // \"Piu piu! üê¶\"\n\nconsole.log(cachorro.abanarRabo()); // \"Rex est√° abanando o rabo! üêï\"\nconsole.log(gato.ronronar()); // \"Mimi est√° ronronando... üò∫\"\nconsole.log(passarinho.voar(10)); // \"Piu voou a 10 metros de altura!\"\nconsole.log(pinguim.voar(5)); // \"Pingu n√£o pode voar.\"\n\nconsole.log(cachorro.descricao); // \"Rex √© um Labrador de 3 anos. Status: Vivo\"\nconsole.log(gato.descricao); // \"Mimi √© um gato laranja de 2 anos. Status: Vivo\"\nconsole.log(passarinho.descricao); // \"Piu √© um Can√°rio de 1 anos que pode voar. Status: Vivo\"\n```\n\n### **5. M√©todos Est√°ticos e Privados**\n\n#### **M√©todos Est√°ticos e Conven√ß√µes de Privacidade:**\n```javascript\nclass Biblioteca {\n    constructor(nome) {\n        this.nome = nome;\n        this._livros = []; // Conven√ß√£o para propriedade privada\n        this._usuarios = [];\n        this._emprestimos = [];\n    }\n\n    // M√©todo est√°tico para criar biblioteca padr√£o\n    static criarBibliotecaPadrao() {\n        const biblioteca = new Biblioteca('Biblioteca Municipal');\n        biblioteca.adicionarLivro('Dom Casmurro', 'Machado de Assis', 'Romance');\n        biblioteca.adicionarLivro('O Corti√ßo', 'Alu√≠sio Azevedo', 'Romance');\n        biblioteca.adicionarLivro('Grande Sert√£o: Veredas', 'Guimar√£es Rosa', 'Romance');\n        return biblioteca;\n    }\n\n    // M√©todo est√°tico para validar ISBN\n    static validarISBN(isbn) {\n        // Valida√ß√£o simples de ISBN (formato: 978-0-7475-3269-9)\n        const regex = /^\\d{3}-\\d{1}-\\d{4}-\\d{4}-\\d{1}$/;\n        return regex.test(isbn);\n    }\n\n    // M√©todo para adicionar livro\n    adicionarLivro(titulo, autor, genero, isbn = null) {\n        if (isbn && !Biblioteca.validarISBN(isbn)) {\n            throw new Error('ISBN inv√°lido');\n        }\n\n        const livro = {\n            id: this._gerarId(),\n            titulo,\n            autor,\n            genero,\n            isbn,\n            disponivel: true,\n            dataAdicao: new Date()\n        };\n\n        this._livros.push(livro);\n        return `Livro '${titulo}' adicionado com sucesso.`;\n    }\n\n    // M√©todo para buscar livros\n    buscarLivros(criterio, valor) {\n        return this._livros.filter(livro => {\n            switch (criterio) {\n                case 'titulo':\n                    return livro.titulo.toLowerCase().includes(valor.toLowerCase());\n                case 'autor':\n                    return livro.autor.toLowerCase().includes(valor.toLowerCase());\n                case 'genero':\n                    return livro.genero.toLowerCase() === valor.toLowerCase();\n                case 'disponivel':\n                    return livro.disponivel === valor;\n                default:\n                    return false;\n            }\n        });\n    }\n\n    // M√©todo para emprestar livro\n    emprestarLivro(idLivro, idUsuario) {\n        const livro = this._livros.find(l => l.id === idLivro);\n        const usuario = this._usuarios.find(u => u.id === idUsuario);\n\n        if (!livro) {\n            throw new Error('Livro n√£o encontrado');\n        }\n        if (!usuario) {\n            throw new Error('Usu√°rio n√£o encontrado');\n        }\n        if (!livro.disponivel) {\n            throw new Error('Livro n√£o est√° dispon√≠vel');\n        }\n\n        livro.disponivel = false;\n        const emprestimo = {\n            id: this._gerarId(),\n            idLivro,\n            idUsuario,\n            dataEmprestimo: new Date(),\n            dataDevolucao: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // 14 dias\n        };\n\n        this._emprestimos.push(emprestimo);\n        return `Livro '${livro.titulo}' emprestado para ${usuario.nome}. Devolu√ß√£o: ${emprestimo.dataDevolucao.toLocaleDateString('pt-BR')}`;\n    }\n\n    // M√©todo para devolver livro\n    devolverLivro(idEmprestimo) {\n        const emprestimo = this._emprestimos.find(e => e.id === idEmprestimo);\n        if (!emprestimo) {\n            throw new Error('Empr√©stimo n√£o encontrado');\n        }\n\n        const livro = this._livros.find(l => l.id === emprestimo.idLivro);\n        livro.disponivel = true;\n\n        const index = this._emprestimos.indexOf(emprestimo);\n        this._emprestimos.splice(index, 1);\n\n        return `Livro '${livro.titulo}' devolvido com sucesso.`;\n    }\n\n    // M√©todo para adicionar usu√°rio\n    adicionarUsuario(nome, email, tipo = 'comum') {\n        const usuario = {\n            id: this._gerarId(),\n            nome,\n            email,\n            tipo,\n            dataCadastro: new Date(),\n            ativo: true\n        };\n\n        this._usuarios.push(usuario);\n        return `Usu√°rio '${nome}' cadastrado com sucesso.`;\n    }\n\n    // M√©todo para gerar relat√≥rio\n    gerarRelatorio() {\n        const totalLivros = this._livros.length;\n        const livrosDisponiveis = this._livros.filter(l => l.disponivel).length;\n        const livrosEmprestados = totalLivros - livrosDisponiveis;\n        const totalUsuarios = this._usuarios.length;\n        const emprestimosAtivos = this._emprestimos.length;\n\n        console.log(`\\n=== RELAT√ìRIO DA BIBLIOTECA ${this.nome.toUpperCase()} ===`);\n        console.log(`Total de Livros: ${totalLivros}`);\n        console.log(`Livros Dispon√≠veis: ${livrosDisponiveis}`);\n        console.log(`Livros Emprestados: ${livrosEmprestados}`);\n        console.log(`Total de Usu√°rios: ${totalUsuarios}`);\n        console.log(`Empr√©stimos Ativos: ${emprestimosAtivos}`);\n        \n        if (emprestimosAtivos > 0) {\n            console.log(`\\n=== EMPR√âSTIMOS ATIVOS ===`);\n            this._emprestimos.forEach(emprestimo => {\n                const livro = this._livros.find(l => l.id === emprestimo.idLivro);\n                const usuario = this._usuarios.find(u => u.id === emprestimo.idUsuario);\n                console.log(`- ${livro.titulo} emprestado para ${usuario.nome} at√© ${emprestimo.dataDevolucao.toLocaleDateString('pt-BR')}`);\n            });\n        }\n    }\n\n    // M√©todo privado (conven√ß√£o)\n    _gerarId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    // Getter para estat√≠sticas\n    get estatisticas() {\n        return {\n            totalLivros: this._livros.length,\n            livrosDisponiveis: this._livros.filter(l => l.disponivel).length,\n            totalUsuarios: this._usuarios.length,\n            emprestimosAtivos: this._emprestimos.length\n        };\n    }\n}\n\n// Testando a biblioteca\nconst biblioteca = Biblioteca.criarBibliotecaPadrao();\n\nbiblioteca.adicionarUsuario('Jo√£o Silva', 'joao@email.com', 'estudante');\nbiblioteca.adicionarUsuario('Maria Santos', 'maria@email.com', 'professor');\n\nbiblioteca.adicionarLivro('1984', 'George Orwell', 'Fic√ß√£o Cient√≠fica', '978-0-452-28423-4');\n\nconsole.log(biblioteca.estatisticas);\n\n// Buscar livros\nconst livrosRomance = biblioteca.buscarLivros('genero', 'Romance');\nconsole.log('Livros de Romance:', livrosRomance.length);\n\n// Emprestar livro\nconst usuario = biblioteca._usuarios[0];\nconst livro = biblioteca._livros[0];\nconsole.log(biblioteca.emprestarLivro(livro.id, usuario.id));\n\nbiblioteca.gerarRelatorio();\n```\n\n## üíª Exemplo Pr√°tico\n\n### **Sistema de Gerenciamento de Eventos com Classes:**\n\n```javascript\n// Classe base para eventos\nclass Evento {\n    constructor(nome, data, local, capacidade) {\n        this.nome = nome;\n        this.data = new Date(data);\n        this.local = local;\n        this.capacidade = capacidade;\n        this.inscritos = [];\n        this.status = 'ativo';\n        this.categoria = 'geral';\n    }\n\n    // M√©todo para inscrever participante\n    inscreverParticipante(participante) {\n        if (this.inscritos.length >= this.capacidade) {\n            throw new Error('Evento lotado!');\n        }\n        if (this.status !== 'ativo') {\n            throw new Error('Evento n√£o est√° ativo para inscri√ß√µes');\n        }\n        if (this.inscritos.find(p => p.email === participante.email)) {\n            throw new Error('Participante j√° inscrito!');\n        }\n\n        this.inscritos.push(participante);\n        return `${participante.nome} inscrito com sucesso!`;\n    }\n\n    // M√©todo para cancelar inscri√ß√£o\n    cancelarInscricao(email) {\n        const index = this.inscritos.findIndex(p => p.email === email);\n        if (index === -1) {\n            throw new Error('Participante n√£o encontrado');\n        }\n\n        const participante = this.inscritos.splice(index, 1)[0];\n        return `Inscri√ß√£o de ${participante.nome} cancelada.`;\n    }\n\n    // M√©todo para alterar status\n    alterarStatus(novoStatus) {\n        const statusValidos = ['ativo', 'cancelado', 'concluido', 'adiado'];\n        if (!statusValidos.includes(novoStatus)) {\n            throw new Error('Status inv√°lido');\n        }\n\n        this.status = novoStatus;\n        return `Status do evento alterado para: ${novoStatus}`;\n    }\n\n    // Getter para vagas restantes\n    get vagasRestantes() {\n        return this.capacidade - this.inscritos.length;\n    }\n\n    // Getter para percentual de ocupa√ß√£o\n    get ocupacao() {\n        return (this.inscritos.length / this.capacidade) * 100;\n    }\n\n    // M√©todo para gerar relat√≥rio\n    gerarRelatorio() {\n        console.log(`\\n=== RELAT√ìRIO DO EVENTO: ${this.nome} ===`);\n        console.log(`Data: ${this.data.toLocaleDateString('pt-BR')}`);\n        console.log(`Local: ${this.local}`);\n        console.log(`Capacidade: ${this.capacidade} pessoas`);\n        console.log(`Inscritos: ${this.inscritos.length} pessoas`);\n        console.log(`Vagas restantes: ${this.vagasRestantes} pessoas`);\n        console.log(`Ocupa√ß√£o: ${this.ocupacao.toFixed(1)}%`);\n        console.log(`Status: ${this.status}`);\n        \n        if (this.inscritos.length > 0) {\n            console.log(`\\n=== LISTA DE INSCRITOS ===`);\n            this.inscritos.forEach((participante, index) => {\n                console.log(`${index + 1}. ${participante.nome} - ${participante.email}`);\n            });\n        }\n    }\n}\n\n// Classe derivada para eventos de tecnologia\nclass EventoTecnologia extends Evento {\n    constructor(nome, data, local, capacidade, tecnologia) {\n        super(nome, data, local, capacidade);\n        this.tecnologia = tecnologia;\n        this.categoria = 'tecnologia';\n        this.palestrantes = [];\n        this.workshops = [];\n    }\n\n    // M√©todo para adicionar palestrante\n    adicionarPalestrante(palestrante) {\n        this.palestrantes.push(palestrante);\n        return `Palestrante ${palestrante.nome} adicionado ao evento.`;\n    }\n\n    // M√©todo para adicionar workshop\n    adicionarWorkshop(workshop) {\n        this.workshops.push(workshop);\n        return `Workshop '${workshop.titulo}' adicionado ao evento.`;\n    }\n\n    // Sobrescreve m√©todo de relat√≥rio\n    gerarRelatorio() {\n        super.gerarRelatorio(); // Chama m√©todo da classe pai\n        \n        console.log(`\\n=== DETALHES T√âCNICOS ===`);\n        console.log(`Tecnologia: ${this.tecnologia}`);\n        console.log(`Palestrantes: ${this.palestrantes.length}`);\n        console.log(`Workshops: ${this.workshops.length}`);\n        \n        if (this.palestrantes.length > 0) {\n            console.log(`\\n=== PALESTRANTES ===`);\n            this.palestrantes.forEach((palestrante, index) => {\n                console.log(`${index + 1}. ${palestrante.nome} - ${palestrante.especialidade}`);\n            });\n        }\n        \n        if (this.workshops.length > 0) {\n            console.log(`\\n=== WORKSHOPS ===`);\n            this.workshops.forEach((workshop, index) => {\n                console.log(`${index + 1}. ${workshop.titulo} - ${workshop.duracao} horas`);\n            });\n        }\n    }\n}\n\n// Classe para participantes\nclass Participante {\n    constructor(nome, email, telefone, tipo = 'estudante') {\n        this.nome = nome;\n        this.email = email;\n        this.telefone = telefone;\n        this.tipo = tipo;\n        this.dataInscricao = new Date();\n        this.eventos = [];\n    }\n\n    // M√©todo para inscrever em evento\n    inscreverEmEvento(evento) {\n        if (this.eventos.find(e => e.id === evento.id)) {\n            throw new Error('J√° inscrito neste evento!');\n        }\n\n        this.eventos.push(evento);\n        return `${this.nome} inscrito no evento '${evento.nome}'`;\n    }\n\n    // Getter para total de eventos\n    get totalEventos() {\n        return this.eventos.length;\n    }\n\n    // M√©todo para gerar perfil\n    gerarPerfil() {\n        console.log(`\\n=== PERFIL DO PARTICIPANTE ===`);\n        console.log(`Nome: ${this.nome}`);\n        console.log(`Email: ${this.email}`);\n        console.log(`Telefone: ${this.telefone}`);\n        console.log(`Tipo: ${this.tipo}`);\n        console.log(`Data de Inscri√ß√£o: ${this.dataInscricao.toLocaleDateString('pt-BR')}`);\n        console.log(`Total de Eventos: ${this.totalEventos}`);\n        \n        if (this.eventos.length > 0) {\n            console.log(`\\n=== EVENTOS INSCRITOS ===`);\n            this.eventos.forEach((evento, index) => {\n                console.log(`${index + 1}. ${evento.nome} - ${evento.data.toLocaleDateString('pt-BR')}`);\n            });\n        }\n    }\n}\n\n// Classe para palestrantes\nclass Palestrante extends Participante {\n    constructor(nome, email, telefone, especialidade, experiencia) {\n        super(nome, email, telefone, 'palestrante');\n        this.especialidade = especialidade;\n        this.experiencia = experiencia; // em anos\n        this.palestras = [];\n    }\n\n    // M√©todo para adicionar palestra\n    adicionarPalestra(palestra) {\n        this.palestras.push(palestra);\n        return `Palestra '${palestra.titulo}' adicionada ao portf√≥lio.`;\n    }\n\n    // Getter para n√≠vel de experi√™ncia\n    get nivelExperiencia() {\n        if (this.experiencia < 2) return 'Iniciante';\n        if (this.experiencia < 5) return 'Intermedi√°rio';\n        if (this.experiencia < 10) return 'Avan√ßado';\n        return 'Expert';\n    }\n\n    // Sobrescreve m√©todo de perfil\n    gerarPerfil() {\n        super.gerarPerfil(); // Chama m√©todo da classe pai\n        \n        console.log(`\\n=== DETALHES DO PALESTRANTE ===`);\n        console.log(`Especialidade: ${this.especialidade}`);\n        console.log(`Experi√™ncia: ${this.experiencia} anos`);\n        console.log(`N√≠vel: ${this.nivelExperiencia}`);\n        console.log(`Total de Palestras: ${this.palestras.length}`);\n        \n        if (this.palestras.length > 0) {\n            console.log(`\\n=== PALESTRAS ===`);\n            this.palestras.forEach((palestra, index) => {\n                console.log(`${index + 1}. ${palestra.titulo} - ${palestra.duracao} min`);\n            });\n        }\n    }\n}\n\n// Classe para workshops\nclass Workshop {\n    constructor(titulo, duracao, instrutor, nivel) {\n        this.titulo = titulo;\n        this.duracao = duracao; // em horas\n        this.instrutor = instrutor;\n        this.nivel = nivel; // iniciante, intermedi√°rio, avan√ßado\n        this.material = [];\n        this.inscritos = [];\n    }\n\n    // M√©todo para adicionar material\n    adicionarMaterial(material) {\n        this.material.push(material);\n        return `Material '${material.nome}' adicionado ao workshop.`;\n    }\n\n    // M√©todo para inscrever participante\n    inscreverParticipante(participante) {\n        if (this.inscritos.find(p => p.email === participante.email)) {\n            throw new Error('Participante j√° inscrito neste workshop!');\n        }\n\n        this.inscritos.push(participante);\n        return `${participante.nome} inscrito no workshop '${this.titulo}'`;\n    }\n\n    // Getter para vagas restantes\n    get vagasRestantes() {\n        return 20 - this.inscritos.length; // Capacidade fixa de 20\n    }\n}\n\n// Testando o sistema\nconst eventoJS = new EventoTecnologia(\n    'JavaScript Conference 2025',\n    '2025-06-15',\n    'Centro de Conven√ß√µes',\n    200,\n    'JavaScript'\n);\n\nconst joao = new Participante('Jo√£o Silva', 'joao@email.com', '(11) 99999-9999', 'estudante');\nconst maria = new Participante('Maria Santos', 'maria@email.com', '(11) 88888-8888', 'professor');\nconst pedro = new Palestrante('Pedro Costa', 'pedro@email.com', '(11) 77777-7777', 'Frontend', 8);\n\n// Adicionando palestrantes e workshops\neventoJS.adicionarPalestrante(pedro);\n\nconst workshopReact = new Workshop('React Avan√ßado', 4, pedro, 'avan√ßado');\neventoJS.adicionarWorkshop(workshopReact);\n\n// Inscri√ß√µes\nconsole.log(eventoJS.inscreverParticipante(joao));\nconsole.log(eventoJS.inscreverParticipante(maria));\n\n// Gerando relat√≥rios\npedro.gerarPerfil();\neventoJS.gerarRelatorio();\n```\n\n## üõ† Desafio da Aula\n\n**Implementar sistema de heran√ßa para diferentes tipos de usu√°rios.**\n\n**Requisitos:**\n- Classe base Usuario com propriedades comuns\n- Classes derivadas: Admin, Moderador, UsuarioComum\n- Diferentes n√≠veis de permiss√£o\n- Sistema de hierarquia\n- M√©todos espec√≠ficos para cada tipo\n\n## üìå Incremento no Projeto Real\n\n**Projeto: Gerenciador de Eventos**\n\n- Sistema de usu√°rios com hierarquia\n- Diferentes tipos de eventos (gratuito, pago, VIP)\n- Sistema de permiss√µes baseado em classes\n- Gerenciamento avan√ßado de participantes\n- Relat√≥rios personalizados por tipo de usu√°rio\n\n## ‚úÖ Checklist de Conclus√£o\n\n- [ ] Compreendi o sistema de classes ES6\n- [ ] Dominei construtores, m√©todos e propriedades\n- [ ] Implementei getters e setters\n- [ ] Apliquei heran√ßa e extens√£o de classes\n- [ ] Criei hierarquias de classes para projetos reais\n- [ ] Completei o sistema de gerenciamento de eventos com classes\n- [ ] Testei todas as funcionalidades de heran√ßa\n\n---\n\n*Parab√©ns! Voc√™ dominou Classes e Heran√ßa ES6 e pode criar sistemas orientados a objetos robustos! üöÄ*",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/javascript-avancado/aula-4-classes-heranca.mp4"
                                }
                            ]
                        },
                        {
                            id: 6,
                            title: "Responsividade Avan√ßada",
                            description: "Media queries, breakpoints estrat√©gicos e layouts responsivos modernos",
                            duration: 3,
                            lessons: [
                                {
                                    id: 18,
                                    title: "Aula 1: Responsividade Avan√ßada com Media Queries",
                                    duration: 1800,
                                    type: "video",
                                    content: "Media queries, breakpoints estrat√©gicos, design mobile-first e layouts responsivos.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/responsividade/aula-1-media-queries.mp4"
                                }
                            ]
                        },
                        {
                            id: 7,
                            title: "Tipografia Avan√ßada e Vari√°veis CSS",
                            description: "Propriedades tipogr√°ficas avan√ßadas, Google Fonts e sistema de design",
                            duration: 3,
                            lessons: [
                                {
                                    id: 19,
                                    title: "Aula 1: Tipografia Avan√ßada e Vari√°veis CSS",
                                    duration: 1800,
                                    type: "video",
                                    content: "Google Fonts, vari√°veis CSS, tipografia responsiva e sistema de design consistente.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/tipografia/aula-1-tipografia-avancada.mp4"
                                }
                            ]
                        },
                        {
                            id: 8,
                            title: "Projetos Avan√ßados e Integra√ß√£o",
                            description: "E-commerce responsivo, dashboard interativo e integra√ß√£o de tecnologias",
                            duration: 3,
                            lessons: [
                                {
                                    id: 20,
                                    title: "Aula 1: Projetos Avan√ßados e Integra√ß√£o",
                                    duration: 1800,
                                    type: "video",
                                    content: "E-commerce responsivo, dashboard interativo e integra√ß√£o completa de tecnologias.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/projetos/aula-1-projetos-avancados.mp4"
                                }
                            ]
                        },
                        {
                            id: 9,
                            title: "Deploy e Publica√ß√£o",
                            description: "Otimiza√ß√£o para produ√ß√£o, deploy em servidores e SEO b√°sico",
                            duration: 3,
                            lessons: [
                                {
                                    id: 21,
                                    title: "Aula 1: Deploy e Publica√ß√£o",
                                    duration: 1800,
                                    type: "video",
                                    content: "Otimiza√ß√£o para produ√ß√£o, deploy em servidores, SEO b√°sico e projeto final completo.",
                                    video_url: "https://fenix-academy.s3.amazonaws.com/courses/web-fundamentals/deploy/aula-1-deploy-publicacao.mp4"
                                }
                            ]
                        }
                    ]
                };

                setCourseData(mockData);
                setExpandedModules(new Set([1]));
                setExpandedLessons(new Set([1]));
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Failed to load course');
            } finally {
                setLoading(false);
            }
        };

        loadCourseData();
    }, []);

    const toggleModule = (moduleId: number) => {
        const newExpanded = new Set(expandedModules);
        if (newExpanded.has(moduleId)) {
            newExpanded.delete(moduleId);
        } else {
            newExpanded.add(moduleId);
        }
        setExpandedModules(newExpanded);
    };

    const formatDuration = (seconds: number) => {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        if (hours > 0) {
            return `${hours}h ${minutes}m`;
        }
        return `${minutes}m`;
    };

    const getLevelColor = (level: string) => {
        switch (level.toLowerCase()) {
            case 'beginner': return 'bg-green-100 text-green-800';
            case 'intermediate': return 'bg-yellow-100 text-yellow-800';
            case 'advanced': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    const getTypeIcon = (type: string) => {
        switch (type) {
            case 'video': return <Play className="w-4 h-4" />;
            case 'text': return <BookOpen className="w-4 h-4" />;
            case 'quiz': return <CheckCircle className="w-4 h-4" />;
            case 'exercise': return <Download className="w-4 h-4" />;
            case 'project': return <Award className="w-4 h-4" />;
            default: return <BookOpen className="w-4 h-4" />;
        }
    };

    const getTypeColor = (type: string) => {
        switch (type) {
            case 'video': return 'bg-blue-100 text-blue-800';
            case 'text': return 'bg-green-100 text-green-800';
            case 'quiz': return 'bg-purple-100 text-purple-800';
            case 'exercise': return 'bg-orange-100 text-orange-800';
            case 'project': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };

    // Fun√ß√£o para renderizar markdown simples
    const renderMarkdown = (content: string) => {
        return content
            .replace(/^# (.*$)/gim, '<h1 class="text-2xl font-bold text-gray-900 mb-4">$1</h1>')
            .replace(/^## (.*$)/gim, '<h2 class="text-xl font-bold text-gray-800 mb-3">$1</h2>')
            .replace(/^### (.*$)/gim, '<h3 class="text-lg font-semibold text-gray-800 mb-2">$1</h3>')
            .replace(/^#### (.*$)/gim, '<h4 class="text-base font-semibold text-gray-700 mb-2">$1</h4>')
            .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold">$1</strong>')
            .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
            .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre class="bg-gray-100 p-4 rounded-lg overflow-x-auto my-4"><code class="text-sm">$2</code></pre>')
            .replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">$1</code>')
            .replace(/\n/g, '<br>');
    };

    const toggleLesson = (lessonId: number) => {
        const newExpanded = new Set(expandedLessons);
        if (newExpanded.has(lessonId)) {
            newExpanded.delete(lessonId);
        } else {
            newExpanded.add(lessonId);
        }
        setExpandedLessons(newExpanded);
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-4 text-gray-600">Carregando curso...</p>
                </div>
            </div>
        );
    }

    if (error || !courseData) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <p className="text-red-600 mb-4">Erro ao carregar o curso</p>
                    <button
                        onClick={() => window.location.reload()}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                        Tentar novamente
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <div className="bg-white shadow-sm border-b">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
                    <div className="flex flex-col lg:flex-row gap-8">
                        {/* Course Info */}
                        <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                                <span className="text-sm text-gray-500">{courseData.category}</span>
                                <span className="text-gray-300">‚Ä¢</span>
                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getLevelColor(courseData.level)}`}>
                                    {courseData.level === 'beginner' ? 'Iniciante' :
                                        courseData.level === 'intermediate' ? 'Intermedi√°rio' : 'Avan√ßado'}
                                </span>
                            </div>

                            <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
                                {courseData.title}
                            </h1>

                            <p className="text-lg text-gray-600 mb-6">
                                {courseData.description}
                            </p>

                            <div className="flex flex-wrap items-center gap-6 text-sm text-gray-600">
                                <div className="flex items-center gap-2">
                                    <Users className="w-4 h-4" />
                                    <span>{courseData.students.toLocaleString()} alunos</span>
                                </div>
                                <div className="flex items-center gap-2">
                                    <Star className="w-4 h-4 text-yellow-400 fill-current" />
                                    <span>{courseData.rating} ({courseData.students} avalia√ß√µes)</span>
                                </div>
                                <div className="flex items-center gap-2">
                                    <Clock className="w-4 h-4" />
                                    <span>{courseData.duration}</span>
                                </div>
                                <div className="flex items-center gap-2">
                                    <BookOpen className="w-4 h-4" />
                                    <span>{courseData.lessons} aulas</span>
                                </div>
                            </div>
                        </div>

                        {/* Course Card */}
                        <div className="lg:w-80">
                            <div className="bg-white border border-gray-200 rounded-lg shadow-sm p-6 sticky top-6">
                                <div className="aspect-video bg-gray-100 rounded-lg mb-4 flex items-center justify-center">
                                    <img
                                        src={courseData.image}
                                        alt={courseData.title}
                                        className="w-full h-full object-cover rounded-lg"
                                        onError={(e) => {
                                            e.currentTarget.src = '/courses/web-fundamentals.jpg';
                                        }}
                                    />
                                </div>

                                <div className="flex items-center gap-2 mb-4">
                                    {courseData.originalPrice && courseData.originalPrice > courseData.price && (
                                        <span className="text-2xl font-bold text-gray-400 line-through">
                                            R$ {courseData.originalPrice}
                                        </span>
                                    )}
                                    <span className="text-3xl font-bold text-gray-900">
                                        R$ {courseData.price}
                                    </span>
                                    {courseData.discount && (
                                        <span className="bg-red-100 text-red-800 px-2 py-1 rounded text-sm font-medium">
                                            -{courseData.discount}%
                                        </span>
                                    )}
                                </div>

                                <button className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors mb-4">
                                    Matricular-se Agora
                                </button>

                                <div className="space-y-3 text-sm">
                                    <div className="flex items-center gap-3">
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                        <span>Acesso vital√≠cio</span>
                                    </div>
                                    <div className="flex items-center gap-3">
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                        <span>Certificado de conclus√£o</span>
                                    </div>
                                    <div className="flex items-center gap-3">
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                        <span>Suporte da comunidade</span>
                                    </div>
                                    <div className="flex items-center gap-3">
                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                        <span>Atualiza√ß√µes gratuitas</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Content */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Tabs */}
                <div className="border-b border-gray-200 mb-8">
                    <nav className="flex space-x-8">
                        {[
                            { id: 'overview', label: 'Vis√£o Geral' },
                            { id: 'content', label: 'Conte√∫do' },
                            { id: 'instructor', label: 'Instrutor' },
                            { id: 'reviews', label: 'Avalia√ß√µes' }
                        ].map((tab) => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id as any)}
                                className={`py-4 px-1 border-b-2 font-medium text-sm ${activeTab === tab.id
                                    ? 'border-blue-500 text-blue-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                    }`}
                            >
                                {tab.label}
                            </button>
                        ))}
                    </nav>
                </div>

                {/* Tab Content */}
                {activeTab === 'overview' && (
                    <div>
                        <div className="mb-6">
                            <h3 className="text-xl font-semibold text-gray-900 mb-4">üåü Vis√£o Geral - Qualidade CS50</h3>
                            <p className="text-gray-600 mb-6">
                                Este curso foi completamente atualizado com o padr√£o de qualidade CS50 da Fenix Academy.
                                Todo o conte√∫do foi personalizado e otimizado para o mercado brasileiro.
                            </p>
                        </div>

                        {/* Componente CS50 que exibe o README do curso */}
                        <CS50ContentDisplay courseId="1" />
                    </div>
                )}

                {activeTab === 'content' && (
                    <div>
                        <div className="mb-6">
                            <h3 className="text-xl font-semibold text-gray-900 mb-2">üéì Conte√∫do CS50 Personalizado</h3>
                            <p className="text-gray-600">
                                Conte√∫do de alta qualidade aplicado com sucesso! Todos os placeholders gen√©ricos foram substitu√≠dos por conte√∫do espec√≠fico e personalizado.
                            </p>
                        </div>

                        {/* Componente CS50 que exibe o conte√∫do real dos arquivos Markdown */}
                        <CS50ContentDisplay courseId="1" />
                    </div>
                )}

                {activeTab === 'instructor' && (
                    <div>
                        <div className="flex items-start gap-6">
                            <div className="w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center">
                                <span className="text-2xl font-bold text-gray-600">
                                    {courseData.instructor.split(' ').map(n => n[0]).join('')}
                                </span>
                            </div>
                            <div className="flex-1">
                                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                                    {courseData.instructor}
                                </h3>
                                <p className="text-gray-600 mb-4">
                                    Professor de desenvolvimento web com mais de 15 anos de experi√™ncia em educa√ß√£o.
                                    Especialista em HTML, CSS e JavaScript. J√° formou milhares de desenvolvedores
                                    e √© apaixonado por ensinar de forma did√°tica e pr√°tica.
                                </p>
                                <div className="grid grid-cols-2 gap-4 text-sm">
                                    <div>
                                        <span className="font-medium text-gray-900">Especialidades:</span>
                                        <p className="text-gray-600">HTML, CSS, JavaScript, Educa√ß√£o</p>
                                    </div>
                                    <div>
                                        <span className="font-medium text-gray-900">Experi√™ncia:</span>
                                        <p className="text-gray-600">15+ anos</p>
                                    </div>
                                    <div>
                                        <span className="font-medium text-gray-900">Alunos treinados:</span>
                                        <p className="text-gray-600">25.000+</p>
                                    </div>
                                    <div>
                                        <span className="font-medium text-gray-900">Cursos criados:</span>
                                        <p className="text-gray-600">20+</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {activeTab === 'reviews' && (
                    <div>
                        <div className="flex items-center gap-4 mb-6">
                            <div className="text-center">
                                <div className="text-4xl font-bold text-gray-900">{courseData.rating}</div>
                                <div className="flex items-center justify-center gap-1 mt-1">
                                    {[1, 2, 3, 4, 5].map((star) => (
                                        <Star
                                            key={star}
                                            className={`w-4 h-4 ${star <= Math.floor(courseData.rating)
                                                ? 'text-yellow-400 fill-current'
                                                : 'text-gray-300'
                                                }`}
                                        />
                                    ))}
                                </div>
                                <div className="text-sm text-gray-600 mt-1">
                                    {courseData.students} avalia√ß√µes
                                </div>
                            </div>
                        </div>

                        <div className="space-y-6">
                            {/* Mock reviews */}
                            {[
                                {
                                    name: "Ana Paula",
                                    rating: 5,
                                    date: "1 semana atr√°s",
                                    comment: "Curso perfeito para iniciantes! O Prof. Jo√£o explica de forma muito clara e did√°tica."
                                },
                                {
                                    name: "Carlos Eduardo",
                                    rating: 4,
                                    date: "2 semanas atr√°s",
                                    comment: "Muito bom curso. Consegui criar meu primeiro site gra√ßas ao curso."
                                },
                                {
                                    name: "Mariana Silva",
                                    rating: 5,
                                    date: "1 m√™s atr√°s",
                                    comment: "Professor excelente! Conte√∫do bem estruturado e exemplos pr√°ticos."
                                }
                            ].map((review, index) => (
                                <div key={index} className="border border-gray-200 rounded-lg p-6">
                                    <div className="flex items-center gap-3 mb-3">
                                        <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                                            <span className="text-sm font-medium text-gray-600">
                                                {review.name.split(' ').map(n => n[0]).join('')}
                                            </span>
                                        </div>
                                        <div>
                                            <div className="font-medium text-gray-900">{review.name}</div>
                                            <div className="flex items-center gap-2">
                                                <div className="flex items-center gap-1">
                                                    {[1, 2, 3, 4, 5].map((star) => (
                                                        <Star
                                                            key={star}
                                                            className={`w-3 h-3 ${star <= review.rating
                                                                ? 'text-yellow-400 fill-current'
                                                                : 'text-gray-300'
                                                                }`}
                                                        />
                                                    ))}
                                                </div>
                                                <span className="text-sm text-gray-500">{review.date}</span>
                                            </div>
                                        </div>
                                    </div>
                                    <p className="text-gray-700">{review.comment}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
} 
# Dockerfile otimizado para Render.com
# Multi-stage build para aplicação Next.js

# Estágio 1: Build
FROM node:18-alpine AS builder

# Instalar dependências do sistema
RUN apk add --no-cache libc6-compat

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências do frontend
COPY frontend/package*.json ./
COPY frontend/yarn.lock* ./

# Instalar dependências
RUN npm ci --only=production && npm cache clean --force

# Copiar código fonte do frontend
COPY frontend/ ./

# Build da aplicação
RUN npm run build

# Estágio 2: Produção
FROM node:18-alpine AS runner

# Instalar dependências do sistema
RUN apk add --no-cache libc6-compat curl

# Criar usuário não-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos necessários do build
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Copiar arquivos de configuração
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/package.json ./

# Definir permissões
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expor porta
EXPOSE 3000

# Variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Comando de inicialização
CMD ["node", "server.js"]
